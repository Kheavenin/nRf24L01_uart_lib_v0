
nRf24L01_uart_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000020c  080040c4  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080040c4  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001098d  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002554  00000000  00000000  00030bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d6a  00000000  00000000  000351e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf81  00000000  00000000  00049f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000753a5  00000000  00000000  00055ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  000cb2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000020c 	.word	0x2000020c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b28 	.word	0x08003b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000210 	.word	0x20000210
 8000148:	08003b28 	.word	0x08003b28

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4b      	ldr	r2, [pc, #300]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x148>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b43      	ldr	r3, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3d      	ldr	r3, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3a      	ldr	r3, [pc, #232]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001d6:	f001 fbe9 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2110      	movs	r1, #16
 80001de:	4833      	ldr	r0, [pc, #204]	; (80002ac <MX_GPIO_Init+0x150>)
 80001e0:	f001 fbe4 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	482c      	ldr	r0, [pc, #176]	; (80002ac <MX_GPIO_Init+0x150>)
 80001fa:	f001 fa7d 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001fe:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000204:	2303      	movs	r3, #3
 8000206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f001 fa72 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9 
 8000214:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000218:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021a:	2303      	movs	r3, #3
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000226:	f001 fa67 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4819      	ldr	r0, [pc, #100]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000242:	f001 fa59 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000246:	2310      	movs	r3, #16
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_GPIO_Init+0x150>)
 800025e:	f001 fa4b 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000274:	f001 fa40 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000278:	2304      	movs	r3, #4
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027c:	2303      	movs	r3, #3
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000288:	f001 fa36 	bl	80016f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f001 f984 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000296:	2028      	movs	r0, #40	; 0x28
 8000298:	f001 f99d 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40011400 	.word	0x40011400

080002bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002c2:	f001 f811 	bl	80012e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c6:	f000 f899 	bl	80003fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002ca:	f7ff ff47 	bl	800015c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80002ce:	f000 ff75 	bl	80011bc <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80002d2:	f000 fbf3 	bl	8000abc <MX_SPI1_Init>
	MX_TIM1_Init();
 80002d6:	f000 fd13 	bl	8000d00 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	sendString("\n\rPeriphery initialized.", &huart2);
 80002da:	493e      	ldr	r1, [pc, #248]	; (80003d4 <main+0x118>)
 80002dc:	483e      	ldr	r0, [pc, #248]	; (80003d8 <main+0x11c>)
 80002de:	f000 ff35 	bl	800114c <sendString>
	HAL_Delay(200);
 80002e2:	20c8      	movs	r0, #200	; 0xc8
 80002e4:	f001 f862 	bl	80013ac <HAL_Delay>

	HAL_TIM_Base_Start(&htim1);
 80002e8:	483c      	ldr	r0, [pc, #240]	; (80003dc <main+0x120>)
 80002ea:	f002 fcfa 	bl	8002ce2 <HAL_TIM_Base_Start>
	sendString("\n\rTIM start counting.", &huart2);
 80002ee:	4939      	ldr	r1, [pc, #228]	; (80003d4 <main+0x118>)
 80002f0:	483b      	ldr	r0, [pc, #236]	; (80003e0 <main+0x124>)
 80002f2:	f000 ff2b 	bl	800114c <sendString>
	HAL_Delay(200);
 80002f6:	20c8      	movs	r0, #200	; 0xc8
 80002f8:	f001 f858 	bl	80013ac <HAL_Delay>

	/* nrf24L01+ struct init*/
	nrfStruct_t *testNrfStruct;
	testNrfStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin, CE_GPIO_Port, CE_Pin);
 80002fc:	2310      	movs	r3, #16
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <main+0x128>)
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2310      	movs	r3, #16
 8000306:	4a38      	ldr	r2, [pc, #224]	; (80003e8 <main+0x12c>)
 8000308:	4934      	ldr	r1, [pc, #208]	; (80003dc <main+0x120>)
 800030a:	4838      	ldr	r0, [pc, #224]	; (80003ec <main+0x130>)
 800030c:	f000 faf8 	bl	8000900 <nRF_Init>
 8000310:	6078      	str	r0, [r7, #4]

	/* nrt Uart interface struct init */
	nRF_UartStruct_t *testUartStruct;
	testUartStruct = nRF_UartInit(testNrfStruct, &huart2);
 8000312:	4930      	ldr	r1, [pc, #192]	; (80003d4 <main+0x118>)
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 fd61 	bl	8000ddc <nRF_UartInit>
 800031a:	6038      	str	r0, [r7, #0]
	uartGlobalFlagIT = &(testUartStruct->uartIrqFlag);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3308      	adds	r3, #8
 8000320:	4a33      	ldr	r2, [pc, #204]	; (80003f0 <main+0x134>)
 8000322:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*) (testUartStruct->uartRxBuffer), UART_READ_SIZE);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	3323      	adds	r3, #35	; 0x23
 8000328:	220e      	movs	r2, #14
 800032a:	4619      	mov	r1, r3
 800032c:	4829      	ldr	r0, [pc, #164]	; (80003d4 <main+0x118>)
 800032e:	f002 ff80 	bl	8003232 <HAL_UART_Receive_IT>
	HAL_Delay(200);
 8000332:	20c8      	movs	r0, #200	; 0xc8
 8000334:	f001 f83a 	bl	80013ac <HAL_Delay>
	sendString("\n\rUart set as listener.", &huart2);
 8000338:	4926      	ldr	r1, [pc, #152]	; (80003d4 <main+0x118>)
 800033a:	482e      	ldr	r0, [pc, #184]	; (80003f4 <main+0x138>)
 800033c:	f000 ff06 	bl	800114c <sendString>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* Begin UART receive interrupt  */
		if (*uartGlobalFlagIT) {
 8000340:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <main+0x134>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <main+0x84>
			/* copy characters to temporary buffer */
			memcpy(testUartStruct->uartTemporaryBuffer, testUartStruct->uartRxBuffer, UART_READ_SIZE);
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	3323      	adds	r3, #35	; 0x23
 8000356:	220e      	movs	r2, #14
 8000358:	4619      	mov	r1, r3
 800035a:	f003 faef 	bl	800393c <memcpy>

			/* Main condition - data size */
			if (strlen(testUartStruct->uartTemporaryBuffer) >= MINIMUM_COMMAND_SIZE) {
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	333b      	adds	r3, #59	; 0x3b
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff fef2 	bl	800014c <strlen>
 8000368:	4603      	mov	r3, r0
 800036a:	2b08      	cmp	r3, #8
 800036c:	d916      	bls.n	800039c <main+0xe0>

				/* detect entrance to nRF and set prompt flag */
				if ((testUartStruct->uartPromptFlag) == 0) {
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	7a5b      	ldrb	r3, [r3, #9]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <main+0xc2>
					nrfModeEnter(testUartStruct);
 8000378:	6838      	ldr	r0, [r7, #0]
 800037a:	f000 fd65 	bl	8000e48 <nrfModeEnter>
				}

				/* If nrf mode available check and execute command */
				if ((testUartStruct->uartPromptFlag) == 1) {
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	7a5b      	ldrb	r3, [r3, #9]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10d      	bne.n	80003a4 <main+0xe8>
					/* Check command as exit command */
					if (!nrfModeExit(testUartStruct)) {
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	f000 fd77 	bl	8000e7c <nrfModeExit>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d107      	bne.n	80003a4 <main+0xe8>
						/* If not exit command - check as others commands */
						/* Detect command */
						nrfModeCommand(testUartStruct);
 8000394:	6838      	ldr	r0, [r7, #0]
 8000396:	f000 fd8b 	bl	8000eb0 <nrfModeCommand>
 800039a:	e003      	b.n	80003a4 <main+0xe8>
					}
				}
				/* End of positive part of condtion */
			} else {
				sendString("\r\n#nRF command invalid.", &huart2);	//log
 800039c:	490d      	ldr	r1, [pc, #52]	; (80003d4 <main+0x118>)
 800039e:	4816      	ldr	r0, [pc, #88]	; (80003f8 <main+0x13c>)
 80003a0:	f000 fed4 	bl	800114c <sendString>
			}

			/* Reset buffers */
			resetChar(testUartStruct->uartRxBuffer, UART_BUFFER_SIZE_RX);
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	3323      	adds	r3, #35	; 0x23
 80003a8:	2118      	movs	r1, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fee1 	bl	8001172 <resetChar>
			resetChar(testUartStruct->uartTemporaryBuffer, UART_BUFFER_SIZE_TMP);
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	333b      	adds	r3, #59	; 0x3b
 80003b4:	2118      	movs	r1, #24
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fedb 	bl	8001172 <resetChar>
			*uartGlobalFlagIT = 0; /* Reset flag */
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <main+0x134>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
			/* Start UART listening */
			HAL_UART_Receive_IT(&huart2, (uint8_t*) (testUartStruct->uartRxBuffer), UART_READ_SIZE);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	3323      	adds	r3, #35	; 0x23
 80003c8:	220e      	movs	r2, #14
 80003ca:	4619      	mov	r1, r3
 80003cc:	4801      	ldr	r0, [pc, #4]	; (80003d4 <main+0x118>)
 80003ce:	f002 ff30 	bl	8003232 <HAL_UART_Receive_IT>
		if (*uartGlobalFlagIT) {
 80003d2:	e7b5      	b.n	8000340 <main+0x84>
 80003d4:	20000358 	.word	0x20000358
 80003d8:	08003b40 	.word	0x08003b40
 80003dc:	20000318 	.word	0x20000318
 80003e0:	08003b5c 	.word	0x08003b5c
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	200002c0 	.word	0x200002c0
 80003f0:	20000228 	.word	0x20000228
 80003f4:	08003b74 	.word	0x08003b74
 80003f8:	08003b8c 	.word	0x08003b8c

080003fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	; 0x40
 8000400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 faa1 	bl	8003952 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000426:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800043e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f001 faeb 	bl	8001a20 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x58>
		Error_Handler();
 8000450:	f000 f82a 	bl	80004a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000454:	230f      	movs	r3, #15
 8000456:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000464:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2102      	movs	r1, #2
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fd56 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x82>
		Error_Handler();
 800047a:	f000 f815 	bl	80004a8 <Error_Handler>
	}
}
 800047e:	bf00      	nop
 8000480:	3740      	adds	r7, #64	; 0x40
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	*uartGlobalFlagIT = 1;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <HAL_UART_RxCpltCallback+0x1c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000228 	.word	0x20000228

080004a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <statusStrcut_Init>:
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    nrfStruct->statusStruct.dataReadIrq = 0;
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004c2:	f36f 0300 	bfc	r3, #0, #1
 80004c6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.dataSendIrq = 0;
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004d0:	f36f 0341 	bfc	r3, #1, #1
 80004d4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.maxRetr = 0;
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004de:	f36f 0382 	bfc	r3, #2, #1
 80004e2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004ec:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80004f0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.txFull = 0;
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004fa:	f36f 1386 	bfc	r3, #6, #1
 80004fe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

    nrfStruct->statusStruct.packetsLost = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    nrfStruct->statusStruct.packetsRetr = 0;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    /* Init settigns struct */
    nrfStruct->setStruct.rxMode = 0;                //set as receiver
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7813      	ldrb	r3, [r2, #0]
 8000528:	f36f 0300 	bfc	r3, #0, #1
 800052c:	7013      	strb	r3, [r2, #0]
    nrfStruct->setStruct.channel = 0x02;            //set channel np. 0
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2202      	movs	r2, #2
 8000532:	705a      	strb	r2, [r3, #1]
    nrfStruct->setStruct.dataRate = RF_DataRate_2M; //lowest data rate
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2201      	movs	r2, #1
 8000538:	709a      	strb	r2, [r3, #2]
    nrfStruct->setStruct.powerRF = RF_PWR_0dBm;     //-12dBm power
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2203      	movs	r2, #3
 800053e:	70da      	strb	r2, [r3, #3]

    nrfStruct->setStruct.ard = 0; //auto retr. delay 250us
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	711a      	strb	r2, [r3, #4]
    nrfStruct->setStruct.arc = 3; //auto retr. counter
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2203      	movs	r2, #3
 800054a:	715a      	strb	r2, [r3, #5]

    nrfStruct->setStruct.enableCRC = 1;
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7bd3      	ldrb	r3, [r2, #15]
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.codingCRC = 0;
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7bd3      	ldrb	r3, [r2, #15]
 800055a:	f36f 0341 	bfc	r3, #1, #1
 800055e:	73d3      	strb	r3, [r2, #15]

    nrfStruct->setStruct.enableTxIrq = 0;
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7bd3      	ldrb	r3, [r2, #15]
 8000564:	f36f 0382 	bfc	r3, #2, #1
 8000568:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableRxIrq = 0;
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7bd3      	ldrb	r3, [r2, #15]
 800056e:	f36f 03c3 	bfc	r3, #3, #1
 8000572:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableMaxRtIrq = 0;
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7bd3      	ldrb	r3, [r2, #15]
 8000578:	f36f 1304 	bfc	r3, #4, #1
 800057c:	73d3      	strb	r3, [r2, #15]

    /* Pipe Enable - defult pipe 0 enable only */
    nrfStruct->setStruct.pipeEn = DF_RXADDR;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2203      	movs	r2, #3
 8000582:	719a      	strb	r2, [r3, #6]
    nrfStruct->setStruct.pipeACK = DF_EN_AA;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	223f      	movs	r2, #63	; 0x3f
 8000588:	71da      	strb	r2, [r3, #7]
    nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	721a      	strb	r2, [r3, #8]

    /* Pipe RX Payload Lenght  */
    uint8_t i;
    for (i = 0; i < 6; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e007      	b.n	80005a6 <settingStruct_Init+0x8a>
    {
        nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	2200      	movs	r2, #0
 800059e:	725a      	strb	r2, [r3, #9]
    for (i = 0; i < 6; i++)
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	3301      	adds	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	d9f4      	bls.n	8000596 <settingStruct_Init+0x7a>
    }

    nrfStruct->setStruct.enableDPL = 0;
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7bd3      	ldrb	r3, [r2, #15]
 80005b0:	f36f 1345 	bfc	r3, #5, #1
 80005b4:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableAckPay = 0;
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7bd3      	ldrb	r3, [r2, #15]
 80005ba:	f36f 1386 	bfc	r3, #6, #1
 80005be:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableDynACK = 0; //enable NO_ACK command
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7bd3      	ldrb	r3, [r2, #15]
 80005c4:	f36f 13c7 	bfc	r3, #7, #1
 80005c8:	73d3      	strb	r3, [r2, #15]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    /* Init address struct */
    nrfStruct->addrStruct.addrWidth = longWidth;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2203      	movs	r2, #3
 80005e0:	741a      	strb	r2, [r3, #16]
    uint8_t i;
    for (i = 0; i < 5; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e007      	b.n	80005f8 <addressStruct_Init+0x24>
    {
        nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	22e7      	movs	r2, #231	; 0xe7
 80005f0:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < 5; i++)
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d9f4      	bls.n	80005e8 <addressStruct_Init+0x14>
    }
    for (i = 0; i < 5; ++i)
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e007      	b.n	8000614 <addressStruct_Init+0x40>
    {
        nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	22e7      	movs	r2, #231	; 0xe7
 800060c:	759a      	strb	r2, [r3, #22]
    for (i = 0; i < 5; ++i)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d9f4      	bls.n	8000604 <addressStruct_Init+0x30>
    }
    for (i = 0; i < 5; ++i)
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e007      	b.n	8000630 <addressStruct_Init+0x5c>
    {
        nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	22c2      	movs	r2, #194	; 0xc2
 8000628:	76da      	strb	r2, [r3, #27]
    for (i = 0; i < 5; ++i)
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	3301      	adds	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b04      	cmp	r3, #4
 8000634:	d9f4      	bls.n	8000620 <addressStruct_Init+0x4c>
    }
    nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	22c3      	movs	r2, #195	; 0xc3
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
    nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	22c4      	movs	r2, #196	; 0xc4
 8000642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	22c5      	movs	r2, #197	; 0xc5
 800064a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	22c6      	movs	r2, #198	; 0xc6
 8000652:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    /* Init fifo struct */
    nrfStruct->fifoStruct.txReUse = 0;
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800066e:	f36f 0300 	bfc	r3, #0, #1
 8000672:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.rxRead = 0;
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800067c:	f36f 0341 	bfc	r3, #1, #1
 8000680:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxFull = 0;
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800068a:	f36f 0382 	bfc	r3, #2, #1
 800068e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxEmpty = 1;
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.txSend = 0;
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006a6:	f36f 1304 	bfc	r3, #4, #1
 80006aa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txFull = 0;
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006b4:	f36f 1345 	bfc	r3, #5, #1
 80006b8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txEmpty = 1;
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
    /* Put pointer of SPI and TIM structures to nRF alias */
    nrfStruct->nRFspi = HAL_SPIx;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
    nrfStruct->nRFtim = HAL_TIMx;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Put GPIO port pointer and pin number to structure's alias */
    nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
    nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	8b3a      	ldrh	r2, [r7, #24]
 80006f8:	869a      	strh	r2, [r3, #52]	; 0x34
    nrfStruct->nRFportCE = HAL_GPIO_CE;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	69fa      	ldr	r2, [r7, #28]
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
    nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	8c3a      	ldrh	r2, [r7, #32]
 8000704:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0); //Set star value as 0
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 8000726:	bf00      	nop
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3f8      	bcc.n	8000728 <delayUs+0x18>
        ;
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000750:	2200      	movs	r2, #0
 8000752:	4619      	mov	r1, r3
 8000754:	f001 f92a 	bl	80019ac <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	f001 f91a 	bl	80019ac <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <readReg>:
}

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = R_REGISTER | addr;
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	73fb      	strb	r3, [r7, #15]
    uint8_t reg;
    uint8_t *pCmd = &cmd;
 8000790:	f107 030f 	add.w	r3, r7, #15
 8000794:	617b      	str	r3, [r7, #20]
    uint8_t *pReg = &reg;
 8000796:	f107 030e 	add.w	r3, r7, #14
 800079a:	613b      	str	r3, [r7, #16]

    csnLow(nrfStruct);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ffcf 	bl	8000740 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007a6:	230a      	movs	r3, #10
 80007a8:	2201      	movs	r2, #1
 80007aa:	6979      	ldr	r1, [r7, #20]
 80007ac:	f001 fdb5 	bl	800231a <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 80007b0:	2132      	movs	r1, #50	; 0x32
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ffac 	bl	8000710 <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007bc:	230a      	movs	r3, #10
 80007be:	2201      	movs	r2, #1
 80007c0:	6939      	ldr	r1, [r7, #16]
 80007c2:	f001 fede 	bl	8002582 <HAL_SPI_Receive>

    csnHigh(nrfStruct);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ffca 	bl	8000760 <csnHigh>
    return reg;
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	460b      	mov	r3, r1
 80007e0:	70fb      	strb	r3, [r7, #3]
 80007e2:	4613      	mov	r3, r2
 80007e4:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd = W_REGISTER | addr;
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	72fb      	strb	r3, [r7, #11]
    uint8_t *pCmd = &cmd;
 80007f0:	f107 030b 	add.w	r3, r7, #11
 80007f4:	60fb      	str	r3, [r7, #12]

    csnLow(nrfStruct);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa2 	bl	8000740 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000800:	230a      	movs	r3, #10
 8000802:	2201      	movs	r2, #1
 8000804:	68f9      	ldr	r1, [r7, #12]
 8000806:	f001 fd88 	bl	800231a <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 800080a:	2132      	movs	r1, #50	; 0x32
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff7f 	bl	8000710 <delayUs>
    HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000816:	1cb9      	adds	r1, r7, #2
 8000818:	230a      	movs	r3, #10
 800081a:	2201      	movs	r2, #1
 800081c:	f001 fd7d 	bl	800231a <HAL_SPI_Transmit>

    csnHigh(nrfStruct);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff9d 	bl	8000760 <csnHigh>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <writeRegExt>:
    csnHigh(nrfStruct);
}

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
                 size_t bufSize)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	460b      	mov	r3, r1
 800083c:	72fb      	strb	r3, [r7, #11]
    uint8_t cmd = W_REGISTER | addr;
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	b2db      	uxtb	r3, r3
 8000846:	74fb      	strb	r3, [r7, #19]
    uint8_t *pCmd = &cmd;
 8000848:	f107 0313 	add.w	r3, r7, #19
 800084c:	617b      	str	r3, [r7, #20]

    csnLow(nrfStruct);
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff ff76 	bl	8000740 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000858:	230a      	movs	r3, #10
 800085a:	2201      	movs	r2, #1
 800085c:	6979      	ldr	r1, [r7, #20]
 800085e:	f001 fd5c 	bl	800231a <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 8000862:	2132      	movs	r1, #50	; 0x32
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff ff53 	bl	8000710 <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	230a      	movs	r3, #10
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	f001 fe84 	bl	8002582 <HAL_SPI_Receive>
                    SPI_TIMEOUT);

    csnHigh(nrfStruct);
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff ff70 	bl	8000760 <csnHigh>
}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <pwrUp>:
    return reg;
}

/* Power control */
void pwrUp(nrfStruct_t *nrfStruct)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    uint8_t tmp = readReg(nrfStruct, CONFIG);
 8000890:	2100      	movs	r1, #0
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff74 	bl	8000780 <readReg>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << 1);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, CONFIG, tmp);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff93 	bl	80007d6 <writeReg>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <setBit>:
    tmp &= ~(1 << bit); //zmieniono OR na AND
    writeReg(nrfStruct, addr, tmp);
}

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
 80008c4:	4613      	mov	r3, r2
 80008c6:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = readReg(nrfStruct, addr);
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	4619      	mov	r1, r3
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff57 	bl	8000780 <readReg>
 80008d2:	4603      	mov	r3, r0
 80008d4:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << bit);
 80008d6:	78bb      	ldrb	r3, [r7, #2]
 80008d8:	2201      	movs	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	b25a      	sxtb	r2, r3
 80008e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, addr, tmp);
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	4619      	mov	r1, r3
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff70 	bl	80007d6 <writeReg>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <nRF_Init>:

/* Main init function */
nrfStruct_t *nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
                      GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
                      GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af04      	add	r7, sp, #16
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	807b      	strh	r3, [r7, #2]
    /* Create main nRF structure	 */
    static nrfStruct_t nRFMainStruct;
    static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

    /* Init settigns struct */
    statusStrcut_Init(pnRFMainStruct);
 800090e:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <nRF_Init+0x1b8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fdce 	bl	80004b4 <statusStrcut_Init>
    settingStruct_Init(pnRFMainStruct);
 8000918:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <nRF_Init+0x1b8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fdfd 	bl	800051c <settingStruct_Init>
    addressStruct_Init(pnRFMainStruct);
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <nRF_Init+0x1b8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe54 	bl	80005d4 <addressStruct_Init>
    fifoStruct_Init(pnRFMainStruct);
 800092c:	4b62      	ldr	r3, [pc, #392]	; (8000ab8 <nRF_Init+0x1b8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe95 	bl	8000660 <fifoStruct_Init>
    hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 8000936:	4b60      	ldr	r3, [pc, #384]	; (8000ab8 <nRF_Init+0x1b8>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	68f9      	ldr	r1, [r7, #12]
 800094c:	f7ff fec2 	bl	80006d4 <hardware_Init>
                  HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

    //	pwrDown(pnRFMainStruct);
    /* Turn on modul */
    pwrUp(pnRFMainStruct);
 8000950:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <nRF_Init+0x1b8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff97 	bl	8000888 <pwrUp>

    /* Set default settings */
    setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 800095a:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <nRF_Init+0x1b8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ffa8 	bl	80008b8 <setBit>
    writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 8000968:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <nRF_Init+0x1b8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4b52      	ldr	r3, [pc, #328]	; (8000ab8 <nRF_Init+0x1b8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	79db      	ldrb	r3, [r3, #7]
 8000972:	461a      	mov	r2, r3
 8000974:	2101      	movs	r1, #1
 8000976:	f7ff ff2e 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <nRF_Init+0x1b8>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	4b4e      	ldr	r3, [pc, #312]	; (8000ab8 <nRF_Init+0x1b8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	799b      	ldrb	r3, [r3, #6]
 8000984:	461a      	mov	r2, r3
 8000986:	2102      	movs	r1, #2
 8000988:	f7ff ff25 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 800098c:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <nRF_Init+0x1b8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	2103      	movs	r1, #3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff1e 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <nRF_Init+0x1b8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2203      	movs	r2, #3
 80009a0:	2104      	movs	r1, #4
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff17 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 80009a8:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <nRF_Init+0x1b8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2202      	movs	r2, #2
 80009ae:	2105      	movs	r1, #5
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff10 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <nRF_Init+0x1b8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	220e      	movs	r2, #14
 80009bc:	2106      	movs	r1, #6
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff09 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <nRF_Init+0x1b8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	220e      	movs	r2, #14
 80009ca:	2107      	movs	r1, #7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff02 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <nRF_Init+0x1b8>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <nRF_Init+0x1b8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	7a1b      	ldrb	r3, [r3, #8]
 80009dc:	461a      	mov	r2, r3
 80009de:	211c      	movs	r1, #28
 80009e0:	f7ff fef9 	bl	80007d6 <writeReg>

    uint8_t i;
    for (i = 0; i < 6; i++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	75fb      	strb	r3, [r7, #23]
 80009e8:	e00f      	b.n	8000a0a <nRF_Init+0x10a>
    {
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <nRF_Init+0x1b8>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	3311      	adds	r3, #17
 80009f2:	b2d9      	uxtb	r1, r3
                 (pnRFMainStruct->setStruct.pipePayLen[i]));
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <nRF_Init+0x1b8>)
 80009f6:	681a      	ldr	r2, [r3, #0]
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	4413      	add	r3, r2
 80009fc:	7a5b      	ldrb	r3, [r3, #9]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f7ff fee9 	bl	80007d6 <writeReg>
    for (i = 0; i < 6; i++)
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	3301      	adds	r3, #1
 8000a08:	75fb      	strb	r3, [r7, #23]
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	2b05      	cmp	r3, #5
 8000a0e:	d9ec      	bls.n	80009ea <nRF_Init+0xea>
    }
    writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2200      	movs	r2, #0
 8000a16:	211d      	movs	r1, #29
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fedc 	bl	80007d6 <writeReg>

    /* Set default address */
    writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f103 0211 	add.w	r2, r3, #17
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	f7ff fefe 	bl	800082e <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.txAddr));
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a34:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr0),
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f103 0216 	add.w	r2, r3, #22
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a3e:	2305      	movs	r3, #5
 8000a40:	210a      	movs	r1, #10
 8000a42:	f7ff fef4 	bl	800082e <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr0));
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a48:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr1),
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f103 021b 	add.w	r2, r3, #27
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a52:	2305      	movs	r3, #5
 8000a54:	210b      	movs	r1, #11
 8000a56:	f7ff feea 	bl	800082e <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr1));
    writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a66:	461a      	mov	r2, r3
 8000a68:	210c      	movs	r1, #12
 8000a6a:	f7ff feb4 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	210d      	movs	r1, #13
 8000a7e:	f7ff feaa 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000a8e:	461a      	mov	r2, r3
 8000a90:	210e      	movs	r1, #14
 8000a92:	f7ff fea0 	bl	80007d6 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <nRF_Init+0x1b8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f7ff fe96 	bl	80007d6 <writeReg>

    return pnRFMainStruct;
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <nRF_Init+0x1b8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000

08000abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2218      	movs	r2, #24
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f001 fba3 	bl	8002258 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f7ff fcc6 	bl	80004a8 <Error_Handler>
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200002c0 	.word	0x200002c0
 8000b24:	40013000 	.word	0x40013000

08000b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d12f      	bne.n	8000ba8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b8c:	f000 fdb4 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000ba4:	f000 fda8 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010800 	.word	0x40010800

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x5c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_MspInit+0x60>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_MspInit+0x60>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <HardFault_Handler+0x4>

08000c32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <BusFault_Handler+0x4>

08000c3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <UsageFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 fb82 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f002 fb2f 	bl	80032dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000358 	.word	0x20000358

08000c88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c90:	f000 fea4 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <SystemInit+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <SystemInit+0x5c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SystemInit+0x5c>)
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4911      	ldr	r1, [pc, #68]	; (8000cf4 <SystemInit+0x5c>)
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <SystemInit+0x60>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <SystemInit+0x5c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <SystemInit+0x5c>)
 8000cba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <SystemInit+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SystemInit+0x5c>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <SystemInit+0x5c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <SystemInit+0x5c>)
 8000cd6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cda:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SystemInit+0x5c>)
 8000cde:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ce2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SystemInit+0x64>)
 8000ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cea:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	f8ff0000 	.word	0xf8ff0000
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d1e:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <MX_TIM1_Init+0x9c>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d24:	2247      	movs	r2, #71	; 0x47
 8000d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d48:	4813      	ldr	r0, [pc, #76]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d4a:	f001 ff9f 	bl	8002c8c <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d54:	f7ff fba8 	bl	80004a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d66:	f001 ffdf 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d70:	f7ff fb9a 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_TIM1_Init+0x98>)
 8000d82:	f002 f981 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d8c:	f7ff fb8c 	bl	80004a8 <Error_Handler>
  }

}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000318 	.word	0x20000318
 8000d9c:	40012c00 	.word	0x40012c00

08000da0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x34>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40021000 	.word	0x40021000

08000ddc <nRF_UartInit>:
		nrfPowerTx0dBm, nrfPowerTx6dBm, nrfPowerTx12dBm, nrfPowerTx18dBm,
		nrfDataRate250kbps, nrfDataRate1Mbps, nrfDataRate2Mbps, nrfChannel };

/* Create struct */
nRF_UartStruct_t* nRF_UartInit(nrfStruct_t *nrfStruct,
		UART_HandleTypeDef *huart) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]

	/* Creat struct */
	static nRF_UartStruct_t nrfUartStruct;
	static nRF_UartStruct_t *pnrfUartStruct = &nrfUartStruct;

	pnrfUartStruct->nrfStruct = nrfStruct;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <nRF_UartInit+0x68>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
	pnrfUartStruct->nrfUartStruct = huart;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <nRF_UartInit+0x68>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	605a      	str	r2, [r3, #4]

	pnrfUartStruct->uartIrqFlag = 0;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <nRF_UartInit+0x68>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	721a      	strb	r2, [r3, #8]
	pnrfUartStruct->uartPromptFlag = 0;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <nRF_UartInit+0x68>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	725a      	strb	r2, [r3, #9]
	pnrfUartStruct->uartNrfChannel = 0;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <nRF_UartInit+0x68>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	729a      	strb	r2, [r3, #10]

	resetChar(pnrfUartStruct->uartTxBuffer, UART_BUFFER_SIZE_TX);
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <nRF_UartInit+0x68>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	330b      	adds	r3, #11
 8000e14:	2118      	movs	r1, #24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f9ab 	bl	8001172 <resetChar>
	resetChar(pnrfUartStruct->uartRxBuffer, UART_BUFFER_SIZE_RX);
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <nRF_UartInit+0x68>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3323      	adds	r3, #35	; 0x23
 8000e22:	2118      	movs	r1, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f9a4 	bl	8001172 <resetChar>
	resetChar(pnrfUartStruct->uartTemporaryBuffer, UART_BUFFER_SIZE_TMP);
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <nRF_UartInit+0x68>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	333b      	adds	r3, #59	; 0x3b
 8000e30:	2118      	movs	r1, #24
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f99d 	bl	8001172 <resetChar>

	return pnrfUartStruct;
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <nRF_UartInit+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000030 	.word	0x20000030

08000e48 <nrfModeEnter>:

/* Enter to nRF mode */
uint8_t nrfModeEnter(nRF_UartStruct_t *nRF_UartStruct) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if (strstr(nRF_UartStruct->uartTemporaryBuffer, nrfEnter) != NULL) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	333b      	adds	r3, #59	; 0x3b
 8000e54:	4908      	ldr	r1, [pc, #32]	; (8000e78 <nrfModeEnter+0x30>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fd98 	bl	800398c <strstr>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <nrfModeEnter+0x24>
		nRF_UartStruct->uartPromptFlag = 1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	725a      	strb	r2, [r3, #9]
		/*
		sendString(nrfPrompt, &huart2);
		HAL_Delay(10);
		sendString("\n\rnRF24L01 access available\n", &huart2);
		 */
		return 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <nrfModeEnter+0x26>
	}
	return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08003d8c 	.word	0x08003d8c

08000e7c <nrfModeExit>:

/* Exit nRF mode */
uint8_t nrfModeExit(nRF_UartStruct_t *nRF_UartStruct) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	if (strstr(nRF_UartStruct->uartTemporaryBuffer, nrfExit) != NULL) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	333b      	adds	r3, #59	; 0x3b
 8000e88:	4908      	ldr	r1, [pc, #32]	; (8000eac <nrfModeExit+0x30>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fd7e 	bl	800398c <strstr>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d004      	beq.n	8000ea0 <nrfModeExit+0x24>
		nRF_UartStruct->uartPromptFlag = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	725a      	strb	r2, [r3, #9]
		/*
		sendString(nrfPrompt, &huart2);
		HAL_Delay(10);
		sendString("nRF24L01 access not available\n", &huart2);
		 */
		return 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <nrfModeExit+0x26>
	}
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08003d98 	.word	0x08003d98

08000eb0 <nrfModeCommand>:

/* Detect and execute commands (others than Exit and Enter) */
uint8_t nrfModeCommand(nRF_UartStruct_t *nRF_UartStruct) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	/* Find command */
	int8_t commandNumber = detectCommand(nRF_UartStruct,
			nRF_UartStruct->uartTemporaryBuffer);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	333b      	adds	r3, #59	; 0x3b
	int8_t commandNumber = detectCommand(nRF_UartStruct,
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f812 	bl	8000ee8 <detectCommand>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
	/* Execute command */
	if (commandNumber > 0) {
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dd06      	ble.n	8000ede <nrfModeCommand+0x2e>
		executeCommand(nRF_UartStruct, commandNumber);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f883 	bl	8000fe0 <executeCommand>
		return 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <nrfModeCommand+0x30>
	}
	return -1;
 8000ede:	23ff      	movs	r3, #255	; 0xff
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <detectCommand>:


/* Functions's bodies */
int8_t detectCommand(nRF_UartStruct_t *nRF_UartStruct, const char *str) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	if (strlen(str) < MINIMUM_COMMAND_SIZE) //Check min size of command
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f7ff f92a 	bl	800014c <strlen>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d802      	bhi.n	8000f04 <detectCommand+0x1c>
		return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e026      	b.n	8000f52 <detectCommand+0x6a>
	/* Check command */
	uint8_t i;
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e01e      	b.n	8000f48 <detectCommand+0x60>
		if (strstr(str, nrfCommandTable[i]) != NULL) {
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <detectCommand+0x74>)
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f002 fd39 	bl	800398c <strstr>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d010      	beq.n	8000f42 <detectCommand+0x5a>
			/* If it's change channel command read channel number */
			if (i == 8) {
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d10a      	bne.n	8000f3c <detectCommand+0x54>
				/* Wrong channel's number */
				if (detectChannel(nRF_UartStruct, str) == -1)
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f819 	bl	8000f60 <detectChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d102      	bne.n	8000f3c <detectCommand+0x54>
					return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e00a      	b.n	8000f52 <detectCommand+0x6a>
			}
			return i;
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	e007      	b.n	8000f52 <detectCommand+0x6a>
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	3301      	adds	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	d9dd      	bls.n	8000f0a <detectCommand+0x22>
		}
	}
	return -1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <detectChannel>:

int8_t detectChannel(nRF_UartStruct_t *nRF_UartStruct, const char *str) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	if (strlen(str) < 9) {
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f7ff f8ee 	bl	800014c <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d802      	bhi.n	8000f7c <detectChannel+0x1c>
		return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e02a      	b.n	8000fd2 <detectChannel+0x72>
	}
	/* Find position of command in string */
	char chNum[4];
	/* strlen(nrfCommandTable[9])is offset of command  "#nrf-ch-" ,  necessary to find number of channel */
	strncpy(chNum,
			(strstr(str, nrfCommandTable[9]) + strlen(nrfCommandTable[9])), 3);
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <detectChannel+0x7c>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	6838      	ldr	r0, [r7, #0]
 8000f84:	f002 fd02 	bl	800398c <strstr>
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <detectChannel+0x7c>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f8dc 	bl	800014c <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	18e1      	adds	r1, r4, r3
	strncpy(chNum,
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fcdf 	bl	8003962 <strncpy>
	int8_t channel = atoi(chNum);	//conversion string channel number to u_int
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fc9f 	bl	80038ec <atoi>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

	/* Check channel number*/
	if (channel > 125 || channel < 0) {
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b7d      	cmp	r3, #125	; 0x7d
 8000fb8:	dc03      	bgt.n	8000fc2 <detectChannel+0x62>
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da02      	bge.n	8000fc8 <detectChannel+0x68>
		return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e004      	b.n	8000fd2 <detectChannel+0x72>
	}
	/* Write channel number to structure */
	nRF_UartStruct->uartNrfChannel = channel;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	729a      	strb	r2, [r3, #10]

	return channel;
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <executeCommand>:

int8_t executeCommand(nRF_UartStruct_t *nRF_UartStruct, uint8_t cmdNum) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	switch (cmdNum) {
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	f200 8086 	bhi.w	8001100 <executeCommand+0x120>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <executeCommand+0x1c>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	08001025 	.word	0x08001025
 8001000:	0800103b 	.word	0x0800103b
 8001004:	08001051 	.word	0x08001051
 8001008:	08001067 	.word	0x08001067
 800100c:	0800107d 	.word	0x0800107d
 8001010:	08001093 	.word	0x08001093
 8001014:	080010a9 	.word	0x080010a9
 8001018:	080010bf 	.word	0x080010bf
 800101c:	080010d5 	.word	0x080010d5
 8001020:	080010eb 	.word	0x080010eb
	case 0:
		/* Execute Power Up */
//		pwrUp(nrfStruct);
		sendString("\n\rExecuted 1st command.", nRF_UartStruct->nrfUartStruct);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4619      	mov	r1, r3
 800102a:	483d      	ldr	r0, [pc, #244]	; (8001120 <executeCommand+0x140>)
 800102c:	f000 f88e 	bl	800114c <sendString>
		HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	; 0x32
 8001032:	f000 f9bb 	bl	80013ac <HAL_Delay>
		return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e06d      	b.n	8001116 <executeCommand+0x136>
		break;
	case 1:
//		pwrDown(nrfStruct);
		sendString("\n\rExecuted 2nd command.", nRF_UartStruct->nrfUartStruct);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4619      	mov	r1, r3
 8001040:	4838      	ldr	r0, [pc, #224]	; (8001124 <executeCommand+0x144>)
 8001042:	f000 f883 	bl	800114c <sendString>
		HAL_Delay(50);
 8001046:	2032      	movs	r0, #50	; 0x32
 8001048:	f000 f9b0 	bl	80013ac <HAL_Delay>
		return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e062      	b.n	8001116 <executeCommand+0x136>
		break;
	case 2:
		sendString("\n\rExecuted 3rd command.", nRF_UartStruct->nrfUartStruct);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4619      	mov	r1, r3
 8001056:	4834      	ldr	r0, [pc, #208]	; (8001128 <executeCommand+0x148>)
 8001058:	f000 f878 	bl	800114c <sendString>
		HAL_Delay(50);
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f000 f9a5 	bl	80013ac <HAL_Delay>
		return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e057      	b.n	8001116 <executeCommand+0x136>
		break;
	case 3:
		sendString("\n\rExecuted 4th command.", nRF_UartStruct->nrfUartStruct);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4619      	mov	r1, r3
 800106c:	482f      	ldr	r0, [pc, #188]	; (800112c <executeCommand+0x14c>)
 800106e:	f000 f86d 	bl	800114c <sendString>
		HAL_Delay(50);
 8001072:	2032      	movs	r0, #50	; 0x32
 8001074:	f000 f99a 	bl	80013ac <HAL_Delay>
		return 1;
 8001078:	2301      	movs	r3, #1
 800107a:	e04c      	b.n	8001116 <executeCommand+0x136>
		break;
	case 4:
		sendString("\n\rExecuted 5th command.", nRF_UartStruct->nrfUartStruct);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4619      	mov	r1, r3
 8001082:	482b      	ldr	r0, [pc, #172]	; (8001130 <executeCommand+0x150>)
 8001084:	f000 f862 	bl	800114c <sendString>
		HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f000 f98f 	bl	80013ac <HAL_Delay>
		return 1;
 800108e:	2301      	movs	r3, #1
 8001090:	e041      	b.n	8001116 <executeCommand+0x136>
		break;
	case 5:
		sendString("\n\rExecuted 6th command.", nRF_UartStruct->nrfUartStruct);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4619      	mov	r1, r3
 8001098:	4826      	ldr	r0, [pc, #152]	; (8001134 <executeCommand+0x154>)
 800109a:	f000 f857 	bl	800114c <sendString>
		HAL_Delay(50);
 800109e:	2032      	movs	r0, #50	; 0x32
 80010a0:	f000 f984 	bl	80013ac <HAL_Delay>
		return 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e036      	b.n	8001116 <executeCommand+0x136>
		break;
	case 6:
		sendString("\n\rExecuted 7th command.", nRF_UartStruct->nrfUartStruct);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4822      	ldr	r0, [pc, #136]	; (8001138 <executeCommand+0x158>)
 80010b0:	f000 f84c 	bl	800114c <sendString>
		HAL_Delay(50);
 80010b4:	2032      	movs	r0, #50	; 0x32
 80010b6:	f000 f979 	bl	80013ac <HAL_Delay>
		return 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e02b      	b.n	8001116 <executeCommand+0x136>
		break;
	case 7:
		sendString("\n\rExecuted 8th command.", nRF_UartStruct->nrfUartStruct);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4619      	mov	r1, r3
 80010c4:	481d      	ldr	r0, [pc, #116]	; (800113c <executeCommand+0x15c>)
 80010c6:	f000 f841 	bl	800114c <sendString>
		HAL_Delay(50);
 80010ca:	2032      	movs	r0, #50	; 0x32
 80010cc:	f000 f96e 	bl	80013ac <HAL_Delay>
		return 1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e020      	b.n	8001116 <executeCommand+0x136>
		break;
	case 8:
		sendString("\n\rExecuted 9th command.", nRF_UartStruct->nrfUartStruct);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4619      	mov	r1, r3
 80010da:	4819      	ldr	r0, [pc, #100]	; (8001140 <executeCommand+0x160>)
 80010dc:	f000 f836 	bl	800114c <sendString>
		HAL_Delay(50);
 80010e0:	2032      	movs	r0, #50	; 0x32
 80010e2:	f000 f963 	bl	80013ac <HAL_Delay>
		return 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e015      	b.n	8001116 <executeCommand+0x136>
		break;
	case 9:
		sendString("\n\rExecuted change of RF channel.", nRF_UartStruct->nrfUartStruct);	//log
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <executeCommand+0x164>)
 80010f2:	f000 f82b 	bl	800114c <sendString>
		HAL_Delay(50);
 80010f6:	2032      	movs	r0, #50	; 0x32
 80010f8:	f000 f958 	bl	80013ac <HAL_Delay>
		return 9;
 80010fc:	2309      	movs	r3, #9
 80010fe:	e00a      	b.n	8001116 <executeCommand+0x136>
		break;
	default:
		sendString("\n\rInvalid command.", nRF_UartStruct->nrfUartStruct);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4619      	mov	r1, r3
 8001106:	4810      	ldr	r0, [pc, #64]	; (8001148 <executeCommand+0x168>)
 8001108:	f000 f820 	bl	800114c <sendString>
		HAL_Delay(50);
 800110c:	2032      	movs	r0, #50	; 0x32
 800110e:	f000 f94d 	bl	80013ac <HAL_Delay>
		return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
		break;
	}

	return 0;
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	08003ba4 	.word	0x08003ba4
 8001124:	08003bbc 	.word	0x08003bbc
 8001128:	08003bd4 	.word	0x08003bd4
 800112c:	08003bec 	.word	0x08003bec
 8001130:	08003c04 	.word	0x08003c04
 8001134:	08003c1c 	.word	0x08003c1c
 8001138:	08003c34 	.word	0x08003c34
 800113c:	08003c4c 	.word	0x08003c4c
 8001140:	08003c64 	.word	0x08003c64
 8001144:	08003c7c 	.word	0x08003c7c
 8001148:	08003ca0 	.word	0x08003ca0

0800114c <sendString>:
		sendShortInteger(buffer[i], huart);
	}
	return 1;
}

void sendString(const char *str, UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t*) str, strlen(str));
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7fe fff8 	bl	800014c <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f002 f820 	bl	80031aa <HAL_UART_Transmit_IT>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <resetChar>:
	char data[16];
	size_t dataSize = sprintf(data, "%s%ld.%ld", sign, tmpInt, tmpInt2);
	HAL_UART_Transmit_IT(huart, (uint8_t*) data, dataSize);
}

uint8_t resetChar(char *buf, size_t bufSize) {
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	if (bufSize <= 0 || bufSize > 256)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <resetChar+0x18>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001188:	d901      	bls.n	800118e <resetChar+0x1c>
		return 0;
 800118a:	2300      	movs	r3, #0
 800118c:	e010      	b.n	80011b0 <resetChar+0x3e>
	else {
		uint8_t i;
		for (i = 0; i < (bufSize - 1); i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	e007      	b.n	80011a4 <resetChar+0x32>
			buf[i] = 0x00;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (bufSize - 1); i++) {
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	3301      	adds	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3f2      	bcc.n	8001194 <resetChar+0x22>
		}
		return 1;
 80011ae:	2301      	movs	r3, #1
	}
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_USART2_UART_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f001 ff8c 	bl	8003110 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fe:	f7ff f953 	bl	80004a8 <Error_Handler>
  }

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000358 	.word	0x20000358
 800120c:	40004400 	.word	0x40004400

08001210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_UART_MspInit+0x80>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d12b      	bne.n	8001288 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x84>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x84>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123a:	61d3      	str	r3, [r2, #28]
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x84>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x84>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_UART_MspInit+0x84>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_UART_MspInit+0x84>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001260:	230c      	movs	r3, #12
 8001262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001274:	f000 fa40 	bl	80016f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2026      	movs	r0, #38	; 0x26
 800127e:	f000 f98e 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001282:	2026      	movs	r0, #38	; 0x26
 8001284:	f000 f9a7 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004400 	.word	0x40004400
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800129c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800129e:	e003      	b.n	80012a8 <LoopCopyDataInit>

080012a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012a6:	3104      	adds	r1, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012a8:	480a      	ldr	r0, [pc, #40]	; (80012d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012b0:	d3f6      	bcc.n	80012a0 <CopyDataInit>
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012b4:	e002      	b.n	80012bc <LoopFillZerobss>

080012b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012b8:	f842 3b04 	str.w	r3, [r2], #4

080012bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012c0:	d3f9      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c2:	f7ff fce9 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f002 fb15 	bl	80038f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7fe fff7 	bl	80002bc <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r3, =_sidata
 80012d0:	08003eb8 	.word	0x08003eb8
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012d8:	2000020c 	.word	0x2000020c
  ldr r2, =_sbss
 80012dc:	2000020c 	.word	0x2000020c
  ldr r3, = _ebss
 80012e0:	2000039c 	.word	0x2000039c

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f945 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fc5a 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f95d 	bl	80015f2 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f925 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000004 	.word	0x20000004
 800136c:	20000038 	.word	0x20000038
 8001370:	20000034 	.word	0x20000034

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x20>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000038 	.word	0x20000038
 8001394:	20000398 	.word	0x20000398

08001398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000398 	.word	0x20000398

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fff0 	bl	8001398 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_Delay+0x40>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffe0 	bl	8001398 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000038 	.word	0x20000038

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4906      	ldr	r1, [pc, #24]	; (8001488 <__NVIC_EnableIRQ+0x34>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff90 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff2d 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff42 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff35 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800161e:	2b02      	cmp	r3, #2
 8001620:	d005      	beq.n	800162e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e051      	b.n	80016d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 020e 	bic.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_DMA_Abort_IT+0xd0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d029      	beq.n	80016ac <HAL_DMA_Abort_IT+0xa0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_DMA_Abort_IT+0xd4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d022      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x9c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_DMA_Abort_IT+0xd8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d01a      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x96>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_DMA_Abort_IT+0xdc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d012      	beq.n	800169c <HAL_DMA_Abort_IT+0x90>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_DMA_Abort_IT+0xe0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00a      	beq.n	8001696 <HAL_DMA_Abort_IT+0x8a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_DMA_Abort_IT+0xe4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d102      	bne.n	8001690 <HAL_DMA_Abort_IT+0x84>
 800168a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800168e:	e00e      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 8001690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001694:	e00b      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	e008      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	e005      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	e002      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016a8:	2310      	movs	r3, #16
 80016aa:	e000      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016ac:	2301      	movs	r3, #1
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_DMA_Abort_IT+0xe8>)
 80016b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    } 
  }
  return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020008 	.word	0x40020008
 80016e0:	4002001c 	.word	0x4002001c
 80016e4:	40020030 	.word	0x40020030
 80016e8:	40020044 	.word	0x40020044
 80016ec:	40020058 	.word	0x40020058
 80016f0:	4002006c 	.word	0x4002006c
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e127      	b.n	800195c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800170c:	2201      	movs	r2, #1
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8116 	bne.w	8001956 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b12      	cmp	r3, #18
 8001730:	d034      	beq.n	800179c <HAL_GPIO_Init+0xa4>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d80d      	bhi.n	8001752 <HAL_GPIO_Init+0x5a>
 8001736:	2b02      	cmp	r3, #2
 8001738:	d02b      	beq.n	8001792 <HAL_GPIO_Init+0x9a>
 800173a:	2b02      	cmp	r3, #2
 800173c:	d804      	bhi.n	8001748 <HAL_GPIO_Init+0x50>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d031      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
 8001742:	2b01      	cmp	r3, #1
 8001744:	d01c      	beq.n	8001780 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e048      	b.n	80017da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001748:	2b03      	cmp	r3, #3
 800174a:	d043      	beq.n	80017d4 <HAL_GPIO_Init+0xdc>
 800174c:	2b11      	cmp	r3, #17
 800174e:	d01b      	beq.n	8001788 <HAL_GPIO_Init+0x90>
          break;
 8001750:	e043      	b.n	80017da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001752:	4a89      	ldr	r2, [pc, #548]	; (8001978 <HAL_GPIO_Init+0x280>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d026      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
 8001758:	4a87      	ldr	r2, [pc, #540]	; (8001978 <HAL_GPIO_Init+0x280>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d806      	bhi.n	800176c <HAL_GPIO_Init+0x74>
 800175e:	4a87      	ldr	r2, [pc, #540]	; (800197c <HAL_GPIO_Init+0x284>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d020      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
 8001764:	4a86      	ldr	r2, [pc, #536]	; (8001980 <HAL_GPIO_Init+0x288>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01d      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
          break;
 800176a:	e036      	b.n	80017da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800176c:	4a85      	ldr	r2, [pc, #532]	; (8001984 <HAL_GPIO_Init+0x28c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
 8001772:	4a85      	ldr	r2, [pc, #532]	; (8001988 <HAL_GPIO_Init+0x290>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d016      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
 8001778:	4a84      	ldr	r2, [pc, #528]	; (800198c <HAL_GPIO_Init+0x294>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0xae>
          break;
 800177e:	e02c      	b.n	80017da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e028      	b.n	80017da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	3304      	adds	r3, #4
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e023      	b.n	80017da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	3308      	adds	r3, #8
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e01e      	b.n	80017da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	330c      	adds	r3, #12
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e019      	b.n	80017da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ae:	2304      	movs	r3, #4
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e012      	b.n	80017da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017bc:	2308      	movs	r3, #8
 80017be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	611a      	str	r2, [r3, #16]
          break;
 80017c6:	e008      	b.n	80017da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	615a      	str	r2, [r3, #20]
          break;
 80017d2:	e002      	b.n	80017da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2bff      	cmp	r3, #255	; 0xff
 80017de:	d801      	bhi.n	80017e4 <HAL_GPIO_Init+0xec>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	e001      	b.n	80017e8 <HAL_GPIO_Init+0xf0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3304      	adds	r3, #4
 80017e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2bff      	cmp	r3, #255	; 0xff
 80017ee:	d802      	bhi.n	80017f6 <HAL_GPIO_Init+0xfe>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x104>
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	3b08      	subs	r3, #8
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	210f      	movs	r1, #15
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	401a      	ands	r2, r3
 800180e:	6a39      	ldr	r1, [r7, #32]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8096 	beq.w	8001956 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800182a:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_GPIO_Init+0x298>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_GPIO_Init+0x298>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6193      	str	r3, [r2, #24]
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_GPIO_Init+0x298>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001842:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_GPIO_Init+0x29c>)
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x19e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x19a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x196>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x192>
 8001886:	2303      	movs	r3, #3
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x1a0>
 800188a:	2304      	movs	r3, #4
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x1a0>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x1a0>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x1a0>
 8001896:	2300      	movs	r3, #0
 8001898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a8:	493a      	ldr	r1, [pc, #232]	; (8001994 <HAL_GPIO_Init+0x29c>)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4938      	ldr	r1, [pc, #224]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4933      	ldr	r1, [pc, #204]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	492e      	ldr	r1, [pc, #184]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
 80018f6:	e006      	b.n	8001906 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	43db      	mvns	r3, r3
 8001900:	4929      	ldr	r1, [pc, #164]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001902:	4013      	ands	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	4924      	ldr	r1, [pc, #144]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	43db      	mvns	r3, r3
 8001928:	491f      	ldr	r1, [pc, #124]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 800192a:	4013      	ands	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	491a      	ldr	r1, [pc, #104]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	60cb      	str	r3, [r1, #12]
 8001946:	e006      	b.n	8001956 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4915      	ldr	r1, [pc, #84]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001952:	4013      	ands	r3, r2
 8001954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f aed0 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	372c      	adds	r7, #44	; 0x2c
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	10210000 	.word	0x10210000
 800197c:	10110000 	.word	0x10110000
 8001980:	10120000 	.word	0x10120000
 8001984:	10310000 	.word	0x10310000
 8001988:	10320000 	.word	0x10320000
 800198c:	10220000 	.word	0x10220000
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	40010800 	.word	0x40010800
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40011400 	.word	0x40011400
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f806 	bl	8001a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e26c      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4c:	4b8f      	ldr	r3, [pc, #572]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
 8001a58:	4b8c      	ldr	r3, [pc, #560]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x12c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d168      	bne.n	8001b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e246      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x76>
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a7f      	ldr	r2, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e02e      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a77      	ldr	r2, [pc, #476]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xbc>
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a71      	ldr	r2, [pc, #452]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a67      	ldr	r2, [pc, #412]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fc4c 	bl	8001398 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fc48 	bl	8001398 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1fa      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe4>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fc38 	bl	8001398 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fc34 	bl	8001398 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1e6      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x10c>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1ba      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4939      	ldr	r1, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fbed 	bl	8001398 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fbe9 	bl	8001398 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e19b      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4927      	ldr	r1, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fbcc 	bl	8001398 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fbc8 	bl	8001398 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e17a      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03a      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d019      	beq.n	8001c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fbac 	bl	8001398 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fba8 	bl	8001398 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e15a      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 fada 	bl	800221c <RCC_Delay>
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff fb92 	bl	8001398 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fb8e 	bl	8001398 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e140      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	42420000 	.word	0x42420000
 8001c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e9      	bne.n	8001c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a6 	beq.w	8001dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a93      	ldr	r2, [pc, #588]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b91      	ldr	r3, [pc, #580]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b8e      	ldr	r3, [pc, #568]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a8a      	ldr	r2, [pc, #552]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fb4f 	bl	8001398 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff fb4b 	bl	8001398 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0fd      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b81      	ldr	r3, [pc, #516]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x312>
 8001d24:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d3a:	4b76      	ldr	r3, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a75      	ldr	r2, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a72      	ldr	r2, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	e01c      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x356>
 8001d5c:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a69      	ldr	r2, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a66      	ldr	r2, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a63      	ldr	r2, [pc, #396]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff faff 	bl	8001398 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fafb 	bl	8001398 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0ab      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <HAL_RCC_OscConfig+0x37e>
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fae9 	bl	8001398 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fae5 	bl	8001398 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e095      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8081 	beq.w	8001f0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d061      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d146      	bne.n	8001eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x4fc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fab9 	bl	8001398 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fab5 	bl	8001398 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e067      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e52:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	492d      	ldr	r1, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a19      	ldr	r1, [r3, #32]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	430b      	orrs	r3, r1
 8001e76:	4927      	ldr	r1, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x4fc>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fa89 	bl	8001398 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff fa85 	bl	8001398 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e037      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46a>
 8001ea8:	e02f      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_RCC_OscConfig+0x4fc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fa72 	bl	8001398 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff fa6e 	bl	8001398 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e020      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x498>
 8001ed6:	e018      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42420060 	.word	0x42420060

08001f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0d0      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4965      	ldr	r1, [pc, #404]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d040      	beq.n	8002040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e073      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06b      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4936      	ldr	r1, [pc, #216]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002010:	f7ff f9c2 	bl	8001398 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff f9be 	bl	8001398 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e053      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d210      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	fa21 f303 	lsr.w	r3, r1, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1cc>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1d0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f920 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08003cec 	.word	0x08003cec
 80020ec:	20000004 	.word	0x20000004
 80020f0:	20000034 	.word	0x20000034

080020f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b490      	push	{r4, r7}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020fc:	1d3c      	adds	r4, r7, #4
 80020fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002104:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x40>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x46>
 8002132:	e02d      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002136:	623b      	str	r3, [r7, #32]
      break;
 8002138:	e02d      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800214c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	0c5b      	lsrs	r3, r3, #17
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002166:	4413      	add	r3, r2
 8002168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800216c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002172:	fb02 f203 	mul.w	r2, r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e004      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	623b      	str	r3, [r7, #32]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	6a3b      	ldr	r3, [r7, #32]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc90      	pop	{r4, r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	08003cd8 	.word	0x08003cd8
 80021a8:	08003ce8 	.word	0x08003ce8
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	003d0900 	.word	0x003d0900

080021b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021d0:	f7ff fff2 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 80021d4:	4601      	mov	r1, r0
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08003cfc 	.word	0x08003cfc

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 80021fc:	4601      	mov	r1, r0
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0adb      	lsrs	r3, r3, #11
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4a03      	ldr	r2, [pc, #12]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	08003cfc 	.word	0x08003cfc

0800221c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <RCC_Delay+0x34>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <RCC_Delay+0x38>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0a5b      	lsrs	r3, r3, #9
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002238:	bf00      	nop
  }
  while (Delay --);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	60fa      	str	r2, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <RCC_Delay+0x1c>
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000004 	.word	0x20000004
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e053      	b.n	8002312 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d106      	bne.n	800228a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7fe fc4f 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	ea42 0103 	orr.w	r1, r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	0c1a      	lsrs	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f002 0204 	and.w	r2, r2, #4
 80022f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002300:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b088      	sub	sp, #32
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_SPI_Transmit+0x22>
 8002338:	2302      	movs	r3, #2
 800233a:	e11e      	b.n	800257a <HAL_SPI_Transmit+0x260>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002344:	f7ff f828 	bl	8001398 <HAL_GetTick>
 8002348:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d002      	beq.n	8002360 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800235a:	2302      	movs	r3, #2
 800235c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800235e:	e103      	b.n	8002568 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_SPI_Transmit+0x52>
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002370:	e0fa      	b.n	8002568 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b8:	d107      	bne.n	80023ca <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d007      	beq.n	80023e8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f0:	d14b      	bne.n	800248a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_SPI_Transmit+0xe6>
 80023fa:	8afb      	ldrh	r3, [r7, #22]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d13e      	bne.n	800247e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	1c9a      	adds	r2, r3, #2
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002424:	e02b      	b.n	800247e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d112      	bne.n	800245a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	86da      	strh	r2, [r3, #54]	; 0x36
 8002458:	e011      	b.n	800247e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245a:	f7fe ff9d 	bl	8001398 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d803      	bhi.n	8002472 <HAL_SPI_Transmit+0x158>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d102      	bne.n	8002478 <HAL_SPI_Transmit+0x15e>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800247c:	e074      	b.n	8002568 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ce      	bne.n	8002426 <HAL_SPI_Transmit+0x10c>
 8002488:	e04c      	b.n	8002524 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_SPI_Transmit+0x17e>
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d140      	bne.n	800251a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024be:	e02c      	b.n	800251a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d113      	bne.n	80024f6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80024f4:	e011      	b.n	800251a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f6:	f7fe ff4f 	bl	8001398 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d803      	bhi.n	800250e <HAL_SPI_Transmit+0x1f4>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d102      	bne.n	8002514 <HAL_SPI_Transmit+0x1fa>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002518:	e026      	b.n	8002568 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1cd      	bne.n	80024c0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fb91 	bl	8002c50 <SPI_EndRxTxTransaction>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	77fb      	strb	r3, [r7, #31]
 8002564:	e000      	b.n	8002568 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002566:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002578:	7ffb      	ldrb	r3, [r7, #31]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b088      	sub	sp, #32
 8002586:	af02      	add	r7, sp, #8
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259e:	d112      	bne.n	80025c6 <HAL_SPI_Receive+0x44>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10e      	bne.n	80025c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2204      	movs	r2, #4
 80025ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f8e9 	bl	8002794 <HAL_SPI_TransmitReceive>
 80025c2:	4603      	mov	r3, r0
 80025c4:	e0e2      	b.n	800278c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_SPI_Receive+0x52>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0db      	b.n	800278c <HAL_SPI_Receive+0x20a>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025dc:	f7fe fedc 	bl	8001398 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025f2:	e0c2      	b.n	800277a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_SPI_Receive+0x7e>
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002604:	e0b9      	b.n	800277a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2204      	movs	r2, #4
 800260a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	88fa      	ldrh	r2, [r7, #6]
 800261e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264c:	d107      	bne.n	800265e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d007      	beq.n	800267c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d162      	bne.n	800274a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002684:	e02e      	b.n	80026e4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d115      	bne.n	80026c0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f103 020c 	add.w	r2, r3, #12
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026be:	e011      	b.n	80026e4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c0:	f7fe fe6a 	bl	8001398 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d803      	bhi.n	80026d8 <HAL_SPI_Receive+0x156>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d102      	bne.n	80026de <HAL_SPI_Receive+0x15c>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026e2:	e04a      	b.n	800277a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1cb      	bne.n	8002686 <HAL_SPI_Receive+0x104>
 80026ee:	e031      	b.n	8002754 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d113      	bne.n	8002726 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	b292      	uxth	r2, r2
 800270a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	1c9a      	adds	r2, r3, #2
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002724:	e011      	b.n	800274a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002726:	f7fe fe37 	bl	8001398 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d803      	bhi.n	800273e <HAL_SPI_Receive+0x1bc>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d102      	bne.n	8002744 <HAL_SPI_Receive+0x1c2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002748:	e017      	b.n	800277a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1cd      	bne.n	80026f0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa27 	bl	8002bac <SPI_EndRxTransaction>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
 8002776:	e000      	b.n	800277a <HAL_SPI_Receive+0x1f8>
  }

error :
 8002778:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e18a      	b.n	8002ad0 <HAL_SPI_TransmitReceive+0x33c>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c2:	f7fe fde9 	bl	8001398 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00f      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x70>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ea:	d107      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x68>
 80027f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002802:	e15b      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x82>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x82>
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800281c:	e14e      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2205      	movs	r2, #5
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d007      	beq.n	8002886 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288e:	d178      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive+0x10a>
 8002898:	8b7b      	ldrh	r3, [r7, #26]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d166      	bne.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c2:	e053      	b.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_SPI_TransmitReceive+0x176>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_SPI_TransmitReceive+0x176>
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d113      	bne.n	800290a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d119      	bne.n	800294c <HAL_SPI_TransmitReceive+0x1b8>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	b292      	uxth	r2, r2
 800292e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	1c9a      	adds	r2, r3, #2
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800294c:	f7fe fd24 	bl	8001398 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002958:	429a      	cmp	r2, r3
 800295a:	d807      	bhi.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d003      	beq.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800296a:	e0a7      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1a6      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x130>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1a1      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x130>
 8002980:	e07c      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1fc>
 800298a:	8b7b      	ldrh	r3, [r7, #26]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d16b      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b6:	e057      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d11c      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d114      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d119      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x2ae>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a42:	f7fe fca9 	bl	8001398 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d803      	bhi.n	8002a5a <HAL_SPI_TransmitReceive+0x2c6>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x2cc>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a66:	e029      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1a2      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x224>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d19d      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8e5 	bl	8002c50 <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a98:	e010      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	e000      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002acc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae8:	e04c      	b.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d048      	beq.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002af2:	f7fe fc51 	bl	8001398 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d902      	bls.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d13d      	bne.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b20:	d111      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2a:	d004      	beq.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	d107      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	d10f      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e00f      	b.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d1a3      	bne.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc0:	d111      	bne.n	8002be6 <SPI_EndRxTransaction+0x3a>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bca:	d004      	beq.n	8002bd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd4:	d107      	bne.n	8002be6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bee:	d117      	bne.n	8002c20 <SPI_EndRxTransaction+0x74>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d112      	bne.n	8002c20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2101      	movs	r1, #1
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff ff67 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01a      	beq.n	8002c46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e013      	b.n	8002c48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2200      	movs	r2, #0
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff ff54 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e000      	b.n	8002c48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff36 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e000      	b.n	8002c84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e01d      	b.n	8002cda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f874 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 f8e4 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d007      	beq.n	8002d14 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_ConfigClockSource+0x18>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0a6      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x166>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d067      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0x120>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d80b      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x6c>
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d073      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x140>
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d802      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x62>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d06f      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d88:	e078      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d06c      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x140>
 8002d8e:	2b30      	cmp	r3, #48	; 0x30
 8002d90:	d06a      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d92:	e073      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d94:	2b70      	cmp	r3, #112	; 0x70
 8002d96:	d00d      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0x8c>
 8002d98:	2b70      	cmp	r3, #112	; 0x70
 8002d9a:	d804      	bhi.n	8002da6 <HAL_TIM_ConfigClockSource+0x7e>
 8002d9c:	2b50      	cmp	r3, #80	; 0x50
 8002d9e:	d033      	beq.n	8002e08 <HAL_TIM_ConfigClockSource+0xe0>
 8002da0:	2b60      	cmp	r3, #96	; 0x60
 8002da2:	d041      	beq.n	8002e28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002da4:	e06a      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d066      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x152>
 8002dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db0:	d017      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002db2:	e063      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f000 f941 	bl	800304a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]
      break;
 8002de0:	e04c      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f000 f92a 	bl	800304a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e04:	609a      	str	r2, [r3, #8]
      break;
 8002e06:	e039      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	461a      	mov	r2, r3
 8002e16:	f000 f8a1 	bl	8002f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2150      	movs	r1, #80	; 0x50
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f8f8 	bl	8003016 <TIM_ITRx_SetConfig>
      break;
 8002e26:	e029      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f000 f8bf 	bl	8002fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2160      	movs	r1, #96	; 0x60
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f8e8 	bl	8003016 <TIM_ITRx_SetConfig>
      break;
 8002e46:	e019      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	461a      	mov	r2, r3
 8002e56:	f000 f881 	bl	8002f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f8d8 	bl	8003016 <TIM_ITRx_SetConfig>
      break;
 8002e66:	e009      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 f8cf 	bl	8003016 <TIM_ITRx_SetConfig>
      break;
 8002e78:	e000      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <TIM_Base_SetConfig+0xb8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <TIM_Base_SetConfig+0x30>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0x30>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <TIM_Base_SetConfig+0xbc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0x30>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <TIM_Base_SetConfig+0xc0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d108      	bne.n	8002eda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <TIM_Base_SetConfig+0xb8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <TIM_Base_SetConfig+0xbc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <TIM_Base_SetConfig+0xc0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <TIM_Base_SetConfig+0xb8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	615a      	str	r2, [r3, #20]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800

08002f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 030a 	bic.w	r3, r3, #10
 8002f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	621a      	str	r2, [r3, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 0210 	bic.w	r2, r3, #16
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fe2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	031b      	lsls	r3, r3, #12
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	f043 0307 	orr.w	r3, r3, #7
 8003038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800304a:	b480      	push	{r7}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003064:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	021a      	lsls	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	431a      	orrs	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4313      	orrs	r3, r2
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800309c:	2302      	movs	r3, #2
 800309e:	e032      	b.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e03f      	b.n	80031a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe f86a 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 faef 	bl	8003738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d130      	bne.n	8003226 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_UART_Transmit_IT+0x26>
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e029      	b.n	8003228 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Transmit_IT+0x38>
 80031de:	2302      	movs	r3, #2
 80031e0:	e022      	b.n	8003228 <HAL_UART_Transmit_IT+0x7e>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003220:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	d140      	bne.n	80032ce <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_UART_Receive_IT+0x26>
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e039      	b.n	80032d0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_UART_Receive_IT+0x38>
 8003266:	2302      	movs	r3, #2
 8003268:	e032      	b.n	80032d0 <HAL_UART_Receive_IT+0x9e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2222      	movs	r2, #34	; 0x22
 800328e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0220 	orr.w	r2, r2, #32
 80032c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_UART_IRQHandler+0x52>
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f984 	bl	8003634 <UART_Receive_IT>
      return;
 800332c:	e0cc      	b.n	80034c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80ab 	beq.w	800348c <HAL_UART_IRQHandler+0x1b0>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <HAL_UART_IRQHandler+0x70>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80a0 	beq.w	800348c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_UART_IRQHandler+0x90>
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_UART_IRQHandler+0xb0>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	f043 0202 	orr.w	r2, r3, #2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_UART_IRQHandler+0xd0>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	f043 0204 	orr.w	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_UART_IRQHandler+0xf0>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f043 0208 	orr.w	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d078      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_UART_IRQHandler+0x112>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f923 	bl	8003634 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_UART_IRQHandler+0x13a>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d031      	beq.n	800347a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f86e 	bl	80034f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d023      	beq.n	8003472 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	2b00      	cmp	r3, #0
 8003440:	d013      	beq.n	800346a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_UART_IRQHandler+0x1f4>)
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe f8dc 	bl	800160c <HAL_DMA_Abort_IT>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003464:	4610      	mov	r0, r2
 8003466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	e00e      	b.n	8003488 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f83b 	bl	80034e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	e00a      	b.n	8003488 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f837 	bl	80034e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003478:	e006      	b.n	8003488 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f833 	bl	80034e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003486:	e01e      	b.n	80034c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	bf00      	nop
    return;
 800348a:	e01c      	b.n	80034c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_UART_IRQHandler+0x1cc>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f85a 	bl	800355a <UART_Transmit_IT>
    return;
 80034a6:	e00f      	b.n	80034c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_UART_IRQHandler+0x1ec>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8a1 	bl	8003604 <UART_EndTransmit_IT>
    return;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80034c6:	bf00      	nop
  }
}
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	08003533 	.word	0x08003533

080034d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800350e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff ffca 	bl	80034e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b21      	cmp	r3, #33	; 0x21
 800356c:	d144      	bne.n	80035f8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d11a      	bne.n	80035ae <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]
 80035a0:	e00e      	b.n	80035c0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	621a      	str	r2, [r3, #32]
 80035ac:	e008      	b.n	80035c0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6211      	str	r1, [r2, #32]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4619      	mov	r1, r3
 80035ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10f      	bne.n	80035f4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ff55 	bl	80034d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b22      	cmp	r3, #34	; 0x22
 8003646:	d171      	bne.n	800372c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003650:	d123      	bne.n	800369a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
 800367c:	e029      	b.n	80036d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	b29b      	uxth	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
 8003698:	e01b      	b.n	80036d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6858      	ldr	r0, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6291      	str	r1, [r2, #40]	; 0x28
 80036b2:	b2c2      	uxtb	r2, r0
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e00c      	b.n	80036d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	1c58      	adds	r0, r3, #1
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	6288      	str	r0, [r1, #40]	; 0x28
 80036ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4619      	mov	r1, r3
 80036e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d120      	bne.n	8003728 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0220 	bic.w	r2, r2, #32
 80036f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003704:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fc feb2 	bl	8000488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e002      	b.n	800372e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003772:	f023 030c 	bic.w	r3, r3, #12
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	430b      	orrs	r3, r1
 800377e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <UART_SetConfig+0x1ac>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d14e      	bne.n	800383e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7fe fd28 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 80037a4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <UART_SetConfig+0x1b0>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	0119      	lsls	r1, r3, #4
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009a      	lsls	r2, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <UART_SetConfig+0x1b0>)
 80037de:	fba3 0302 	umull	r0, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	3332      	adds	r3, #50	; 0x32
 80037f0:	4a3d      	ldr	r2, [pc, #244]	; (80038e8 <UART_SetConfig+0x1b0>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fc:	4419      	add	r1, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009a      	lsls	r2, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fbb2 f2f3 	udiv	r2, r2, r3
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <UART_SetConfig+0x1b0>)
 8003816:	fba3 0302 	umull	r0, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2064      	movs	r0, #100	; 0x64
 800381e:	fb00 f303 	mul.w	r3, r0, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	3332      	adds	r3, #50	; 0x32
 8003828:	4a2f      	ldr	r2, [pc, #188]	; (80038e8 <UART_SetConfig+0x1b0>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	440a      	add	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800383c:	e04d      	b.n	80038da <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7fe fcc5 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8003842:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009a      	lsls	r2, r3, #2
 800384e:	441a      	add	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <UART_SetConfig+0x1b0>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	0119      	lsls	r1, r3, #4
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009a      	lsls	r2, r3, #2
 800386e:	441a      	add	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fbb2 f2f3 	udiv	r2, r2, r3
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <UART_SetConfig+0x1b0>)
 800387c:	fba3 0302 	umull	r0, r3, r3, r2
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	2064      	movs	r0, #100	; 0x64
 8003884:	fb00 f303 	mul.w	r3, r0, r3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	3332      	adds	r3, #50	; 0x32
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <UART_SetConfig+0x1b0>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389a:	4419      	add	r1, r3
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <UART_SetConfig+0x1b0>)
 80038b4:	fba3 0302 	umull	r0, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2064      	movs	r0, #100	; 0x64
 80038bc:	fb00 f303 	mul.w	r3, r0, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <UART_SetConfig+0x1b0>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	440a      	add	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40013800 	.word	0x40013800
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <atoi>:
 80038ec:	220a      	movs	r2, #10
 80038ee:	2100      	movs	r1, #0
 80038f0:	f000 b8e2 	b.w	8003ab8 <strtol>

080038f4 <__libc_init_array>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	2500      	movs	r5, #0
 80038f8:	4e0c      	ldr	r6, [pc, #48]	; (800392c <__libc_init_array+0x38>)
 80038fa:	4c0d      	ldr	r4, [pc, #52]	; (8003930 <__libc_init_array+0x3c>)
 80038fc:	1ba4      	subs	r4, r4, r6
 80038fe:	10a4      	asrs	r4, r4, #2
 8003900:	42a5      	cmp	r5, r4
 8003902:	d109      	bne.n	8003918 <__libc_init_array+0x24>
 8003904:	f000 f910 	bl	8003b28 <_init>
 8003908:	2500      	movs	r5, #0
 800390a:	4e0a      	ldr	r6, [pc, #40]	; (8003934 <__libc_init_array+0x40>)
 800390c:	4c0a      	ldr	r4, [pc, #40]	; (8003938 <__libc_init_array+0x44>)
 800390e:	1ba4      	subs	r4, r4, r6
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	42a5      	cmp	r5, r4
 8003914:	d105      	bne.n	8003922 <__libc_init_array+0x2e>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
 8003918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391c:	4798      	blx	r3
 800391e:	3501      	adds	r5, #1
 8003920:	e7ee      	b.n	8003900 <__libc_init_array+0xc>
 8003922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003926:	4798      	blx	r3
 8003928:	3501      	adds	r5, #1
 800392a:	e7f2      	b.n	8003912 <__libc_init_array+0x1e>
 800392c:	08003eb0 	.word	0x08003eb0
 8003930:	08003eb0 	.word	0x08003eb0
 8003934:	08003eb0 	.word	0x08003eb0
 8003938:	08003eb4 	.word	0x08003eb4

0800393c <memcpy>:
 800393c:	b510      	push	{r4, lr}
 800393e:	1e43      	subs	r3, r0, #1
 8003940:	440a      	add	r2, r1
 8003942:	4291      	cmp	r1, r2
 8003944:	d100      	bne.n	8003948 <memcpy+0xc>
 8003946:	bd10      	pop	{r4, pc}
 8003948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003950:	e7f7      	b.n	8003942 <memcpy+0x6>

08003952 <memset>:
 8003952:	4603      	mov	r3, r0
 8003954:	4402      	add	r2, r0
 8003956:	4293      	cmp	r3, r2
 8003958:	d100      	bne.n	800395c <memset+0xa>
 800395a:	4770      	bx	lr
 800395c:	f803 1b01 	strb.w	r1, [r3], #1
 8003960:	e7f9      	b.n	8003956 <memset+0x4>

08003962 <strncpy>:
 8003962:	b570      	push	{r4, r5, r6, lr}
 8003964:	4604      	mov	r4, r0
 8003966:	3901      	subs	r1, #1
 8003968:	b902      	cbnz	r2, 800396c <strncpy+0xa>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	4623      	mov	r3, r4
 800396e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003972:	1e56      	subs	r6, r2, #1
 8003974:	f803 5b01 	strb.w	r5, [r3], #1
 8003978:	b92d      	cbnz	r5, 8003986 <strncpy+0x24>
 800397a:	4414      	add	r4, r2
 800397c:	42a3      	cmp	r3, r4
 800397e:	d0f4      	beq.n	800396a <strncpy+0x8>
 8003980:	f803 5b01 	strb.w	r5, [r3], #1
 8003984:	e7fa      	b.n	800397c <strncpy+0x1a>
 8003986:	461c      	mov	r4, r3
 8003988:	4632      	mov	r2, r6
 800398a:	e7ed      	b.n	8003968 <strncpy+0x6>

0800398c <strstr>:
 800398c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398e:	7803      	ldrb	r3, [r0, #0]
 8003990:	b17b      	cbz	r3, 80039b2 <strstr+0x26>
 8003992:	4604      	mov	r4, r0
 8003994:	7823      	ldrb	r3, [r4, #0]
 8003996:	4620      	mov	r0, r4
 8003998:	1c66      	adds	r6, r4, #1
 800399a:	b17b      	cbz	r3, 80039bc <strstr+0x30>
 800399c:	1e4a      	subs	r2, r1, #1
 800399e:	1e63      	subs	r3, r4, #1
 80039a0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80039a4:	b14d      	cbz	r5, 80039ba <strstr+0x2e>
 80039a6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80039aa:	4634      	mov	r4, r6
 80039ac:	42af      	cmp	r7, r5
 80039ae:	d0f7      	beq.n	80039a0 <strstr+0x14>
 80039b0:	e7f0      	b.n	8003994 <strstr+0x8>
 80039b2:	780b      	ldrb	r3, [r1, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf18      	it	ne
 80039b8:	2000      	movne	r0, #0
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	4618      	mov	r0, r3
 80039be:	e7fc      	b.n	80039ba <strstr+0x2e>

080039c0 <_strtol_l.isra.0>:
 80039c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	4680      	mov	r8, r0
 80039c6:	4689      	mov	r9, r1
 80039c8:	4692      	mov	sl, r2
 80039ca:	461e      	mov	r6, r3
 80039cc:	460f      	mov	r7, r1
 80039ce:	463d      	mov	r5, r7
 80039d0:	9808      	ldr	r0, [sp, #32]
 80039d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039d6:	f000 f885 	bl	8003ae4 <__locale_ctype_ptr_l>
 80039da:	4420      	add	r0, r4
 80039dc:	7843      	ldrb	r3, [r0, #1]
 80039de:	f013 0308 	ands.w	r3, r3, #8
 80039e2:	d132      	bne.n	8003a4a <_strtol_l.isra.0+0x8a>
 80039e4:	2c2d      	cmp	r4, #45	; 0x2d
 80039e6:	d132      	bne.n	8003a4e <_strtol_l.isra.0+0x8e>
 80039e8:	2201      	movs	r2, #1
 80039ea:	787c      	ldrb	r4, [r7, #1]
 80039ec:	1cbd      	adds	r5, r7, #2
 80039ee:	2e00      	cmp	r6, #0
 80039f0:	d05d      	beq.n	8003aae <_strtol_l.isra.0+0xee>
 80039f2:	2e10      	cmp	r6, #16
 80039f4:	d109      	bne.n	8003a0a <_strtol_l.isra.0+0x4a>
 80039f6:	2c30      	cmp	r4, #48	; 0x30
 80039f8:	d107      	bne.n	8003a0a <_strtol_l.isra.0+0x4a>
 80039fa:	782b      	ldrb	r3, [r5, #0]
 80039fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a00:	2b58      	cmp	r3, #88	; 0x58
 8003a02:	d14f      	bne.n	8003aa4 <_strtol_l.isra.0+0xe4>
 8003a04:	2610      	movs	r6, #16
 8003a06:	786c      	ldrb	r4, [r5, #1]
 8003a08:	3502      	adds	r5, #2
 8003a0a:	2a00      	cmp	r2, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003a12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003a16:	2700      	movs	r7, #0
 8003a18:	fbb1 fcf6 	udiv	ip, r1, r6
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003a22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d817      	bhi.n	8003a5a <_strtol_l.isra.0+0x9a>
 8003a2a:	461c      	mov	r4, r3
 8003a2c:	42a6      	cmp	r6, r4
 8003a2e:	dd23      	ble.n	8003a78 <_strtol_l.isra.0+0xb8>
 8003a30:	1c7b      	adds	r3, r7, #1
 8003a32:	d007      	beq.n	8003a44 <_strtol_l.isra.0+0x84>
 8003a34:	4584      	cmp	ip, r0
 8003a36:	d31c      	bcc.n	8003a72 <_strtol_l.isra.0+0xb2>
 8003a38:	d101      	bne.n	8003a3e <_strtol_l.isra.0+0x7e>
 8003a3a:	45a6      	cmp	lr, r4
 8003a3c:	db19      	blt.n	8003a72 <_strtol_l.isra.0+0xb2>
 8003a3e:	2701      	movs	r7, #1
 8003a40:	fb00 4006 	mla	r0, r0, r6, r4
 8003a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a48:	e7eb      	b.n	8003a22 <_strtol_l.isra.0+0x62>
 8003a4a:	462f      	mov	r7, r5
 8003a4c:	e7bf      	b.n	80039ce <_strtol_l.isra.0+0xe>
 8003a4e:	2c2b      	cmp	r4, #43	; 0x2b
 8003a50:	bf04      	itt	eq
 8003a52:	1cbd      	addeq	r5, r7, #2
 8003a54:	787c      	ldrbeq	r4, [r7, #1]
 8003a56:	461a      	mov	r2, r3
 8003a58:	e7c9      	b.n	80039ee <_strtol_l.isra.0+0x2e>
 8003a5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003a5e:	2b19      	cmp	r3, #25
 8003a60:	d801      	bhi.n	8003a66 <_strtol_l.isra.0+0xa6>
 8003a62:	3c37      	subs	r4, #55	; 0x37
 8003a64:	e7e2      	b.n	8003a2c <_strtol_l.isra.0+0x6c>
 8003a66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003a6a:	2b19      	cmp	r3, #25
 8003a6c:	d804      	bhi.n	8003a78 <_strtol_l.isra.0+0xb8>
 8003a6e:	3c57      	subs	r4, #87	; 0x57
 8003a70:	e7dc      	b.n	8003a2c <_strtol_l.isra.0+0x6c>
 8003a72:	f04f 37ff 	mov.w	r7, #4294967295
 8003a76:	e7e5      	b.n	8003a44 <_strtol_l.isra.0+0x84>
 8003a78:	1c7b      	adds	r3, r7, #1
 8003a7a:	d108      	bne.n	8003a8e <_strtol_l.isra.0+0xce>
 8003a7c:	2322      	movs	r3, #34	; 0x22
 8003a7e:	4608      	mov	r0, r1
 8003a80:	f8c8 3000 	str.w	r3, [r8]
 8003a84:	f1ba 0f00 	cmp.w	sl, #0
 8003a88:	d107      	bne.n	8003a9a <_strtol_l.isra.0+0xda>
 8003a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8e:	b102      	cbz	r2, 8003a92 <_strtol_l.isra.0+0xd2>
 8003a90:	4240      	negs	r0, r0
 8003a92:	f1ba 0f00 	cmp.w	sl, #0
 8003a96:	d0f8      	beq.n	8003a8a <_strtol_l.isra.0+0xca>
 8003a98:	b10f      	cbz	r7, 8003a9e <_strtol_l.isra.0+0xde>
 8003a9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8003a9e:	f8ca 9000 	str.w	r9, [sl]
 8003aa2:	e7f2      	b.n	8003a8a <_strtol_l.isra.0+0xca>
 8003aa4:	2430      	movs	r4, #48	; 0x30
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	d1af      	bne.n	8003a0a <_strtol_l.isra.0+0x4a>
 8003aaa:	2608      	movs	r6, #8
 8003aac:	e7ad      	b.n	8003a0a <_strtol_l.isra.0+0x4a>
 8003aae:	2c30      	cmp	r4, #48	; 0x30
 8003ab0:	d0a3      	beq.n	80039fa <_strtol_l.isra.0+0x3a>
 8003ab2:	260a      	movs	r6, #10
 8003ab4:	e7a9      	b.n	8003a0a <_strtol_l.isra.0+0x4a>
	...

08003ab8 <strtol>:
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <strtol+0x24>)
 8003aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003abc:	681c      	ldr	r4, [r3, #0]
 8003abe:	4d08      	ldr	r5, [pc, #32]	; (8003ae0 <strtol+0x28>)
 8003ac0:	6a23      	ldr	r3, [r4, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf08      	it	eq
 8003ac6:	462b      	moveq	r3, r5
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	460a      	mov	r2, r1
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff ff75 	bl	80039c0 <_strtol_l.isra.0>
 8003ad6:	b003      	add	sp, #12
 8003ad8:	bd30      	pop	{r4, r5, pc}
 8003ada:	bf00      	nop
 8003adc:	2000003c 	.word	0x2000003c
 8003ae0:	200000a0 	.word	0x200000a0

08003ae4 <__locale_ctype_ptr_l>:
 8003ae4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003ae8:	4770      	bx	lr

08003aea <__ascii_mbtowc>:
 8003aea:	b082      	sub	sp, #8
 8003aec:	b901      	cbnz	r1, 8003af0 <__ascii_mbtowc+0x6>
 8003aee:	a901      	add	r1, sp, #4
 8003af0:	b142      	cbz	r2, 8003b04 <__ascii_mbtowc+0x1a>
 8003af2:	b14b      	cbz	r3, 8003b08 <__ascii_mbtowc+0x1e>
 8003af4:	7813      	ldrb	r3, [r2, #0]
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	1c10      	adds	r0, r2, #0
 8003afc:	bf18      	it	ne
 8003afe:	2001      	movne	r0, #1
 8003b00:	b002      	add	sp, #8
 8003b02:	4770      	bx	lr
 8003b04:	4610      	mov	r0, r2
 8003b06:	e7fb      	b.n	8003b00 <__ascii_mbtowc+0x16>
 8003b08:	f06f 0001 	mvn.w	r0, #1
 8003b0c:	e7f8      	b.n	8003b00 <__ascii_mbtowc+0x16>

08003b0e <__ascii_wctomb>:
 8003b0e:	b149      	cbz	r1, 8003b24 <__ascii_wctomb+0x16>
 8003b10:	2aff      	cmp	r2, #255	; 0xff
 8003b12:	bf8b      	itete	hi
 8003b14:	238a      	movhi	r3, #138	; 0x8a
 8003b16:	700a      	strbls	r2, [r1, #0]
 8003b18:	6003      	strhi	r3, [r0, #0]
 8003b1a:	2001      	movls	r0, #1
 8003b1c:	bf88      	it	hi
 8003b1e:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b22:	4770      	bx	lr
 8003b24:	4608      	mov	r0, r1
 8003b26:	4770      	bx	lr

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
