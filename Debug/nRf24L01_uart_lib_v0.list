
nRf24L01_uart_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08002fe8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002fe8  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e00c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002366  00000000  00000000  0002e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00030410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014eb3  00000000  00000000  00031f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4f2  00000000  00000000  00046dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074ded  00000000  00000000  000522bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c70aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  000c7128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e54 	.word	0x08002e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002e54 	.word	0x08002e54

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4b      	ldr	r2, [pc, #300]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x148>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b43      	ldr	r3, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3d      	ldr	r3, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3a      	ldr	r3, [pc, #232]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001d6:	f000 ff25 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2110      	movs	r1, #16
 80001de:	4833      	ldr	r0, [pc, #204]	; (80002ac <MX_GPIO_Init+0x150>)
 80001e0:	f000 ff20 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	482c      	ldr	r0, [pc, #176]	; (80002ac <MX_GPIO_Init+0x150>)
 80001fa:	f000 fdb9 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001fe:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000204:	2303      	movs	r3, #3
 8000206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f000 fdae 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9 
 8000214:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000218:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021a:	2303      	movs	r3, #3
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000226:	f000 fda3 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4819      	ldr	r0, [pc, #100]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000242:	f000 fd95 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000246:	2310      	movs	r3, #16
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_GPIO_Init+0x150>)
 800025e:	f000 fd87 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000274:	f000 fd7c 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000278:	2304      	movs	r3, #4
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027c:	2303      	movs	r3, #3
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000288:	f000 fd72 	bl	8000d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f000 fcc0 	bl	8000c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000296:	2028      	movs	r0, #40	; 0x28
 8000298:	f000 fcd9 	bl	8000c4e <HAL_NVIC_EnableIRQ>

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40011400 	.word	0x40011400

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fb4d 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f869 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f7ff ff47 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ce:	f000 fab1 	bl	8000834 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80002d2:	f000 f8c1 	bl	8000458 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002d6:	f000 fa0d 	bl	80006f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	sendString("\n\rPeriphery initialized.", &huart2);
 80002da:	4926      	ldr	r1, [pc, #152]	; (8000374 <main+0xb8>)
 80002dc:	4826      	ldr	r0, [pc, #152]	; (8000378 <main+0xbc>)
 80002de:	f000 fa77 	bl	80007d0 <sendString>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) uartReceiveBuffer, UART_READ_SIZE);
 80002e2:	2210      	movs	r2, #16
 80002e4:	4925      	ldr	r1, [pc, #148]	; (800037c <main+0xc0>)
 80002e6:	4823      	ldr	r0, [pc, #140]	; (8000374 <main+0xb8>)
 80002e8:	f001 fe03 	bl	8001ef2 <HAL_UART_Receive_IT>
	sendString("\n\rUart set as listener.", &huart2);
 80002ec:	4921      	ldr	r1, [pc, #132]	; (8000374 <main+0xb8>)
 80002ee:	4824      	ldr	r0, [pc, #144]	; (8000380 <main+0xc4>)
 80002f0:	f000 fa6e 	bl	80007d0 <sendString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* UART print RX buffer */
		if (uartRx_flag) {
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <main+0xc8>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0fa      	beq.n	80002f4 <main+0x38>
			sendString("\r\nData received.", &huart2); //log
 80002fe:	491d      	ldr	r1, [pc, #116]	; (8000374 <main+0xb8>)
 8000300:	4821      	ldr	r0, [pc, #132]	; (8000388 <main+0xcc>)
 8000302:	f000 fa65 	bl	80007d0 <sendString>
			HAL_Delay(100);
 8000306:	2064      	movs	r0, #100	; 0x64
 8000308:	f000 fb8c 	bl	8000a24 <HAL_Delay>
			memcpy(uartTmpBuffer, uartReceiveBuffer, UART_READ_SIZE);//copy characters to temporary buffer
 800030c:	2210      	movs	r2, #16
 800030e:	491b      	ldr	r1, [pc, #108]	; (800037c <main+0xc0>)
 8000310:	481e      	ldr	r0, [pc, #120]	; (800038c <main+0xd0>)
 8000312:	f002 f992 	bl	800263a <memcpy>
			if (memcmp(nrfCommandPreamble, uartTmpBuffer, 5) == 0) { //check four first chars - detect command
 8000316:	2205      	movs	r2, #5
 8000318:	491c      	ldr	r1, [pc, #112]	; (800038c <main+0xd0>)
 800031a:	481d      	ldr	r0, [pc, #116]	; (8000390 <main+0xd4>)
 800031c:	f002 f97e 	bl	800261c <memcmp>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d11b      	bne.n	800035e <main+0xa2>
				/* Find end of command*/
				sendString("\r\n#nRF command detect.", &huart2); //log
 8000326:	4913      	ldr	r1, [pc, #76]	; (8000374 <main+0xb8>)
 8000328:	481a      	ldr	r0, [pc, #104]	; (8000394 <main+0xd8>)
 800032a:	f000 fa51 	bl	80007d0 <sendString>
				uint32_t endLinePointer = (uint32_t) memchr(uartTmpBuffer, 0x0A,
 800032e:	4817      	ldr	r0, [pc, #92]	; (800038c <main+0xd0>)
 8000330:	f7ff ff0c 	bl	800014c <strlen>
 8000334:	4603      	mov	r3, r0
 8000336:	461a      	mov	r2, r3
 8000338:	210a      	movs	r1, #10
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <main+0xd0>)
 800033c:	f002 f960 	bl	8002600 <memchr>
 8000340:	4603      	mov	r3, r0
 8000342:	607b      	str	r3, [r7, #4]
						strlen(uartTmpBuffer)); //find EOL mean LF
				uint32_t endCommand = endLinePointer - (uint32_t) uartTmpBuffer
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <main+0xd0>)
						+ 1;
 8000346:	f1c3 0301 	rsb	r3, r3, #1
				uint32_t endCommand = endLinePointer - (uint32_t) uartTmpBuffer
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	603b      	str	r3, [r7, #0]

				/* Check position of EOL to shortest command length. */
				if (endCommand < 11)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	2b0a      	cmp	r3, #10
 8000354:	d803      	bhi.n	800035e <main+0xa2>
					sendString("\r\n#nRF command invalid.", &huart2);	//log
 8000356:	4907      	ldr	r1, [pc, #28]	; (8000374 <main+0xb8>)
 8000358:	480f      	ldr	r0, [pc, #60]	; (8000398 <main+0xdc>)
 800035a:	f000 fa39 	bl	80007d0 <sendString>

			}



			sendChar(uartReceiveBuffer[0], &huart2);
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <main+0xc0>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4904      	ldr	r1, [pc, #16]	; (8000374 <main+0xb8>)
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fa47 	bl	80007f8 <sendChar>



			uartRx_flag = 0;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <main+0xc8>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
		if (uartRx_flag) {
 8000370:	e7c0      	b.n	80002f4 <main+0x38>
 8000372:	bf00      	nop
 8000374:	20000194 	.word	0x20000194
 8000378:	08002e6c 	.word	0x08002e6c
 800037c:	200000dc 	.word	0x200000dc
 8000380:	08002e88 	.word	0x08002e88
 8000384:	2000008c 	.word	0x2000008c
 8000388:	08002ea0 	.word	0x08002ea0
 800038c:	2000009c 	.word	0x2000009c
 8000390:	08002f1c 	.word	0x08002f1c
 8000394:	08002eb4 	.word	0x08002eb4
 8000398:	08002ecc 	.word	0x08002ecc

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f950 	bl	8002650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ca:	2302      	movs	r3, #2
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003ce:	2300      	movs	r3, #0
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fe5b 	bl	8001098 <HAL_RCC_OscConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003e8:	f000 f830 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	230f      	movs	r3, #15
 80003ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	2302      	movs	r3, #2
 80003f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f001 f8c6 	bl	8001598 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000412:	f000 f81b 	bl	800044c <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3740      	adds	r7, #64	; 0x40
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uartRx_flag = 1;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_UART_RxCpltCallback+0x20>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t*) uartReceiveBuffer, UART_READ_SIZE);
 800042e:	2210      	movs	r2, #16
 8000430:	4904      	ldr	r1, [pc, #16]	; (8000444 <HAL_UART_RxCpltCallback+0x24>)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <HAL_UART_RxCpltCallback+0x28>)
 8000434:	f001 fd5d 	bl	8001ef2 <HAL_UART_Receive_IT>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000008c 	.word	0x2000008c
 8000444:	200000dc 	.word	0x200000dc
 8000448:	20000194 	.word	0x20000194

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <MX_SPI1_Init+0x64>)
 800045e:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <MX_SPI1_Init+0x68>)
 8000460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <MX_SPI1_Init+0x64>)
 8000464:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_SPI1_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <MX_SPI1_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_SPI1_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_SPI1_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_SPI1_Init+0x64>)
 8000484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000488:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_SPI1_Init+0x64>)
 800048c:	2210      	movs	r2, #16
 800048e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <MX_SPI1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_SPI1_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <MX_SPI1_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_SPI1_Init+0x64>)
 80004a4:	220a      	movs	r2, #10
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <MX_SPI1_Init+0x64>)
 80004aa:	f001 fa11 	bl	80018d0 <HAL_SPI_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004b4:	f7ff ffca 	bl	800044c <Error_Handler>
  }

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000fc 	.word	0x200000fc
 80004c0:	40013000 	.word	0x40013000

080004c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1b      	ldr	r2, [pc, #108]	; (800054c <HAL_SPI_MspInit+0x88>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d12f      	bne.n	8000544 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <HAL_SPI_MspInit+0x90>)
 8000528:	f000 fc22 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800052c:	2340      	movs	r3, #64	; 0x40
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <HAL_SPI_MspInit+0x90>)
 8000540:	f000 fc16 	bl	8000d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40013000 	.word	0x40013000
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_MspInit+0x60>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_MspInit+0x60>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <HardFault_Handler+0x4>

080005ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <BusFault_Handler+0x4>

080005da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <UsageFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 f9f0 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <USART2_IRQHandler+0x10>)
 8000616:	f001 fcc1 	bl	8001f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000194 	.word	0x20000194

08000624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000628:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800062c:	f000 fd12 	bl	8001054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <_sbrk+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x16>
		heap_end = &end;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <_sbrk+0x50>)
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <_sbrk+0x54>)
 8000648:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <_sbrk+0x50>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <_sbrk+0x50>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	466a      	mov	r2, sp
 800065a:	4293      	cmp	r3, r2
 800065c:	d907      	bls.n	800066e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800065e:	f001 ffa5 	bl	80025ac <__errno>
 8000662:	4602      	mov	r2, r0
 8000664:	230c      	movs	r3, #12
 8000666:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	e006      	b.n	800067c <_sbrk+0x48>
	}

	heap_end += incr;
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <_sbrk+0x50>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a03      	ldr	r2, [pc, #12]	; (8000684 <_sbrk+0x50>)
 8000678:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000090 	.word	0x20000090
 8000688:	200001e0 	.word	0x200001e0

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x5c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <SystemInit+0x5c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x5c>)
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <SystemInit+0x5c>)
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <SystemInit+0x60>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <SystemInit+0x5c>)
 80006ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <SystemInit+0x5c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <SystemInit+0x5c>)
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SystemInit+0x5c>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SystemInit+0x5c>)
 80006ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SystemInit+0x5c>)
 80006d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SystemInit+0x64>)
 80006da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006de:	609a      	str	r2, [r3, #8]
#endif 
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000
 80006ec:	f8ff0000 	.word	0xf8ff0000
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_TIM1_Init+0x98>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <MX_TIM1_Init+0x9c>)
 8000714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM1_Init+0x98>)
 8000718:	2247      	movs	r2, #71	; 0x47
 800071a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_TIM1_Init+0x98>)
 8000724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_TIM1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_TIM1_Init+0x98>)
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_TIM1_Init+0x98>)
 800073e:	f001 f928 	bl	8001992 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000748:	f7ff fe80 	bl	800044c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_TIM1_Init+0x98>)
 800075a:	f001 f945 	bl	80019e8 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000764:	f7ff fe72 	bl	800044c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_TIM1_Init+0x98>)
 8000776:	f001 fae7 	bl	8001d48 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000780:	f7ff fe64 	bl	800044c <Error_Handler>
  }

}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000154 	.word	0x20000154
 8000790:	40012c00 	.word	0x40012c00

08000794 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <HAL_TIM_Base_MspInit+0x34>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10b      	bne.n	80007be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_TIM_Base_MspInit+0x38>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_TIM_Base_MspInit+0x38>)
 80007ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_TIM_Base_MspInit+0x38>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40021000 	.word	0x40021000

080007d0 <sendString>:
		sendShortInteger(buffer[i], huart);
	}
	return 1;
}

void sendString(const char *str, UART_HandleTypeDef *huart) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t*) str, strlen(str));
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff fcb6 	bl	800014c <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	6838      	ldr	r0, [r7, #0]
 80007ea:	f001 fb3e 	bl	8001e6a <HAL_UART_Transmit_IT>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <sendChar>:

void sendChar(char charakter, UART_HandleTypeDef *huart) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
	char data[4];
	size_t dataSize = sprintf(data, "%cb", charakter);
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4909      	ldr	r1, [pc, #36]	; (8000830 <sendChar+0x38>)
 800080c:	4618      	mov	r0, r3
 800080e:	f001 ff27 	bl	8002660 <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(huart, (uint8_t*) data, dataSize);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	f001 fb22 	bl	8001e6a <HAL_UART_Transmit_IT>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	08002ee4 	.word	0x08002ee4

08000834 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f001 fab0 	bl	8001dd0 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f7ff fde9 	bl	800044c <Error_Handler>
  }

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000194 	.word	0x20000194
 8000884:	40004400 	.word	0x40004400

08000888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d12b      	bne.n	8000900 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x84>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_UART_MspInit+0x84>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x84>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0x84>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <HAL_UART_MspInit+0x84>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_UART_MspInit+0x84>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d8:	230c      	movs	r3, #12
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008ec:	f000 fa40 	bl	8000d70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2026      	movs	r0, #38	; 0x26
 80008f6:	f000 f98e 	bl	8000c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008fa:	2026      	movs	r0, #38	; 0x26
 80008fc:	f000 f9a7 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40004400 	.word	0x40004400
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800

08000914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000914:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000930:	f842 3b04 	str.w	r3, [r2], #4

08000934 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093a:	f7ff fea7 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f001 fe3b 	bl	80025b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fcbb 	bl	80002bc <main>
  bx lr
 8000946:	4770      	bx	lr
  ldr r3, =_sidata
 8000948:	08002f78 	.word	0x08002f78
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000950:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000954:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000958:	200001dc 	.word	0x200001dc

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f945 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fdec 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f95d 	bl	8000c6a <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f925 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200001d4 	.word	0x200001d4

08000a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	200001d4 	.word	0x200001d4

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff0 	bl	8000a10 <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_Delay+0x40>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4a:	bf00      	nop
 8000a4c:	f7ff ffe0 	bl	8000a10 <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000008 	.word	0x20000008

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <__NVIC_EnableIRQ+0x34>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff90 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff2d 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff42 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff90 	bl	8000b58 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5f 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff35 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa2 	bl	8000bbc <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d005      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e051      	b.n	8000d4a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 020e 	bic.w	r2, r2, #14
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_DMA_Abort_IT+0xd0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d029      	beq.n	8000d24 <HAL_DMA_Abort_IT+0xa0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <HAL_DMA_Abort_IT+0xd4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d022      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x9c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_DMA_Abort_IT+0xd8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d01a      	beq.n	8000d1a <HAL_DMA_Abort_IT+0x96>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_DMA_Abort_IT+0xdc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d012      	beq.n	8000d14 <HAL_DMA_Abort_IT+0x90>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <HAL_DMA_Abort_IT+0xe0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00a      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x8a>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <HAL_DMA_Abort_IT+0xe4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d102      	bne.n	8000d08 <HAL_DMA_Abort_IT+0x84>
 8000d02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d06:	e00e      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d0c:	e00b      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	e008      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	e005      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1e:	e002      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d20:	2310      	movs	r3, #16
 8000d22:	e000      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d24:	2301      	movs	r3, #1
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_DMA_Abort_IT+0xe8>)
 8000d28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    } 
  }
  return status;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020008 	.word	0x40020008
 8000d58:	4002001c 	.word	0x4002001c
 8000d5c:	40020030 	.word	0x40020030
 8000d60:	40020044 	.word	0x40020044
 8000d64:	40020058 	.word	0x40020058
 8000d68:	4002006c 	.word	0x4002006c
 8000d6c:	40020000 	.word	0x40020000

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e127      	b.n	8000fd4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d84:	2201      	movs	r2, #1
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8116 	bne.w	8000fce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d034      	beq.n	8000e14 <HAL_GPIO_Init+0xa4>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d80d      	bhi.n	8000dca <HAL_GPIO_Init+0x5a>
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d02b      	beq.n	8000e0a <HAL_GPIO_Init+0x9a>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d804      	bhi.n	8000dc0 <HAL_GPIO_Init+0x50>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d031      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d01c      	beq.n	8000df8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dbe:	e048      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d043      	beq.n	8000e4c <HAL_GPIO_Init+0xdc>
 8000dc4:	2b11      	cmp	r3, #17
 8000dc6:	d01b      	beq.n	8000e00 <HAL_GPIO_Init+0x90>
          break;
 8000dc8:	e043      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dca:	4a89      	ldr	r2, [pc, #548]	; (8000ff0 <HAL_GPIO_Init+0x280>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d026      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
 8000dd0:	4a87      	ldr	r2, [pc, #540]	; (8000ff0 <HAL_GPIO_Init+0x280>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d806      	bhi.n	8000de4 <HAL_GPIO_Init+0x74>
 8000dd6:	4a87      	ldr	r2, [pc, #540]	; (8000ff4 <HAL_GPIO_Init+0x284>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d020      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
 8000ddc:	4a86      	ldr	r2, [pc, #536]	; (8000ff8 <HAL_GPIO_Init+0x288>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d01d      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
          break;
 8000de2:	e036      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000de4:	4a85      	ldr	r2, [pc, #532]	; (8000ffc <HAL_GPIO_Init+0x28c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d019      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
 8000dea:	4a85      	ldr	r2, [pc, #532]	; (8001000 <HAL_GPIO_Init+0x290>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d016      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
 8000df0:	4a84      	ldr	r2, [pc, #528]	; (8001004 <HAL_GPIO_Init+0x294>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0xae>
          break;
 8000df6:	e02c      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e028      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	3304      	adds	r3, #4
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	e023      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	3308      	adds	r3, #8
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e01e      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	330c      	adds	r3, #12
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e019      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e26:	2304      	movs	r3, #4
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e012      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	611a      	str	r2, [r3, #16]
          break;
 8000e3e:	e008      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e40:	2308      	movs	r3, #8
 8000e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	615a      	str	r2, [r3, #20]
          break;
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	2bff      	cmp	r3, #255	; 0xff
 8000e56:	d801      	bhi.n	8000e5c <HAL_GPIO_Init+0xec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	e001      	b.n	8000e60 <HAL_GPIO_Init+0xf0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3304      	adds	r3, #4
 8000e60:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2bff      	cmp	r3, #255	; 0xff
 8000e66:	d802      	bhi.n	8000e6e <HAL_GPIO_Init+0xfe>
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x104>
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	3b08      	subs	r3, #8
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	401a      	ands	r2, r3
 8000e86:	6a39      	ldr	r1, [r7, #32]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 8096 	beq.w	8000fce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <HAL_GPIO_Init+0x298>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <HAL_GPIO_Init+0x298>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b56      	ldr	r3, [pc, #344]	; (8001008 <HAL_GPIO_Init+0x298>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eba:	4a54      	ldr	r2, [pc, #336]	; (800100c <HAL_GPIO_Init+0x29c>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <HAL_GPIO_Init+0x2a0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x19e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_GPIO_Init+0x2a4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x19a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	; (8001018 <HAL_GPIO_Init+0x2a8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x196>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2ac>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x192>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x1a0>
 8000f02:	2304      	movs	r3, #4
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x1a0>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x1a0>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x1a0>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f20:	493a      	ldr	r1, [pc, #232]	; (800100c <HAL_GPIO_Init+0x29c>)
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4938      	ldr	r1, [pc, #224]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4933      	ldr	r1, [pc, #204]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	492e      	ldr	r1, [pc, #184]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	604b      	str	r3, [r1, #4]
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4929      	ldr	r1, [pc, #164]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	4924      	ldr	r1, [pc, #144]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	608b      	str	r3, [r1, #8]
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	491f      	ldr	r1, [pc, #124]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	491a      	ldr	r1, [pc, #104]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60cb      	str	r3, [r1, #12]
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4915      	ldr	r1, [pc, #84]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	fa22 f303 	lsr.w	r3, r2, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f47f aed0 	bne.w	8000d84 <HAL_GPIO_Init+0x14>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	372c      	adds	r7, #44	; 0x2c
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	10210000 	.word	0x10210000
 8000ff4:	10110000 	.word	0x10110000
 8000ff8:	10120000 	.word	0x10120000
 8000ffc:	10310000 	.word	0x10310000
 8001000:	10320000 	.word	0x10320000
 8001004:	10220000 	.word	0x10220000
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	40010800 	.word	0x40010800
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40011000 	.word	0x40011000
 800101c:	40011400 	.word	0x40011400
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f806 	bl	8001084 <HAL_GPIO_EXTI_Callback>
  }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e26c      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8087 	beq.w	80011c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b8:	4b92      	ldr	r3, [pc, #584]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d00c      	beq.n	80010de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c4:	4b8f      	ldr	r3, [pc, #572]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d112      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
 80010d0:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d10b      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010de:	4b89      	ldr	r3, [pc, #548]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d06c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x12c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d168      	bne.n	80011c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e246      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fe:	d106      	bne.n	800110e <HAL_RCC_OscConfig+0x76>
 8001100:	4b80      	ldr	r3, [pc, #512]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a7f      	ldr	r2, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e02e      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b7b      	ldr	r3, [pc, #492]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a7a      	ldr	r2, [pc, #488]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b78      	ldr	r3, [pc, #480]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a77      	ldr	r2, [pc, #476]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0xbc>
 800113a:	4b72      	ldr	r3, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a71      	ldr	r2, [pc, #452]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 8001154:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a6a      	ldr	r2, [pc, #424]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b68      	ldr	r3, [pc, #416]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a67      	ldr	r2, [pc, #412]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fc4c 	bl	8000a10 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fc48 	bl	8000a10 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1fa      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0xe4>
 800119a:	e014      	b.n	80011c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fc38 	bl	8000a10 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fc34 	bl	8000a10 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1e6      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x10c>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d063      	beq.n	800129a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d2:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011de:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_OscConfig+0x18c>
 80011ea:	4b46      	ldr	r3, [pc, #280]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b43      	ldr	r3, [pc, #268]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x176>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1ba      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4939      	ldr	r1, [pc, #228]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e03a      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x270>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fbed 	bl	8000a10 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fbe9 	bl	8000a10 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e19b      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4927      	ldr	r1, [pc, #156]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x270>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fbcc 	bl	8000a10 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fbc8 	bl	8000a10 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e17a      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d03a      	beq.n	800131c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d019      	beq.n	80012e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_RCC_OscConfig+0x274>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fbac 	bl	8000a10 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fba8 	bl	8000a10 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e15a      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fada 	bl	8001894 <RCC_Delay>
 80012e0:	e01c      	b.n	800131c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_RCC_OscConfig+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fb92 	bl	8000a10 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ee:	e00f      	b.n	8001310 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb8e 	bl	8000a10 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d908      	bls.n	8001310 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e140      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	42420000 	.word	0x42420000
 800130c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b9e      	ldr	r3, [pc, #632]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e9      	bne.n	80012f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a6 	beq.w	8001476 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b97      	ldr	r3, [pc, #604]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b94      	ldr	r3, [pc, #592]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a93      	ldr	r2, [pc, #588]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <HAL_RCC_OscConfig+0x4f8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <HAL_RCC_OscConfig+0x4f8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a8a      	ldr	r2, [pc, #552]	; (8001590 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb4f 	bl	8000a10 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fb4b 	bl	8000a10 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e0fd      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b81      	ldr	r3, [pc, #516]	; (8001590 <HAL_RCC_OscConfig+0x4f8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x312>
 800139c:	4b7b      	ldr	r3, [pc, #492]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a7a      	ldr	r2, [pc, #488]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	e02d      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a75      	ldr	r2, [pc, #468]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a72      	ldr	r2, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	e01c      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0x356>
 80013d4:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a69      	ldr	r2, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e00b      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a66      	ldr	r2, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6213      	str	r3, [r2, #32]
 80013fa:	4b64      	ldr	r3, [pc, #400]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4a63      	ldr	r2, [pc, #396]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	f023 0304 	bic.w	r3, r3, #4
 8001404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d015      	beq.n	800143a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff faff 	bl	8000a10 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fafb 	bl	8000a10 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	; 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0ab      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0ee      	beq.n	8001416 <HAL_RCC_OscConfig+0x37e>
 8001438:	e014      	b.n	8001464 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff fae9 	bl	8000a10 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001442:	f7ff fae5 	bl	8000a10 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001450:	4293      	cmp	r3, r2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e095      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ee      	bne.n	8001442 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d105      	bne.n	8001476 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a47      	ldr	r2, [pc, #284]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8081 	beq.w	8001582 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d061      	beq.n	8001550 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d146      	bne.n	8001522 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_OscConfig+0x4fc>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fab9 	bl	8000a10 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fab5 	bl	8000a10 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e067      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d108      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	492d      	ldr	r1, [pc, #180]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a19      	ldr	r1, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	430b      	orrs	r3, r1
 80014ee:	4927      	ldr	r1, [pc, #156]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x4fc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fa89 	bl	8000a10 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fa85 	bl	8000a10 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e037      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x46a>
 8001520:	e02f      	b.n	8001582 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_RCC_OscConfig+0x4fc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fa72 	bl	8000a10 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fa6e 	bl	8000a10 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e020      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x498>
 800154e:	e018      	b.n	8001582 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e013      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x4f4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	429a      	cmp	r2, r3
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	40007000 	.word	0x40007000
 8001594:	42420060 	.word	0x42420060

08001598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0d0      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d910      	bls.n	80015dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	4965      	ldr	r1, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001616:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d040      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d115      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e073      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e06b      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4936      	ldr	r1, [pc, #216]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff f9c2 	bl	8000a10 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff f9be 	bl	8000a10 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e053      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d210      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 0207 	bic.w	r2, r3, #7
 80016ce:	4922      	ldr	r1, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4601      	mov	r1, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	fa21 f303 	lsr.w	r3, r1, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1cc>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1d0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f920 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40022000 	.word	0x40022000
 800175c:	40021000 	.word	0x40021000
 8001760:	08002f24 	.word	0x08002f24
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	b490      	push	{r4, r7}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001774:	1d3c      	adds	r4, r7, #4
 8001776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_RCC_GetSysClockFreq+0xb4>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d002      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x40>
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_GetSysClockFreq+0x46>
 80017aa:	e02d      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ae:	623b      	str	r3, [r7, #32]
      break;
 80017b0:	e02d      	b.n	800180e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017be:	4413      	add	r3, r2
 80017c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	0c5b      	lsrs	r3, r3, #17
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017de:	4413      	add	r3, r2
 80017e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ea:	fb02 f203 	mul.w	r2, r2, r3
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e004      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	623b      	str	r3, [r7, #32]
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_RCC_GetSysClockFreq+0xbc>)
 800180a:	623b      	str	r3, [r7, #32]
      break;
 800180c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180e:	6a3b      	ldr	r3, [r7, #32]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bc90      	pop	{r4, r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	08002f08 	.word	0x08002f08
 8001820:	08002f18 	.word	0x08002f18
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_RCC_GetHCLKFreq+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001848:	f7ff fff2 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 800184c:	4601      	mov	r1, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	08002f34 	.word	0x08002f34

0800186c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001870:	f7ff ffde 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8001874:	4601      	mov	r1, r0
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	0adb      	lsrs	r3, r3, #11
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	08002f34 	.word	0x08002f34

08001894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <RCC_Delay+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <RCC_Delay+0x38>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b0:	bf00      	nop
  }
  while (Delay --);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <RCC_Delay+0x1c>
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e053      	b.n	800198a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d106      	bne.n	8001902 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7fe fde1 	bl	80004c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001918:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	ea42 0103 	orr.w	r1, r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	0c1a      	lsrs	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f002 0204 	and.w	r2, r2, #4
 8001968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69da      	ldr	r2, [r3, #28]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e01d      	b.n	80019e0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d106      	bne.n	80019be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7fe feeb 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3304      	adds	r3, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f000 f8c1 	bl	8001b58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_TIM_ConfigClockSource+0x18>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0a6      	b.n	8001b4e <HAL_TIM_ConfigClockSource+0x166>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b40      	cmp	r3, #64	; 0x40
 8001a36:	d067      	beq.n	8001b08 <HAL_TIM_ConfigClockSource+0x120>
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d80b      	bhi.n	8001a54 <HAL_TIM_ConfigClockSource+0x6c>
 8001a3c:	2b10      	cmp	r3, #16
 8001a3e:	d073      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x140>
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d802      	bhi.n	8001a4a <HAL_TIM_ConfigClockSource+0x62>
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d06f      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a48:	e078      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d06c      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x140>
 8001a4e:	2b30      	cmp	r3, #48	; 0x30
 8001a50:	d06a      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a52:	e073      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d00d      	beq.n	8001a74 <HAL_TIM_ConfigClockSource+0x8c>
 8001a58:	2b70      	cmp	r3, #112	; 0x70
 8001a5a:	d804      	bhi.n	8001a66 <HAL_TIM_ConfigClockSource+0x7e>
 8001a5c:	2b50      	cmp	r3, #80	; 0x50
 8001a5e:	d033      	beq.n	8001ac8 <HAL_TIM_ConfigClockSource+0xe0>
 8001a60:	2b60      	cmp	r3, #96	; 0x60
 8001a62:	d041      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a64:	e06a      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6a:	d066      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0x152>
 8001a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a70:	d017      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a72:	e063      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6899      	ldr	r1, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f000 f941 	bl	8001d0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	609a      	str	r2, [r3, #8]
      break;
 8001aa0:	e04c      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f000 f92a 	bl	8001d0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac4:	609a      	str	r2, [r3, #8]
      break;
 8001ac6:	e039      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f000 f8a1 	bl	8001c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2150      	movs	r1, #80	; 0x50
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f8f8 	bl	8001cd6 <TIM_ITRx_SetConfig>
      break;
 8001ae6:	e029      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f000 f8bf 	bl	8001c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2160      	movs	r1, #96	; 0x60
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f8e8 	bl	8001cd6 <TIM_ITRx_SetConfig>
      break;
 8001b06:	e019      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f000 f881 	bl	8001c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f8d8 	bl	8001cd6 <TIM_ITRx_SetConfig>
      break;
 8001b26:	e009      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 f8cf 	bl	8001cd6 <TIM_ITRx_SetConfig>
      break;
 8001b38:	e000      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <TIM_Base_SetConfig+0xb8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00b      	beq.n	8001b88 <TIM_Base_SetConfig+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	d007      	beq.n	8001b88 <TIM_Base_SetConfig+0x30>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <TIM_Base_SetConfig+0xbc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <TIM_Base_SetConfig+0x30>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d108      	bne.n	8001b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <TIM_Base_SetConfig+0xb8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00b      	beq.n	8001bba <TIM_Base_SetConfig+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d007      	beq.n	8001bba <TIM_Base_SetConfig+0x62>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <TIM_Base_SetConfig+0xbc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d003      	beq.n	8001bba <TIM_Base_SetConfig+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <TIM_Base_SetConfig+0xb8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d103      	bne.n	8001c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	615a      	str	r2, [r3, #20]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40012c00 	.word	0x40012c00
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800

08001c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f023 0201 	bic.w	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f023 030a 	bic.w	r3, r3, #10
 8001c58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	621a      	str	r2, [r3, #32]
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f023 0210 	bic.w	r2, r3, #16
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	031b      	lsls	r3, r3, #12
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	621a      	str	r2, [r3, #32]
}
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f043 0307 	orr.w	r3, r3, #7
 8001cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b087      	sub	sp, #28
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	021a      	lsls	r2, r3, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	609a      	str	r2, [r3, #8]
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e032      	b.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d98:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e03f      	b.n	8001e62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fd46 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 faef 	bl	80023f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	4613      	mov	r3, r2
 8001e76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d130      	bne.n	8001ee6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Transmit_IT+0x26>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e029      	b.n	8001ee8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Transmit_IT+0x38>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e022      	b.n	8001ee8 <HAL_UART_Transmit_IT+0x7e>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	88fa      	ldrh	r2, [r7, #6]
 8001eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2221      	movs	r2, #33	; 0x21
 8001ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
  }
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d140      	bne.n	8001f8e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_UART_Receive_IT+0x26>
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e039      	b.n	8001f90 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_UART_Receive_IT+0x38>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e032      	b.n	8001f90 <HAL_UART_Receive_IT+0x9e>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2222      	movs	r2, #34	; 0x22
 8001f4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f68:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
  }
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_UART_IRQHandler+0x52>
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f984 	bl	80022f4 <UART_Receive_IT>
      return;
 8001fec:	e0cc      	b.n	8002188 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ab 	beq.w	800214c <HAL_UART_IRQHandler+0x1b0>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_UART_IRQHandler+0x70>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80a0 	beq.w	800214c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_UART_IRQHandler+0x90>
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_UART_IRQHandler+0xb0>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_UART_IRQHandler+0xd0>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	f043 0204 	orr.w	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_UART_IRQHandler+0xf0>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	f043 0208 	orr.w	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d078      	beq.n	8002186 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_UART_IRQHandler+0x112>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f923 	bl	80022f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <HAL_UART_IRQHandler+0x13a>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d031      	beq.n	800213a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f86e 	bl	80021b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d023      	beq.n	8002132 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d013      	beq.n	800212a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <HAL_UART_IRQHandler+0x1f4>)
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fdb8 	bl	8000c84 <HAL_DMA_Abort_IT>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d016      	beq.n	8002148 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002124:	4610      	mov	r0, r2
 8002126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002128:	e00e      	b.n	8002148 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f83b 	bl	80021a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	e00a      	b.n	8002148 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f837 	bl	80021a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002138:	e006      	b.n	8002148 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f833 	bl	80021a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002146:	e01e      	b.n	8002186 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002148:	bf00      	nop
    return;
 800214a:	e01c      	b.n	8002186 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_UART_IRQHandler+0x1cc>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f85a 	bl	800221a <UART_Transmit_IT>
    return;
 8002166:	e00f      	b.n	8002188 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_UART_IRQHandler+0x1ec>
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f8a1 	bl	80022c4 <UART_EndTransmit_IT>
    return;
 8002182:	bf00      	nop
 8002184:	e000      	b.n	8002188 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002186:	bf00      	nop
  }
}
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	080021f3 	.word	0x080021f3

08002194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff ffca 	bl	80021a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b21      	cmp	r3, #33	; 0x21
 800222c:	d144      	bne.n	80022b8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	d11a      	bne.n	800226e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800224c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	1c9a      	adds	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	621a      	str	r2, [r3, #32]
 8002260:	e00e      	b.n	8002280 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	621a      	str	r2, [r3, #32]
 800226c:	e008      	b.n	8002280 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6211      	str	r1, [r2, #32]
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29b      	uxth	r3, r3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4619      	mov	r1, r3
 800228e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10f      	bne.n	80022b4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff55 	bl	8002194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b22      	cmp	r3, #34	; 0x22
 8002306:	d171      	bne.n	80023ec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002310:	d123      	bne.n	800235a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10e      	bne.n	800233e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	b29b      	uxth	r3, r3
 8002328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	1c9a      	adds	r2, r3, #2
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
 800233c:	e029      	b.n	8002392 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	b29b      	uxth	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
 8002358:	e01b      	b.n	8002392 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6858      	ldr	r0, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	1c59      	adds	r1, r3, #1
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6291      	str	r1, [r2, #40]	; 0x28
 8002372:	b2c2      	uxtb	r2, r0
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e00c      	b.n	8002392 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	1c58      	adds	r0, r3, #1
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	6288      	str	r0, [r1, #40]	; 0x28
 800238a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29b      	uxth	r3, r3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4619      	mov	r1, r3
 80023a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d120      	bne.n	80023e8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0220 	bic.w	r2, r2, #32
 80023b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe f81e 	bl	8000420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e002      	b.n	80023ee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002432:	f023 030c 	bic.w	r3, r3, #12
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	430b      	orrs	r3, r1
 800243e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <UART_SetConfig+0x1ac>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d14e      	bne.n	80024fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002460:	f7ff fa04 	bl	800186c <HAL_RCC_GetPCLK2Freq>
 8002464:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009a      	lsls	r2, r3, #2
 8002470:	441a      	add	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	4a4a      	ldr	r2, [pc, #296]	; (80025a8 <UART_SetConfig+0x1b0>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	0119      	lsls	r1, r3, #4
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009a      	lsls	r2, r3, #2
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fbb2 f2f3 	udiv	r2, r2, r3
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <UART_SetConfig+0x1b0>)
 800249e:	fba3 0302 	umull	r0, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2064      	movs	r0, #100	; 0x64
 80024a6:	fb00 f303 	mul.w	r3, r0, r3
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	3332      	adds	r3, #50	; 0x32
 80024b0:	4a3d      	ldr	r2, [pc, #244]	; (80025a8 <UART_SetConfig+0x1b0>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024bc:	4419      	add	r1, r3
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009a      	lsls	r2, r3, #2
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <UART_SetConfig+0x1b0>)
 80024d6:	fba3 0302 	umull	r0, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2064      	movs	r0, #100	; 0x64
 80024de:	fb00 f303 	mul.w	r3, r0, r3
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	3332      	adds	r3, #50	; 0x32
 80024e8:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <UART_SetConfig+0x1b0>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	f003 020f 	and.w	r2, r3, #15
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	440a      	add	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80024fc:	e04d      	b.n	800259a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80024fe:	f7ff f9a1 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002502:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009a      	lsls	r2, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <UART_SetConfig+0x1b0>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	0119      	lsls	r1, r3, #4
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	441a      	add	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	fbb2 f2f3 	udiv	r2, r2, r3
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <UART_SetConfig+0x1b0>)
 800253c:	fba3 0302 	umull	r0, r3, r3, r2
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	2064      	movs	r0, #100	; 0x64
 8002544:	fb00 f303 	mul.w	r3, r0, r3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	3332      	adds	r3, #50	; 0x32
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <UART_SetConfig+0x1b0>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255a:	4419      	add	r1, r3
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	441a      	add	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <UART_SetConfig+0x1b0>)
 8002574:	fba3 0302 	umull	r0, r3, r3, r2
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	2064      	movs	r0, #100	; 0x64
 800257c:	fb00 f303 	mul.w	r3, r0, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	3332      	adds	r3, #50	; 0x32
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <UART_SetConfig+0x1b0>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	f003 020f 	and.w	r2, r3, #15
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	440a      	add	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40013800 	.word	0x40013800
 80025a8:	51eb851f 	.word	0x51eb851f

080025ac <__errno>:
 80025ac:	4b01      	ldr	r3, [pc, #4]	; (80025b4 <__errno+0x8>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000000c 	.word	0x2000000c

080025b8 <__libc_init_array>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	2500      	movs	r5, #0
 80025bc:	4e0c      	ldr	r6, [pc, #48]	; (80025f0 <__libc_init_array+0x38>)
 80025be:	4c0d      	ldr	r4, [pc, #52]	; (80025f4 <__libc_init_array+0x3c>)
 80025c0:	1ba4      	subs	r4, r4, r6
 80025c2:	10a4      	asrs	r4, r4, #2
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d109      	bne.n	80025dc <__libc_init_array+0x24>
 80025c8:	f000 fc44 	bl	8002e54 <_init>
 80025cc:	2500      	movs	r5, #0
 80025ce:	4e0a      	ldr	r6, [pc, #40]	; (80025f8 <__libc_init_array+0x40>)
 80025d0:	4c0a      	ldr	r4, [pc, #40]	; (80025fc <__libc_init_array+0x44>)
 80025d2:	1ba4      	subs	r4, r4, r6
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	42a5      	cmp	r5, r4
 80025d8:	d105      	bne.n	80025e6 <__libc_init_array+0x2e>
 80025da:	bd70      	pop	{r4, r5, r6, pc}
 80025dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025e0:	4798      	blx	r3
 80025e2:	3501      	adds	r5, #1
 80025e4:	e7ee      	b.n	80025c4 <__libc_init_array+0xc>
 80025e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ea:	4798      	blx	r3
 80025ec:	3501      	adds	r5, #1
 80025ee:	e7f2      	b.n	80025d6 <__libc_init_array+0x1e>
 80025f0:	08002f70 	.word	0x08002f70
 80025f4:	08002f70 	.word	0x08002f70
 80025f8:	08002f70 	.word	0x08002f70
 80025fc:	08002f74 	.word	0x08002f74

08002600 <memchr>:
 8002600:	b510      	push	{r4, lr}
 8002602:	b2c9      	uxtb	r1, r1
 8002604:	4402      	add	r2, r0
 8002606:	4290      	cmp	r0, r2
 8002608:	4603      	mov	r3, r0
 800260a:	d101      	bne.n	8002610 <memchr+0x10>
 800260c:	2300      	movs	r3, #0
 800260e:	e003      	b.n	8002618 <memchr+0x18>
 8002610:	781c      	ldrb	r4, [r3, #0]
 8002612:	3001      	adds	r0, #1
 8002614:	428c      	cmp	r4, r1
 8002616:	d1f6      	bne.n	8002606 <memchr+0x6>
 8002618:	4618      	mov	r0, r3
 800261a:	bd10      	pop	{r4, pc}

0800261c <memcmp>:
 800261c:	b530      	push	{r4, r5, lr}
 800261e:	2400      	movs	r4, #0
 8002620:	42a2      	cmp	r2, r4
 8002622:	d101      	bne.n	8002628 <memcmp+0xc>
 8002624:	2000      	movs	r0, #0
 8002626:	e007      	b.n	8002638 <memcmp+0x1c>
 8002628:	5d03      	ldrb	r3, [r0, r4]
 800262a:	3401      	adds	r4, #1
 800262c:	190d      	adds	r5, r1, r4
 800262e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8002632:	42ab      	cmp	r3, r5
 8002634:	d0f4      	beq.n	8002620 <memcmp+0x4>
 8002636:	1b58      	subs	r0, r3, r5
 8002638:	bd30      	pop	{r4, r5, pc}

0800263a <memcpy>:
 800263a:	b510      	push	{r4, lr}
 800263c:	1e43      	subs	r3, r0, #1
 800263e:	440a      	add	r2, r1
 8002640:	4291      	cmp	r1, r2
 8002642:	d100      	bne.n	8002646 <memcpy+0xc>
 8002644:	bd10      	pop	{r4, pc}
 8002646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800264a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800264e:	e7f7      	b.n	8002640 <memcpy+0x6>

08002650 <memset>:
 8002650:	4603      	mov	r3, r0
 8002652:	4402      	add	r2, r0
 8002654:	4293      	cmp	r3, r2
 8002656:	d100      	bne.n	800265a <memset+0xa>
 8002658:	4770      	bx	lr
 800265a:	f803 1b01 	strb.w	r1, [r3], #1
 800265e:	e7f9      	b.n	8002654 <memset+0x4>

08002660 <siprintf>:
 8002660:	b40e      	push	{r1, r2, r3}
 8002662:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002666:	b500      	push	{lr}
 8002668:	b09c      	sub	sp, #112	; 0x70
 800266a:	ab1d      	add	r3, sp, #116	; 0x74
 800266c:	9002      	str	r0, [sp, #8]
 800266e:	9006      	str	r0, [sp, #24]
 8002670:	9107      	str	r1, [sp, #28]
 8002672:	9104      	str	r1, [sp, #16]
 8002674:	4808      	ldr	r0, [pc, #32]	; (8002698 <siprintf+0x38>)
 8002676:	4909      	ldr	r1, [pc, #36]	; (800269c <siprintf+0x3c>)
 8002678:	f853 2b04 	ldr.w	r2, [r3], #4
 800267c:	9105      	str	r1, [sp, #20]
 800267e:	6800      	ldr	r0, [r0, #0]
 8002680:	a902      	add	r1, sp, #8
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	f000 f866 	bl	8002754 <_svfiprintf_r>
 8002688:	2200      	movs	r2, #0
 800268a:	9b02      	ldr	r3, [sp, #8]
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	b01c      	add	sp, #112	; 0x70
 8002690:	f85d eb04 	ldr.w	lr, [sp], #4
 8002694:	b003      	add	sp, #12
 8002696:	4770      	bx	lr
 8002698:	2000000c 	.word	0x2000000c
 800269c:	ffff0208 	.word	0xffff0208

080026a0 <__ssputs_r>:
 80026a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	688e      	ldr	r6, [r1, #8]
 80026a6:	4682      	mov	sl, r0
 80026a8:	429e      	cmp	r6, r3
 80026aa:	460c      	mov	r4, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	4699      	mov	r9, r3
 80026b0:	d837      	bhi.n	8002722 <__ssputs_r+0x82>
 80026b2:	898a      	ldrh	r2, [r1, #12]
 80026b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026b8:	d031      	beq.n	800271e <__ssputs_r+0x7e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	6825      	ldr	r5, [r4, #0]
 80026be:	6909      	ldr	r1, [r1, #16]
 80026c0:	1a6f      	subs	r7, r5, r1
 80026c2:	6965      	ldr	r5, [r4, #20]
 80026c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80026cc:	f109 0301 	add.w	r3, r9, #1
 80026d0:	443b      	add	r3, r7
 80026d2:	429d      	cmp	r5, r3
 80026d4:	bf38      	it	cc
 80026d6:	461d      	movcc	r5, r3
 80026d8:	0553      	lsls	r3, r2, #21
 80026da:	d530      	bpl.n	800273e <__ssputs_r+0x9e>
 80026dc:	4629      	mov	r1, r5
 80026de:	f000 fb1f 	bl	8002d20 <_malloc_r>
 80026e2:	4606      	mov	r6, r0
 80026e4:	b950      	cbnz	r0, 80026fc <__ssputs_r+0x5c>
 80026e6:	230c      	movs	r3, #12
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f8ca 3000 	str.w	r3, [sl]
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	81a3      	strh	r3, [r4, #12]
 80026f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026fc:	463a      	mov	r2, r7
 80026fe:	6921      	ldr	r1, [r4, #16]
 8002700:	f7ff ff9b 	bl	800263a <memcpy>
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800270a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270e:	81a3      	strh	r3, [r4, #12]
 8002710:	6126      	str	r6, [r4, #16]
 8002712:	443e      	add	r6, r7
 8002714:	6026      	str	r6, [r4, #0]
 8002716:	464e      	mov	r6, r9
 8002718:	6165      	str	r5, [r4, #20]
 800271a:	1bed      	subs	r5, r5, r7
 800271c:	60a5      	str	r5, [r4, #8]
 800271e:	454e      	cmp	r6, r9
 8002720:	d900      	bls.n	8002724 <__ssputs_r+0x84>
 8002722:	464e      	mov	r6, r9
 8002724:	4632      	mov	r2, r6
 8002726:	4641      	mov	r1, r8
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	f000 fa93 	bl	8002c54 <memmove>
 800272e:	68a3      	ldr	r3, [r4, #8]
 8002730:	2000      	movs	r0, #0
 8002732:	1b9b      	subs	r3, r3, r6
 8002734:	60a3      	str	r3, [r4, #8]
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	441e      	add	r6, r3
 800273a:	6026      	str	r6, [r4, #0]
 800273c:	e7dc      	b.n	80026f8 <__ssputs_r+0x58>
 800273e:	462a      	mov	r2, r5
 8002740:	f000 fb48 	bl	8002dd4 <_realloc_r>
 8002744:	4606      	mov	r6, r0
 8002746:	2800      	cmp	r0, #0
 8002748:	d1e2      	bne.n	8002710 <__ssputs_r+0x70>
 800274a:	6921      	ldr	r1, [r4, #16]
 800274c:	4650      	mov	r0, sl
 800274e:	f000 fa9b 	bl	8002c88 <_free_r>
 8002752:	e7c8      	b.n	80026e6 <__ssputs_r+0x46>

08002754 <_svfiprintf_r>:
 8002754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002758:	461d      	mov	r5, r3
 800275a:	898b      	ldrh	r3, [r1, #12]
 800275c:	b09d      	sub	sp, #116	; 0x74
 800275e:	061f      	lsls	r7, r3, #24
 8002760:	4680      	mov	r8, r0
 8002762:	460c      	mov	r4, r1
 8002764:	4616      	mov	r6, r2
 8002766:	d50f      	bpl.n	8002788 <_svfiprintf_r+0x34>
 8002768:	690b      	ldr	r3, [r1, #16]
 800276a:	b96b      	cbnz	r3, 8002788 <_svfiprintf_r+0x34>
 800276c:	2140      	movs	r1, #64	; 0x40
 800276e:	f000 fad7 	bl	8002d20 <_malloc_r>
 8002772:	6020      	str	r0, [r4, #0]
 8002774:	6120      	str	r0, [r4, #16]
 8002776:	b928      	cbnz	r0, 8002784 <_svfiprintf_r+0x30>
 8002778:	230c      	movs	r3, #12
 800277a:	f8c8 3000 	str.w	r3, [r8]
 800277e:	f04f 30ff 	mov.w	r0, #4294967295
 8002782:	e0c8      	b.n	8002916 <_svfiprintf_r+0x1c2>
 8002784:	2340      	movs	r3, #64	; 0x40
 8002786:	6163      	str	r3, [r4, #20]
 8002788:	2300      	movs	r3, #0
 800278a:	9309      	str	r3, [sp, #36]	; 0x24
 800278c:	2320      	movs	r3, #32
 800278e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002792:	2330      	movs	r3, #48	; 0x30
 8002794:	f04f 0b01 	mov.w	fp, #1
 8002798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800279c:	9503      	str	r5, [sp, #12]
 800279e:	4637      	mov	r7, r6
 80027a0:	463d      	mov	r5, r7
 80027a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027a6:	b10b      	cbz	r3, 80027ac <_svfiprintf_r+0x58>
 80027a8:	2b25      	cmp	r3, #37	; 0x25
 80027aa:	d13e      	bne.n	800282a <_svfiprintf_r+0xd6>
 80027ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80027b0:	d00b      	beq.n	80027ca <_svfiprintf_r+0x76>
 80027b2:	4653      	mov	r3, sl
 80027b4:	4632      	mov	r2, r6
 80027b6:	4621      	mov	r1, r4
 80027b8:	4640      	mov	r0, r8
 80027ba:	f7ff ff71 	bl	80026a0 <__ssputs_r>
 80027be:	3001      	adds	r0, #1
 80027c0:	f000 80a4 	beq.w	800290c <_svfiprintf_r+0x1b8>
 80027c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027c6:	4453      	add	r3, sl
 80027c8:	9309      	str	r3, [sp, #36]	; 0x24
 80027ca:	783b      	ldrb	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 809d 	beq.w	800290c <_svfiprintf_r+0x1b8>
 80027d2:	2300      	movs	r3, #0
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027dc:	9304      	str	r3, [sp, #16]
 80027de:	9307      	str	r3, [sp, #28]
 80027e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027e4:	931a      	str	r3, [sp, #104]	; 0x68
 80027e6:	462f      	mov	r7, r5
 80027e8:	2205      	movs	r2, #5
 80027ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80027ee:	4850      	ldr	r0, [pc, #320]	; (8002930 <_svfiprintf_r+0x1dc>)
 80027f0:	f7ff ff06 	bl	8002600 <memchr>
 80027f4:	9b04      	ldr	r3, [sp, #16]
 80027f6:	b9d0      	cbnz	r0, 800282e <_svfiprintf_r+0xda>
 80027f8:	06d9      	lsls	r1, r3, #27
 80027fa:	bf44      	itt	mi
 80027fc:	2220      	movmi	r2, #32
 80027fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002802:	071a      	lsls	r2, r3, #28
 8002804:	bf44      	itt	mi
 8002806:	222b      	movmi	r2, #43	; 0x2b
 8002808:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800280c:	782a      	ldrb	r2, [r5, #0]
 800280e:	2a2a      	cmp	r2, #42	; 0x2a
 8002810:	d015      	beq.n	800283e <_svfiprintf_r+0xea>
 8002812:	462f      	mov	r7, r5
 8002814:	2000      	movs	r0, #0
 8002816:	250a      	movs	r5, #10
 8002818:	9a07      	ldr	r2, [sp, #28]
 800281a:	4639      	mov	r1, r7
 800281c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002820:	3b30      	subs	r3, #48	; 0x30
 8002822:	2b09      	cmp	r3, #9
 8002824:	d94d      	bls.n	80028c2 <_svfiprintf_r+0x16e>
 8002826:	b1b8      	cbz	r0, 8002858 <_svfiprintf_r+0x104>
 8002828:	e00f      	b.n	800284a <_svfiprintf_r+0xf6>
 800282a:	462f      	mov	r7, r5
 800282c:	e7b8      	b.n	80027a0 <_svfiprintf_r+0x4c>
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <_svfiprintf_r+0x1dc>)
 8002830:	463d      	mov	r5, r7
 8002832:	1a80      	subs	r0, r0, r2
 8002834:	fa0b f000 	lsl.w	r0, fp, r0
 8002838:	4318      	orrs	r0, r3
 800283a:	9004      	str	r0, [sp, #16]
 800283c:	e7d3      	b.n	80027e6 <_svfiprintf_r+0x92>
 800283e:	9a03      	ldr	r2, [sp, #12]
 8002840:	1d11      	adds	r1, r2, #4
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	9103      	str	r1, [sp, #12]
 8002846:	2a00      	cmp	r2, #0
 8002848:	db01      	blt.n	800284e <_svfiprintf_r+0xfa>
 800284a:	9207      	str	r2, [sp, #28]
 800284c:	e004      	b.n	8002858 <_svfiprintf_r+0x104>
 800284e:	4252      	negs	r2, r2
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	9207      	str	r2, [sp, #28]
 8002856:	9304      	str	r3, [sp, #16]
 8002858:	783b      	ldrb	r3, [r7, #0]
 800285a:	2b2e      	cmp	r3, #46	; 0x2e
 800285c:	d10c      	bne.n	8002878 <_svfiprintf_r+0x124>
 800285e:	787b      	ldrb	r3, [r7, #1]
 8002860:	2b2a      	cmp	r3, #42	; 0x2a
 8002862:	d133      	bne.n	80028cc <_svfiprintf_r+0x178>
 8002864:	9b03      	ldr	r3, [sp, #12]
 8002866:	3702      	adds	r7, #2
 8002868:	1d1a      	adds	r2, r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	9203      	str	r2, [sp, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	bfb8      	it	lt
 8002872:	f04f 33ff 	movlt.w	r3, #4294967295
 8002876:	9305      	str	r3, [sp, #20]
 8002878:	4d2e      	ldr	r5, [pc, #184]	; (8002934 <_svfiprintf_r+0x1e0>)
 800287a:	2203      	movs	r2, #3
 800287c:	7839      	ldrb	r1, [r7, #0]
 800287e:	4628      	mov	r0, r5
 8002880:	f7ff febe 	bl	8002600 <memchr>
 8002884:	b138      	cbz	r0, 8002896 <_svfiprintf_r+0x142>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	1b40      	subs	r0, r0, r5
 800288a:	fa03 f000 	lsl.w	r0, r3, r0
 800288e:	9b04      	ldr	r3, [sp, #16]
 8002890:	3701      	adds	r7, #1
 8002892:	4303      	orrs	r3, r0
 8002894:	9304      	str	r3, [sp, #16]
 8002896:	7839      	ldrb	r1, [r7, #0]
 8002898:	2206      	movs	r2, #6
 800289a:	4827      	ldr	r0, [pc, #156]	; (8002938 <_svfiprintf_r+0x1e4>)
 800289c:	1c7e      	adds	r6, r7, #1
 800289e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028a2:	f7ff fead 	bl	8002600 <memchr>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d038      	beq.n	800291c <_svfiprintf_r+0x1c8>
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <_svfiprintf_r+0x1e8>)
 80028ac:	bb13      	cbnz	r3, 80028f4 <_svfiprintf_r+0x1a0>
 80028ae:	9b03      	ldr	r3, [sp, #12]
 80028b0:	3307      	adds	r3, #7
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	3308      	adds	r3, #8
 80028b8:	9303      	str	r3, [sp, #12]
 80028ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028bc:	444b      	add	r3, r9
 80028be:	9309      	str	r3, [sp, #36]	; 0x24
 80028c0:	e76d      	b.n	800279e <_svfiprintf_r+0x4a>
 80028c2:	fb05 3202 	mla	r2, r5, r2, r3
 80028c6:	2001      	movs	r0, #1
 80028c8:	460f      	mov	r7, r1
 80028ca:	e7a6      	b.n	800281a <_svfiprintf_r+0xc6>
 80028cc:	2300      	movs	r3, #0
 80028ce:	250a      	movs	r5, #10
 80028d0:	4619      	mov	r1, r3
 80028d2:	3701      	adds	r7, #1
 80028d4:	9305      	str	r3, [sp, #20]
 80028d6:	4638      	mov	r0, r7
 80028d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028dc:	3a30      	subs	r2, #48	; 0x30
 80028de:	2a09      	cmp	r2, #9
 80028e0:	d903      	bls.n	80028ea <_svfiprintf_r+0x196>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0c8      	beq.n	8002878 <_svfiprintf_r+0x124>
 80028e6:	9105      	str	r1, [sp, #20]
 80028e8:	e7c6      	b.n	8002878 <_svfiprintf_r+0x124>
 80028ea:	fb05 2101 	mla	r1, r5, r1, r2
 80028ee:	2301      	movs	r3, #1
 80028f0:	4607      	mov	r7, r0
 80028f2:	e7f0      	b.n	80028d6 <_svfiprintf_r+0x182>
 80028f4:	ab03      	add	r3, sp, #12
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4622      	mov	r2, r4
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_svfiprintf_r+0x1ec>)
 80028fc:	a904      	add	r1, sp, #16
 80028fe:	4640      	mov	r0, r8
 8002900:	f3af 8000 	nop.w
 8002904:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002908:	4681      	mov	r9, r0
 800290a:	d1d6      	bne.n	80028ba <_svfiprintf_r+0x166>
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	065b      	lsls	r3, r3, #25
 8002910:	f53f af35 	bmi.w	800277e <_svfiprintf_r+0x2a>
 8002914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002916:	b01d      	add	sp, #116	; 0x74
 8002918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291c:	ab03      	add	r3, sp, #12
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4622      	mov	r2, r4
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_svfiprintf_r+0x1ec>)
 8002924:	a904      	add	r1, sp, #16
 8002926:	4640      	mov	r0, r8
 8002928:	f000 f882 	bl	8002a30 <_printf_i>
 800292c:	e7ea      	b.n	8002904 <_svfiprintf_r+0x1b0>
 800292e:	bf00      	nop
 8002930:	08002f3c 	.word	0x08002f3c
 8002934:	08002f42 	.word	0x08002f42
 8002938:	08002f46 	.word	0x08002f46
 800293c:	00000000 	.word	0x00000000
 8002940:	080026a1 	.word	0x080026a1

08002944 <_printf_common>:
 8002944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002948:	4691      	mov	r9, r2
 800294a:	461f      	mov	r7, r3
 800294c:	688a      	ldr	r2, [r1, #8]
 800294e:	690b      	ldr	r3, [r1, #16]
 8002950:	4606      	mov	r6, r0
 8002952:	4293      	cmp	r3, r2
 8002954:	bfb8      	it	lt
 8002956:	4613      	movlt	r3, r2
 8002958:	f8c9 3000 	str.w	r3, [r9]
 800295c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002960:	460c      	mov	r4, r1
 8002962:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002966:	b112      	cbz	r2, 800296e <_printf_common+0x2a>
 8002968:	3301      	adds	r3, #1
 800296a:	f8c9 3000 	str.w	r3, [r9]
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	0699      	lsls	r1, r3, #26
 8002972:	bf42      	ittt	mi
 8002974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002978:	3302      	addmi	r3, #2
 800297a:	f8c9 3000 	strmi.w	r3, [r9]
 800297e:	6825      	ldr	r5, [r4, #0]
 8002980:	f015 0506 	ands.w	r5, r5, #6
 8002984:	d107      	bne.n	8002996 <_printf_common+0x52>
 8002986:	f104 0a19 	add.w	sl, r4, #25
 800298a:	68e3      	ldr	r3, [r4, #12]
 800298c:	f8d9 2000 	ldr.w	r2, [r9]
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	42ab      	cmp	r3, r5
 8002994:	dc29      	bgt.n	80029ea <_printf_common+0xa6>
 8002996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	3300      	adds	r3, #0
 800299e:	bf18      	it	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	0692      	lsls	r2, r2, #26
 80029a4:	d42e      	bmi.n	8002a04 <_printf_common+0xc0>
 80029a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029aa:	4639      	mov	r1, r7
 80029ac:	4630      	mov	r0, r6
 80029ae:	47c0      	blx	r8
 80029b0:	3001      	adds	r0, #1
 80029b2:	d021      	beq.n	80029f8 <_printf_common+0xb4>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	68e5      	ldr	r5, [r4, #12]
 80029b8:	f003 0306 	and.w	r3, r3, #6
 80029bc:	2b04      	cmp	r3, #4
 80029be:	bf18      	it	ne
 80029c0:	2500      	movne	r5, #0
 80029c2:	f8d9 2000 	ldr.w	r2, [r9]
 80029c6:	f04f 0900 	mov.w	r9, #0
 80029ca:	bf08      	it	eq
 80029cc:	1aad      	subeq	r5, r5, r2
 80029ce:	68a3      	ldr	r3, [r4, #8]
 80029d0:	6922      	ldr	r2, [r4, #16]
 80029d2:	bf08      	it	eq
 80029d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029d8:	4293      	cmp	r3, r2
 80029da:	bfc4      	itt	gt
 80029dc:	1a9b      	subgt	r3, r3, r2
 80029de:	18ed      	addgt	r5, r5, r3
 80029e0:	341a      	adds	r4, #26
 80029e2:	454d      	cmp	r5, r9
 80029e4:	d11a      	bne.n	8002a1c <_printf_common+0xd8>
 80029e6:	2000      	movs	r0, #0
 80029e8:	e008      	b.n	80029fc <_printf_common+0xb8>
 80029ea:	2301      	movs	r3, #1
 80029ec:	4652      	mov	r2, sl
 80029ee:	4639      	mov	r1, r7
 80029f0:	4630      	mov	r0, r6
 80029f2:	47c0      	blx	r8
 80029f4:	3001      	adds	r0, #1
 80029f6:	d103      	bne.n	8002a00 <_printf_common+0xbc>
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a00:	3501      	adds	r5, #1
 8002a02:	e7c2      	b.n	800298a <_printf_common+0x46>
 8002a04:	2030      	movs	r0, #48	; 0x30
 8002a06:	18e1      	adds	r1, r4, r3
 8002a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a12:	4422      	add	r2, r4
 8002a14:	3302      	adds	r3, #2
 8002a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a1a:	e7c4      	b.n	80029a6 <_printf_common+0x62>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	4622      	mov	r2, r4
 8002a20:	4639      	mov	r1, r7
 8002a22:	4630      	mov	r0, r6
 8002a24:	47c0      	blx	r8
 8002a26:	3001      	adds	r0, #1
 8002a28:	d0e6      	beq.n	80029f8 <_printf_common+0xb4>
 8002a2a:	f109 0901 	add.w	r9, r9, #1
 8002a2e:	e7d8      	b.n	80029e2 <_printf_common+0x9e>

08002a30 <_printf_i>:
 8002a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a38:	460c      	mov	r4, r1
 8002a3a:	7e09      	ldrb	r1, [r1, #24]
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	296e      	cmp	r1, #110	; 0x6e
 8002a40:	4617      	mov	r7, r2
 8002a42:	4606      	mov	r6, r0
 8002a44:	4698      	mov	r8, r3
 8002a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a48:	f000 80b3 	beq.w	8002bb2 <_printf_i+0x182>
 8002a4c:	d822      	bhi.n	8002a94 <_printf_i+0x64>
 8002a4e:	2963      	cmp	r1, #99	; 0x63
 8002a50:	d036      	beq.n	8002ac0 <_printf_i+0x90>
 8002a52:	d80a      	bhi.n	8002a6a <_printf_i+0x3a>
 8002a54:	2900      	cmp	r1, #0
 8002a56:	f000 80b9 	beq.w	8002bcc <_printf_i+0x19c>
 8002a5a:	2958      	cmp	r1, #88	; 0x58
 8002a5c:	f000 8083 	beq.w	8002b66 <_printf_i+0x136>
 8002a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a68:	e032      	b.n	8002ad0 <_printf_i+0xa0>
 8002a6a:	2964      	cmp	r1, #100	; 0x64
 8002a6c:	d001      	beq.n	8002a72 <_printf_i+0x42>
 8002a6e:	2969      	cmp	r1, #105	; 0x69
 8002a70:	d1f6      	bne.n	8002a60 <_printf_i+0x30>
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	0605      	lsls	r5, r0, #24
 8002a78:	f103 0104 	add.w	r1, r3, #4
 8002a7c:	d52a      	bpl.n	8002ad4 <_printf_i+0xa4>
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da03      	bge.n	8002a8e <_printf_i+0x5e>
 8002a86:	222d      	movs	r2, #45	; 0x2d
 8002a88:	425b      	negs	r3, r3
 8002a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a8e:	486f      	ldr	r0, [pc, #444]	; (8002c4c <_printf_i+0x21c>)
 8002a90:	220a      	movs	r2, #10
 8002a92:	e039      	b.n	8002b08 <_printf_i+0xd8>
 8002a94:	2973      	cmp	r1, #115	; 0x73
 8002a96:	f000 809d 	beq.w	8002bd4 <_printf_i+0x1a4>
 8002a9a:	d808      	bhi.n	8002aae <_printf_i+0x7e>
 8002a9c:	296f      	cmp	r1, #111	; 0x6f
 8002a9e:	d020      	beq.n	8002ae2 <_printf_i+0xb2>
 8002aa0:	2970      	cmp	r1, #112	; 0x70
 8002aa2:	d1dd      	bne.n	8002a60 <_printf_i+0x30>
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	6023      	str	r3, [r4, #0]
 8002aac:	e003      	b.n	8002ab6 <_printf_i+0x86>
 8002aae:	2975      	cmp	r1, #117	; 0x75
 8002ab0:	d017      	beq.n	8002ae2 <_printf_i+0xb2>
 8002ab2:	2978      	cmp	r1, #120	; 0x78
 8002ab4:	d1d4      	bne.n	8002a60 <_printf_i+0x30>
 8002ab6:	2378      	movs	r3, #120	; 0x78
 8002ab8:	4865      	ldr	r0, [pc, #404]	; (8002c50 <_printf_i+0x220>)
 8002aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002abe:	e055      	b.n	8002b6c <_printf_i+0x13c>
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ac6:	1d19      	adds	r1, r3, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6011      	str	r1, [r2, #0]
 8002acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e08c      	b.n	8002bee <_printf_i+0x1be>
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ada:	6011      	str	r1, [r2, #0]
 8002adc:	bf18      	it	ne
 8002ade:	b21b      	sxthne	r3, r3
 8002ae0:	e7cf      	b.n	8002a82 <_printf_i+0x52>
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	6825      	ldr	r5, [r4, #0]
 8002ae6:	1d18      	adds	r0, r3, #4
 8002ae8:	6010      	str	r0, [r2, #0]
 8002aea:	0628      	lsls	r0, r5, #24
 8002aec:	d501      	bpl.n	8002af2 <_printf_i+0xc2>
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <_printf_i+0xc8>
 8002af2:	0668      	lsls	r0, r5, #25
 8002af4:	d5fb      	bpl.n	8002aee <_printf_i+0xbe>
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	296f      	cmp	r1, #111	; 0x6f
 8002afa:	bf14      	ite	ne
 8002afc:	220a      	movne	r2, #10
 8002afe:	2208      	moveq	r2, #8
 8002b00:	4852      	ldr	r0, [pc, #328]	; (8002c4c <_printf_i+0x21c>)
 8002b02:	2100      	movs	r1, #0
 8002b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b08:	6865      	ldr	r5, [r4, #4]
 8002b0a:	2d00      	cmp	r5, #0
 8002b0c:	60a5      	str	r5, [r4, #8]
 8002b0e:	f2c0 8095 	blt.w	8002c3c <_printf_i+0x20c>
 8002b12:	6821      	ldr	r1, [r4, #0]
 8002b14:	f021 0104 	bic.w	r1, r1, #4
 8002b18:	6021      	str	r1, [r4, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d13d      	bne.n	8002b9a <_printf_i+0x16a>
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	f040 808e 	bne.w	8002c40 <_printf_i+0x210>
 8002b24:	4665      	mov	r5, ip
 8002b26:	2a08      	cmp	r2, #8
 8002b28:	d10b      	bne.n	8002b42 <_printf_i+0x112>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	07db      	lsls	r3, r3, #31
 8002b2e:	d508      	bpl.n	8002b42 <_printf_i+0x112>
 8002b30:	6923      	ldr	r3, [r4, #16]
 8002b32:	6862      	ldr	r2, [r4, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bfde      	ittt	le
 8002b38:	2330      	movle	r3, #48	; 0x30
 8002b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b42:	ebac 0305 	sub.w	r3, ip, r5
 8002b46:	6123      	str	r3, [r4, #16]
 8002b48:	f8cd 8000 	str.w	r8, [sp]
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	aa03      	add	r2, sp, #12
 8002b50:	4621      	mov	r1, r4
 8002b52:	4630      	mov	r0, r6
 8002b54:	f7ff fef6 	bl	8002944 <_printf_common>
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d14d      	bne.n	8002bf8 <_printf_i+0x1c8>
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	b005      	add	sp, #20
 8002b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b66:	4839      	ldr	r0, [pc, #228]	; (8002c4c <_printf_i+0x21c>)
 8002b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	1d1d      	adds	r5, r3, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6015      	str	r5, [r2, #0]
 8002b76:	060a      	lsls	r2, r1, #24
 8002b78:	d50b      	bpl.n	8002b92 <_printf_i+0x162>
 8002b7a:	07ca      	lsls	r2, r1, #31
 8002b7c:	bf44      	itt	mi
 8002b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8002b82:	6021      	strmi	r1, [r4, #0]
 8002b84:	b91b      	cbnz	r3, 8002b8e <_printf_i+0x15e>
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	f022 0220 	bic.w	r2, r2, #32
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	e7b7      	b.n	8002b02 <_printf_i+0xd2>
 8002b92:	064d      	lsls	r5, r1, #25
 8002b94:	bf48      	it	mi
 8002b96:	b29b      	uxthmi	r3, r3
 8002b98:	e7ef      	b.n	8002b7a <_printf_i+0x14a>
 8002b9a:	4665      	mov	r5, ip
 8002b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8002ba4:	5cc3      	ldrb	r3, [r0, r3]
 8002ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002baa:	460b      	mov	r3, r1
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d1f5      	bne.n	8002b9c <_printf_i+0x16c>
 8002bb0:	e7b9      	b.n	8002b26 <_printf_i+0xf6>
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	6825      	ldr	r5, [r4, #0]
 8002bb6:	1d18      	adds	r0, r3, #4
 8002bb8:	6961      	ldr	r1, [r4, #20]
 8002bba:	6010      	str	r0, [r2, #0]
 8002bbc:	0628      	lsls	r0, r5, #24
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	d501      	bpl.n	8002bc6 <_printf_i+0x196>
 8002bc2:	6019      	str	r1, [r3, #0]
 8002bc4:	e002      	b.n	8002bcc <_printf_i+0x19c>
 8002bc6:	066a      	lsls	r2, r5, #25
 8002bc8:	d5fb      	bpl.n	8002bc2 <_printf_i+0x192>
 8002bca:	8019      	strh	r1, [r3, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4665      	mov	r5, ip
 8002bd0:	6123      	str	r3, [r4, #16]
 8002bd2:	e7b9      	b.n	8002b48 <_printf_i+0x118>
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	1d19      	adds	r1, r3, #4
 8002bd8:	6011      	str	r1, [r2, #0]
 8002bda:	681d      	ldr	r5, [r3, #0]
 8002bdc:	6862      	ldr	r2, [r4, #4]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7ff fd0d 	bl	8002600 <memchr>
 8002be6:	b108      	cbz	r0, 8002bec <_printf_i+0x1bc>
 8002be8:	1b40      	subs	r0, r0, r5
 8002bea:	6060      	str	r0, [r4, #4]
 8002bec:	6863      	ldr	r3, [r4, #4]
 8002bee:	6123      	str	r3, [r4, #16]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf6:	e7a7      	b.n	8002b48 <_printf_i+0x118>
 8002bf8:	6923      	ldr	r3, [r4, #16]
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	4639      	mov	r1, r7
 8002bfe:	4630      	mov	r0, r6
 8002c00:	47c0      	blx	r8
 8002c02:	3001      	adds	r0, #1
 8002c04:	d0aa      	beq.n	8002b5c <_printf_i+0x12c>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	079b      	lsls	r3, r3, #30
 8002c0a:	d413      	bmi.n	8002c34 <_printf_i+0x204>
 8002c0c:	68e0      	ldr	r0, [r4, #12]
 8002c0e:	9b03      	ldr	r3, [sp, #12]
 8002c10:	4298      	cmp	r0, r3
 8002c12:	bfb8      	it	lt
 8002c14:	4618      	movlt	r0, r3
 8002c16:	e7a3      	b.n	8002b60 <_printf_i+0x130>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	4630      	mov	r0, r6
 8002c20:	47c0      	blx	r8
 8002c22:	3001      	adds	r0, #1
 8002c24:	d09a      	beq.n	8002b5c <_printf_i+0x12c>
 8002c26:	3501      	adds	r5, #1
 8002c28:	68e3      	ldr	r3, [r4, #12]
 8002c2a:	9a03      	ldr	r2, [sp, #12]
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	42ab      	cmp	r3, r5
 8002c30:	dcf2      	bgt.n	8002c18 <_printf_i+0x1e8>
 8002c32:	e7eb      	b.n	8002c0c <_printf_i+0x1dc>
 8002c34:	2500      	movs	r5, #0
 8002c36:	f104 0919 	add.w	r9, r4, #25
 8002c3a:	e7f5      	b.n	8002c28 <_printf_i+0x1f8>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ac      	bne.n	8002b9a <_printf_i+0x16a>
 8002c40:	7803      	ldrb	r3, [r0, #0]
 8002c42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c4a:	e76c      	b.n	8002b26 <_printf_i+0xf6>
 8002c4c:	08002f4d 	.word	0x08002f4d
 8002c50:	08002f5e 	.word	0x08002f5e

08002c54 <memmove>:
 8002c54:	4288      	cmp	r0, r1
 8002c56:	b510      	push	{r4, lr}
 8002c58:	eb01 0302 	add.w	r3, r1, r2
 8002c5c:	d807      	bhi.n	8002c6e <memmove+0x1a>
 8002c5e:	1e42      	subs	r2, r0, #1
 8002c60:	4299      	cmp	r1, r3
 8002c62:	d00a      	beq.n	8002c7a <memmove+0x26>
 8002c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002c6c:	e7f8      	b.n	8002c60 <memmove+0xc>
 8002c6e:	4283      	cmp	r3, r0
 8002c70:	d9f5      	bls.n	8002c5e <memmove+0xa>
 8002c72:	1881      	adds	r1, r0, r2
 8002c74:	1ad2      	subs	r2, r2, r3
 8002c76:	42d3      	cmn	r3, r2
 8002c78:	d100      	bne.n	8002c7c <memmove+0x28>
 8002c7a:	bd10      	pop	{r4, pc}
 8002c7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002c84:	e7f7      	b.n	8002c76 <memmove+0x22>
	...

08002c88 <_free_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d043      	beq.n	8002d18 <_free_r+0x90>
 8002c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c94:	1f0c      	subs	r4, r1, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bfb8      	it	lt
 8002c9a:	18e4      	addlt	r4, r4, r3
 8002c9c:	f000 f8d0 	bl	8002e40 <__malloc_lock>
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <_free_r+0x94>)
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	b933      	cbnz	r3, 8002cb6 <_free_r+0x2e>
 8002ca8:	6063      	str	r3, [r4, #4]
 8002caa:	6014      	str	r4, [r2, #0]
 8002cac:	4628      	mov	r0, r5
 8002cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cb2:	f000 b8c6 	b.w	8002e42 <__malloc_unlock>
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	d90b      	bls.n	8002cd2 <_free_r+0x4a>
 8002cba:	6821      	ldr	r1, [r4, #0]
 8002cbc:	1862      	adds	r2, r4, r1
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	bf01      	itttt	eq
 8002cc2:	681a      	ldreq	r2, [r3, #0]
 8002cc4:	685b      	ldreq	r3, [r3, #4]
 8002cc6:	1852      	addeq	r2, r2, r1
 8002cc8:	6022      	streq	r2, [r4, #0]
 8002cca:	6063      	str	r3, [r4, #4]
 8002ccc:	6004      	str	r4, [r0, #0]
 8002cce:	e7ed      	b.n	8002cac <_free_r+0x24>
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	b10a      	cbz	r2, 8002cda <_free_r+0x52>
 8002cd6:	42a2      	cmp	r2, r4
 8002cd8:	d9fa      	bls.n	8002cd0 <_free_r+0x48>
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	1858      	adds	r0, r3, r1
 8002cde:	42a0      	cmp	r0, r4
 8002ce0:	d10b      	bne.n	8002cfa <_free_r+0x72>
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	4401      	add	r1, r0
 8002ce6:	1858      	adds	r0, r3, r1
 8002ce8:	4282      	cmp	r2, r0
 8002cea:	6019      	str	r1, [r3, #0]
 8002cec:	d1de      	bne.n	8002cac <_free_r+0x24>
 8002cee:	6810      	ldr	r0, [r2, #0]
 8002cf0:	6852      	ldr	r2, [r2, #4]
 8002cf2:	4401      	add	r1, r0
 8002cf4:	6019      	str	r1, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	e7d8      	b.n	8002cac <_free_r+0x24>
 8002cfa:	d902      	bls.n	8002d02 <_free_r+0x7a>
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	602b      	str	r3, [r5, #0]
 8002d00:	e7d4      	b.n	8002cac <_free_r+0x24>
 8002d02:	6820      	ldr	r0, [r4, #0]
 8002d04:	1821      	adds	r1, r4, r0
 8002d06:	428a      	cmp	r2, r1
 8002d08:	bf01      	itttt	eq
 8002d0a:	6811      	ldreq	r1, [r2, #0]
 8002d0c:	6852      	ldreq	r2, [r2, #4]
 8002d0e:	1809      	addeq	r1, r1, r0
 8002d10:	6021      	streq	r1, [r4, #0]
 8002d12:	6062      	str	r2, [r4, #4]
 8002d14:	605c      	str	r4, [r3, #4]
 8002d16:	e7c9      	b.n	8002cac <_free_r+0x24>
 8002d18:	bd38      	pop	{r3, r4, r5, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000094 	.word	0x20000094

08002d20 <_malloc_r>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	1ccd      	adds	r5, r1, #3
 8002d24:	f025 0503 	bic.w	r5, r5, #3
 8002d28:	3508      	adds	r5, #8
 8002d2a:	2d0c      	cmp	r5, #12
 8002d2c:	bf38      	it	cc
 8002d2e:	250c      	movcc	r5, #12
 8002d30:	2d00      	cmp	r5, #0
 8002d32:	4606      	mov	r6, r0
 8002d34:	db01      	blt.n	8002d3a <_malloc_r+0x1a>
 8002d36:	42a9      	cmp	r1, r5
 8002d38:	d903      	bls.n	8002d42 <_malloc_r+0x22>
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	6033      	str	r3, [r6, #0]
 8002d3e:	2000      	movs	r0, #0
 8002d40:	bd70      	pop	{r4, r5, r6, pc}
 8002d42:	f000 f87d 	bl	8002e40 <__malloc_lock>
 8002d46:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <_malloc_r+0xac>)
 8002d48:	6814      	ldr	r4, [r2, #0]
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	b991      	cbnz	r1, 8002d74 <_malloc_r+0x54>
 8002d4e:	4c20      	ldr	r4, [pc, #128]	; (8002dd0 <_malloc_r+0xb0>)
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	b91b      	cbnz	r3, 8002d5c <_malloc_r+0x3c>
 8002d54:	4630      	mov	r0, r6
 8002d56:	f000 f863 	bl	8002e20 <_sbrk_r>
 8002d5a:	6020      	str	r0, [r4, #0]
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f000 f85e 	bl	8002e20 <_sbrk_r>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d124      	bne.n	8002db2 <_malloc_r+0x92>
 8002d68:	230c      	movs	r3, #12
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	6033      	str	r3, [r6, #0]
 8002d6e:	f000 f868 	bl	8002e42 <__malloc_unlock>
 8002d72:	e7e4      	b.n	8002d3e <_malloc_r+0x1e>
 8002d74:	680b      	ldr	r3, [r1, #0]
 8002d76:	1b5b      	subs	r3, r3, r5
 8002d78:	d418      	bmi.n	8002dac <_malloc_r+0x8c>
 8002d7a:	2b0b      	cmp	r3, #11
 8002d7c:	d90f      	bls.n	8002d9e <_malloc_r+0x7e>
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	18cc      	adds	r4, r1, r3
 8002d82:	50cd      	str	r5, [r1, r3]
 8002d84:	4630      	mov	r0, r6
 8002d86:	f000 f85c 	bl	8002e42 <__malloc_unlock>
 8002d8a:	f104 000b 	add.w	r0, r4, #11
 8002d8e:	1d23      	adds	r3, r4, #4
 8002d90:	f020 0007 	bic.w	r0, r0, #7
 8002d94:	1ac3      	subs	r3, r0, r3
 8002d96:	d0d3      	beq.n	8002d40 <_malloc_r+0x20>
 8002d98:	425a      	negs	r2, r3
 8002d9a:	50e2      	str	r2, [r4, r3]
 8002d9c:	e7d0      	b.n	8002d40 <_malloc_r+0x20>
 8002d9e:	684b      	ldr	r3, [r1, #4]
 8002da0:	428c      	cmp	r4, r1
 8002da2:	bf16      	itet	ne
 8002da4:	6063      	strne	r3, [r4, #4]
 8002da6:	6013      	streq	r3, [r2, #0]
 8002da8:	460c      	movne	r4, r1
 8002daa:	e7eb      	b.n	8002d84 <_malloc_r+0x64>
 8002dac:	460c      	mov	r4, r1
 8002dae:	6849      	ldr	r1, [r1, #4]
 8002db0:	e7cc      	b.n	8002d4c <_malloc_r+0x2c>
 8002db2:	1cc4      	adds	r4, r0, #3
 8002db4:	f024 0403 	bic.w	r4, r4, #3
 8002db8:	42a0      	cmp	r0, r4
 8002dba:	d005      	beq.n	8002dc8 <_malloc_r+0xa8>
 8002dbc:	1a21      	subs	r1, r4, r0
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f000 f82e 	bl	8002e20 <_sbrk_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d0cf      	beq.n	8002d68 <_malloc_r+0x48>
 8002dc8:	6025      	str	r5, [r4, #0]
 8002dca:	e7db      	b.n	8002d84 <_malloc_r+0x64>
 8002dcc:	20000094 	.word	0x20000094
 8002dd0:	20000098 	.word	0x20000098

08002dd4 <_realloc_r>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	4607      	mov	r7, r0
 8002dd8:	4614      	mov	r4, r2
 8002dda:	460e      	mov	r6, r1
 8002ddc:	b921      	cbnz	r1, 8002de8 <_realloc_r+0x14>
 8002dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002de2:	4611      	mov	r1, r2
 8002de4:	f7ff bf9c 	b.w	8002d20 <_malloc_r>
 8002de8:	b922      	cbnz	r2, 8002df4 <_realloc_r+0x20>
 8002dea:	f7ff ff4d 	bl	8002c88 <_free_r>
 8002dee:	4625      	mov	r5, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df4:	f000 f826 	bl	8002e44 <_malloc_usable_size_r>
 8002df8:	42a0      	cmp	r0, r4
 8002dfa:	d20f      	bcs.n	8002e1c <_realloc_r+0x48>
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4638      	mov	r0, r7
 8002e00:	f7ff ff8e 	bl	8002d20 <_malloc_r>
 8002e04:	4605      	mov	r5, r0
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d0f2      	beq.n	8002df0 <_realloc_r+0x1c>
 8002e0a:	4631      	mov	r1, r6
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	f7ff fc14 	bl	800263a <memcpy>
 8002e12:	4631      	mov	r1, r6
 8002e14:	4638      	mov	r0, r7
 8002e16:	f7ff ff37 	bl	8002c88 <_free_r>
 8002e1a:	e7e9      	b.n	8002df0 <_realloc_r+0x1c>
 8002e1c:	4635      	mov	r5, r6
 8002e1e:	e7e7      	b.n	8002df0 <_realloc_r+0x1c>

08002e20 <_sbrk_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	2300      	movs	r3, #0
 8002e24:	4c05      	ldr	r4, [pc, #20]	; (8002e3c <_sbrk_r+0x1c>)
 8002e26:	4605      	mov	r5, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	f7fd fc02 	bl	8000634 <_sbrk>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_sbrk_r+0x1a>
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_sbrk_r+0x1a>
 8002e38:	602b      	str	r3, [r5, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	200001d8 	.word	0x200001d8

08002e40 <__malloc_lock>:
 8002e40:	4770      	bx	lr

08002e42 <__malloc_unlock>:
 8002e42:	4770      	bx	lr

08002e44 <_malloc_usable_size_r>:
 8002e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e48:	1f18      	subs	r0, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bfbc      	itt	lt
 8002e4e:	580b      	ldrlt	r3, [r1, r0]
 8002e50:	18c0      	addlt	r0, r0, r3
 8002e52:	4770      	bx	lr

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
