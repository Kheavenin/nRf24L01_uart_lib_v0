
nRf24L01_uart_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  08004168  08004168  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004168  08004168  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08004170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000214  08004384  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08004384  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a6d  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002567  00000000  00000000  00030caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00033218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00034320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d6a  00000000  00000000  000352f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfb4  00000000  00000000  0004a05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000753fb  00000000  00000000  0005600e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  000cb484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000214 	.word	0x20000214
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d90 	.word	0x08003d90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000218 	.word	0x20000218
 8000148:	08003d90 	.word	0x08003d90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4b      	ldr	r2, [pc, #300]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x148>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b43      	ldr	r3, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3d      	ldr	r3, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3a      	ldr	r3, [pc, #232]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001d6:	f001 fd1d 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2110      	movs	r1, #16
 80001de:	4833      	ldr	r0, [pc, #204]	; (80002ac <MX_GPIO_Init+0x150>)
 80001e0:	f001 fd18 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	482c      	ldr	r0, [pc, #176]	; (80002ac <MX_GPIO_Init+0x150>)
 80001fa:	f001 fbb1 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001fe:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000204:	2303      	movs	r3, #3
 8000206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f001 fba6 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9 
 8000214:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000218:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021a:	2303      	movs	r3, #3
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000226:	f001 fb9b 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4819      	ldr	r0, [pc, #100]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000242:	f001 fb8d 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000246:	2310      	movs	r3, #16
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_GPIO_Init+0x150>)
 800025e:	f001 fb7f 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000274:	f001 fb74 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000278:	2304      	movs	r3, #4
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027c:	2303      	movs	r3, #3
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000288:	f001 fb6a 	bl	8001960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f001 fab8 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000296:	2028      	movs	r0, #40	; 0x28
 8000298:	f001 fad1 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40011400 	.word	0x40011400

080002bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002c2:	f001 f945 	bl	8001550 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c6:	f000 f899 	bl	80003fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002ca:	f7ff ff47 	bl	800015c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80002ce:	f001 f8a9 	bl	8001424 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80002d2:	f000 fc7f 	bl	8000bd4 <MX_SPI1_Init>
	MX_TIM1_Init();
 80002d6:	f000 fd9f 	bl	8000e18 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	sendString("\n\rPeriphery initialized.", &huart2);
 80002da:	493e      	ldr	r1, [pc, #248]	; (80003d4 <main+0x118>)
 80002dc:	483e      	ldr	r0, [pc, #248]	; (80003d8 <main+0x11c>)
 80002de:	f001 f869 	bl	80013b4 <sendString>
	HAL_Delay(200);
 80002e2:	20c8      	movs	r0, #200	; 0xc8
 80002e4:	f001 f996 	bl	8001614 <HAL_Delay>

	HAL_TIM_Base_Start(&htim1);
 80002e8:	483c      	ldr	r0, [pc, #240]	; (80003dc <main+0x120>)
 80002ea:	f002 fe2e 	bl	8002f4a <HAL_TIM_Base_Start>
	sendString("\n\rTIM start counting.", &huart2);
 80002ee:	4939      	ldr	r1, [pc, #228]	; (80003d4 <main+0x118>)
 80002f0:	483b      	ldr	r0, [pc, #236]	; (80003e0 <main+0x124>)
 80002f2:	f001 f85f 	bl	80013b4 <sendString>
	HAL_Delay(200);
 80002f6:	20c8      	movs	r0, #200	; 0xc8
 80002f8:	f001 f98c 	bl	8001614 <HAL_Delay>

	/* nrf24L01+ struct init*/
	nrfStruct_t *testNrfStruct;
	testNrfStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin, CE_GPIO_Port, CE_Pin);
 80002fc:	2310      	movs	r3, #16
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <main+0x128>)
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2310      	movs	r3, #16
 8000306:	4a38      	ldr	r2, [pc, #224]	; (80003e8 <main+0x12c>)
 8000308:	4934      	ldr	r1, [pc, #208]	; (80003dc <main+0x120>)
 800030a:	4838      	ldr	r0, [pc, #224]	; (80003ec <main+0x130>)
 800030c:	f000 fb20 	bl	8000950 <nRF_Init>
 8000310:	6078      	str	r0, [r7, #4]

	/* nrt Uart interface struct init */
	nRF_UartStruct_t *testUartStruct;
	testUartStruct = nRF_UartInit(testNrfStruct, &huart2);
 8000312:	4930      	ldr	r1, [pc, #192]	; (80003d4 <main+0x118>)
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 fded 	bl	8000ef4 <nRF_UartInit>
 800031a:	6038      	str	r0, [r7, #0]
	uartGlobalFlagIT = &(testUartStruct->uartIrqFlag);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3308      	adds	r3, #8
 8000320:	4a33      	ldr	r2, [pc, #204]	; (80003f0 <main+0x134>)
 8000322:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*) (testUartStruct->uartRxBuffer), UART_READ_SIZE);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	3326      	adds	r3, #38	; 0x26
 8000328:	2210      	movs	r2, #16
 800032a:	4619      	mov	r1, r3
 800032c:	4829      	ldr	r0, [pc, #164]	; (80003d4 <main+0x118>)
 800032e:	f003 f8b4 	bl	800349a <HAL_UART_Receive_IT>
	HAL_Delay(200);
 8000332:	20c8      	movs	r0, #200	; 0xc8
 8000334:	f001 f96e 	bl	8001614 <HAL_Delay>
	sendString("\n\rUart set as listener.", &huart2);
 8000338:	4926      	ldr	r1, [pc, #152]	; (80003d4 <main+0x118>)
 800033a:	482e      	ldr	r0, [pc, #184]	; (80003f4 <main+0x138>)
 800033c:	f001 f83a 	bl	80013b4 <sendString>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* Begin UART receive interrupt  */
		if (*uartGlobalFlagIT) {
 8000340:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <main+0x134>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <main+0x84>
			/* copy characters to temporary buffer */
			memcpy(testUartStruct->uartTemporaryBuffer, testUartStruct->uartRxBuffer, UART_READ_SIZE);
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	3326      	adds	r3, #38	; 0x26
 8000356:	2210      	movs	r2, #16
 8000358:	4619      	mov	r1, r3
 800035a:	f003 fc23 	bl	8003ba4 <memcpy>

			/* Main condition - data size */
			if (strlen(testUartStruct->uartTemporaryBuffer) >= MINIMUM_COMMAND_SIZE) {
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	333e      	adds	r3, #62	; 0x3e
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff fef2 	bl	800014c <strlen>
 8000368:	4603      	mov	r3, r0
 800036a:	2b08      	cmp	r3, #8
 800036c:	d916      	bls.n	800039c <main+0xe0>

				/* detect entrance to nRF and set prompt flag */
				if ((testUartStruct->uartPromptFlag) == 0) {
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	7a5b      	ldrb	r3, [r3, #9]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <main+0xc2>
					nrfModeEnter(testUartStruct);
 8000378:	6838      	ldr	r0, [r7, #0]
 800037a:	f000 fdfd 	bl	8000f78 <nrfModeEnter>
				}

				/* If nrf mode available check and execute command */
				if ((testUartStruct->uartPromptFlag) == 1) {
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	7a5b      	ldrb	r3, [r3, #9]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10d      	bne.n	80003a4 <main+0xe8>
					/* Check command as exit command */
					if (!nrfModeExit(testUartStruct)) {
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	f000 fe0f 	bl	8000fac <nrfModeExit>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d107      	bne.n	80003a4 <main+0xe8>
						/* If not exit command - check as others commands */
						/* Detect command */
						nrfModeCommand(testUartStruct);
 8000394:	6838      	ldr	r0, [r7, #0]
 8000396:	f000 fe23 	bl	8000fe0 <nrfModeCommand>
 800039a:	e003      	b.n	80003a4 <main+0xe8>
					}
				}
				/* End of positive part of condtion */
			} else {
				sendString("\r\n#nRF command invalid.", &huart2);	//log
 800039c:	490d      	ldr	r1, [pc, #52]	; (80003d4 <main+0x118>)
 800039e:	4816      	ldr	r0, [pc, #88]	; (80003f8 <main+0x13c>)
 80003a0:	f001 f808 	bl	80013b4 <sendString>
			}

			/* Reset buffers */
			resetChar(testUartStruct->uartRxBuffer, UART_BUFFER_SIZE_RX);
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	3326      	adds	r3, #38	; 0x26
 80003a8:	2118      	movs	r1, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f815 	bl	80013da <resetChar>
			resetChar(testUartStruct->uartTemporaryBuffer, UART_BUFFER_SIZE_TMP);
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	333e      	adds	r3, #62	; 0x3e
 80003b4:	2118      	movs	r1, #24
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 f80f 	bl	80013da <resetChar>
			*uartGlobalFlagIT = 0; /* Reset flag */
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <main+0x134>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
			/* Start UART listening */
			HAL_UART_Receive_IT(&huart2, (uint8_t*) (testUartStruct->uartRxBuffer), UART_READ_SIZE);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	3326      	adds	r3, #38	; 0x26
 80003c8:	2210      	movs	r2, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	4801      	ldr	r0, [pc, #4]	; (80003d4 <main+0x118>)
 80003ce:	f003 f864 	bl	800349a <HAL_UART_Receive_IT>
		if (*uartGlobalFlagIT) {
 80003d2:	e7b5      	b.n	8000340 <main+0x84>
 80003d4:	20000364 	.word	0x20000364
 80003d8:	08003da8 	.word	0x08003da8
 80003dc:	20000324 	.word	0x20000324
 80003e0:	08003dc4 	.word	0x08003dc4
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	200002cc 	.word	0x200002cc
 80003f0:	20000230 	.word	0x20000230
 80003f4:	08003ddc 	.word	0x08003ddc
 80003f8:	08003df4 	.word	0x08003df4

080003fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	; 0x40
 8000400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fbd5 	bl	8003bba <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000426:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800043e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fc1f 	bl	8001c88 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x58>
		Error_Handler();
 8000450:	f000 f82a 	bl	80004a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000454:	230f      	movs	r3, #15
 8000456:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000464:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2102      	movs	r1, #2
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fe8a 	bl	8002188 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x82>
		Error_Handler();
 800047a:	f000 f815 	bl	80004a8 <Error_Handler>
	}
}
 800047e:	bf00      	nop
 8000480:	3740      	adds	r7, #64	; 0x40
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	*uartGlobalFlagIT = 1;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <HAL_UART_RxCpltCallback+0x1c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000230 	.word	0x20000230

080004a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <statusStrcut_Init>:
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    nrfStruct->statusStruct.dataReadIrq = 0;
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004c2:	f36f 0300 	bfc	r3, #0, #1
 80004c6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.dataSendIrq = 0;
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004d0:	f36f 0341 	bfc	r3, #1, #1
 80004d4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.maxRetr = 0;
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004de:	f36f 0382 	bfc	r3, #2, #1
 80004e2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004ec:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80004f0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.txFull = 0;
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004fa:	f36f 1386 	bfc	r3, #6, #1
 80004fe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

    nrfStruct->statusStruct.packetsLost = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    nrfStruct->statusStruct.packetsRetr = 0;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    /* Init settigns struct */
    nrfStruct->setStruct.rxMode = 0;                //set as receiver
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7813      	ldrb	r3, [r2, #0]
 8000528:	f36f 0300 	bfc	r3, #0, #1
 800052c:	7013      	strb	r3, [r2, #0]
    nrfStruct->setStruct.channel = 0x02;            //set channel np. 0
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2202      	movs	r2, #2
 8000532:	705a      	strb	r2, [r3, #1]
    nrfStruct->setStruct.dataRate = RF_DataRate_2M; //lowest data rate
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2201      	movs	r2, #1
 8000538:	709a      	strb	r2, [r3, #2]
    nrfStruct->setStruct.powerRF = RF_PWR_0dBm;     //-12dBm power
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2203      	movs	r2, #3
 800053e:	70da      	strb	r2, [r3, #3]

    nrfStruct->setStruct.ard = 0; //auto retr. delay 250us
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	711a      	strb	r2, [r3, #4]
    nrfStruct->setStruct.arc = 3; //auto retr. counter
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2203      	movs	r2, #3
 800054a:	715a      	strb	r2, [r3, #5]

    nrfStruct->setStruct.enableCRC = 1;
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7bd3      	ldrb	r3, [r2, #15]
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.codingCRC = 0;
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7bd3      	ldrb	r3, [r2, #15]
 800055a:	f36f 0341 	bfc	r3, #1, #1
 800055e:	73d3      	strb	r3, [r2, #15]

    nrfStruct->setStruct.enableTxIrq = 0;
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7bd3      	ldrb	r3, [r2, #15]
 8000564:	f36f 0382 	bfc	r3, #2, #1
 8000568:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableRxIrq = 0;
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7bd3      	ldrb	r3, [r2, #15]
 800056e:	f36f 03c3 	bfc	r3, #3, #1
 8000572:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableMaxRtIrq = 0;
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7bd3      	ldrb	r3, [r2, #15]
 8000578:	f36f 1304 	bfc	r3, #4, #1
 800057c:	73d3      	strb	r3, [r2, #15]

    /* Pipe Enable - defult pipe 0 enable only */
    nrfStruct->setStruct.pipeEn = DF_RXADDR;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2203      	movs	r2, #3
 8000582:	719a      	strb	r2, [r3, #6]
    nrfStruct->setStruct.pipeACK = DF_EN_AA;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	223f      	movs	r2, #63	; 0x3f
 8000588:	71da      	strb	r2, [r3, #7]
    nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	721a      	strb	r2, [r3, #8]

    /* Pipe RX Payload Lenght  */
    uint8_t i;
    for (i = 0; i < 6; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e007      	b.n	80005a6 <settingStruct_Init+0x8a>
    {
        nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	2200      	movs	r2, #0
 800059e:	725a      	strb	r2, [r3, #9]
    for (i = 0; i < 6; i++)
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	3301      	adds	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	d9f4      	bls.n	8000596 <settingStruct_Init+0x7a>
    }

    nrfStruct->setStruct.enableDPL = 0;
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7bd3      	ldrb	r3, [r2, #15]
 80005b0:	f36f 1345 	bfc	r3, #5, #1
 80005b4:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableAckPay = 0;
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7bd3      	ldrb	r3, [r2, #15]
 80005ba:	f36f 1386 	bfc	r3, #6, #1
 80005be:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableDynACK = 0; //enable NO_ACK command
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7bd3      	ldrb	r3, [r2, #15]
 80005c4:	f36f 13c7 	bfc	r3, #7, #1
 80005c8:	73d3      	strb	r3, [r2, #15]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    /* Init address struct */
    nrfStruct->addrStruct.addrWidth = longWidth;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2203      	movs	r2, #3
 80005e0:	741a      	strb	r2, [r3, #16]
    uint8_t i;
    for (i = 0; i < 5; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e007      	b.n	80005f8 <addressStruct_Init+0x24>
    {
        nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	22e7      	movs	r2, #231	; 0xe7
 80005f0:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < 5; i++)
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d9f4      	bls.n	80005e8 <addressStruct_Init+0x14>
    }
    for (i = 0; i < 5; ++i)
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e007      	b.n	8000614 <addressStruct_Init+0x40>
    {
        nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	22e7      	movs	r2, #231	; 0xe7
 800060c:	759a      	strb	r2, [r3, #22]
    for (i = 0; i < 5; ++i)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d9f4      	bls.n	8000604 <addressStruct_Init+0x30>
    }
    for (i = 0; i < 5; ++i)
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e007      	b.n	8000630 <addressStruct_Init+0x5c>
    {
        nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	22c2      	movs	r2, #194	; 0xc2
 8000628:	76da      	strb	r2, [r3, #27]
    for (i = 0; i < 5; ++i)
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	3301      	adds	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b04      	cmp	r3, #4
 8000634:	d9f4      	bls.n	8000620 <addressStruct_Init+0x4c>
    }
    nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	22c3      	movs	r2, #195	; 0xc3
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
    nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	22c4      	movs	r2, #196	; 0xc4
 8000642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	22c5      	movs	r2, #197	; 0xc5
 800064a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	22c6      	movs	r2, #198	; 0xc6
 8000652:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    /* Init fifo struct */
    nrfStruct->fifoStruct.txReUse = 0;
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800066e:	f36f 0300 	bfc	r3, #0, #1
 8000672:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.rxRead = 0;
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800067c:	f36f 0341 	bfc	r3, #1, #1
 8000680:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxFull = 0;
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800068a:	f36f 0382 	bfc	r3, #2, #1
 800068e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxEmpty = 1;
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.txSend = 0;
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006a6:	f36f 1304 	bfc	r3, #4, #1
 80006aa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txFull = 0;
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006b4:	f36f 1345 	bfc	r3, #5, #1
 80006b8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txEmpty = 1;
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
    /* Put pointer of SPI and TIM structures to nRF alias */
    nrfStruct->nRFspi = HAL_SPIx;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
    nrfStruct->nRFtim = HAL_TIMx;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Put GPIO port pointer and pin number to structure's alias */
    nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
    nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	8b3a      	ldrh	r2, [r7, #24]
 80006f8:	869a      	strh	r2, [r3, #52]	; 0x34
    nrfStruct->nRFportCE = HAL_GPIO_CE;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	69fa      	ldr	r2, [r7, #28]
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
    nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	8c3a      	ldrh	r2, [r7, #32]
 8000704:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0); //Set star value as 0
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 8000726:	bf00      	nop
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3f8      	bcc.n	8000728 <delayUs+0x18>
        ;
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000750:	2200      	movs	r2, #0
 8000752:	4619      	mov	r1, r3
 8000754:	f001 fa5e 	bl	8001c14 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	f001 fa4e 	bl	8001c14 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <ceLow>:
void ceLow(nrfStruct_t *nrfStruct)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	f001 fa3e 	bl	8001c14 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <readReg>:
}

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = R_REGISTER | addr;
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	73fb      	strb	r3, [r7, #15]
    uint8_t reg;
    uint8_t *pCmd = &cmd;
 80007b0:	f107 030f 	add.w	r3, r7, #15
 80007b4:	617b      	str	r3, [r7, #20]
    uint8_t *pReg = &reg;
 80007b6:	f107 030e 	add.w	r3, r7, #14
 80007ba:	613b      	str	r3, [r7, #16]

    csnLow(nrfStruct);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ffbf 	bl	8000740 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007c6:	230a      	movs	r3, #10
 80007c8:	2201      	movs	r2, #1
 80007ca:	6979      	ldr	r1, [r7, #20]
 80007cc:	f001 fed9 	bl	8002582 <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 80007d0:	2132      	movs	r1, #50	; 0x32
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff9c 	bl	8000710 <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007dc:	230a      	movs	r3, #10
 80007de:	2201      	movs	r2, #1
 80007e0:	6939      	ldr	r1, [r7, #16]
 80007e2:	f002 f802 	bl	80027ea <HAL_SPI_Receive>

    csnHigh(nrfStruct);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffba 	bl	8000760 <csnHigh>
    return reg;
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	460b      	mov	r3, r1
 8000800:	70fb      	strb	r3, [r7, #3]
 8000802:	4613      	mov	r3, r2
 8000804:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd = W_REGISTER | addr;
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	b2db      	uxtb	r3, r3
 800080e:	72fb      	strb	r3, [r7, #11]
    uint8_t *pCmd = &cmd;
 8000810:	f107 030b 	add.w	r3, r7, #11
 8000814:	60fb      	str	r3, [r7, #12]

    csnLow(nrfStruct);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ff92 	bl	8000740 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000820:	230a      	movs	r3, #10
 8000822:	2201      	movs	r2, #1
 8000824:	68f9      	ldr	r1, [r7, #12]
 8000826:	f001 feac 	bl	8002582 <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 800082a:	2132      	movs	r1, #50	; 0x32
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff6f 	bl	8000710 <delayUs>
    HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000836:	1cb9      	adds	r1, r7, #2
 8000838:	230a      	movs	r3, #10
 800083a:	2201      	movs	r2, #1
 800083c:	f001 fea1 	bl	8002582 <HAL_SPI_Transmit>

    csnHigh(nrfStruct);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff8d 	bl	8000760 <csnHigh>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <writeRegExt>:
    csnHigh(nrfStruct);
}

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
                 size_t bufSize)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	460b      	mov	r3, r1
 800085c:	72fb      	strb	r3, [r7, #11]
    uint8_t cmd = W_REGISTER | addr;
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	b2db      	uxtb	r3, r3
 8000866:	74fb      	strb	r3, [r7, #19]
    uint8_t *pCmd = &cmd;
 8000868:	f107 0313 	add.w	r3, r7, #19
 800086c:	617b      	str	r3, [r7, #20]

    csnLow(nrfStruct);
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff ff66 	bl	8000740 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000878:	230a      	movs	r3, #10
 800087a:	2201      	movs	r2, #1
 800087c:	6979      	ldr	r1, [r7, #20]
 800087e:	f001 fe80 	bl	8002582 <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 8000882:	2132      	movs	r1, #50	; 0x32
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ff43 	bl	8000710 <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	230a      	movs	r3, #10
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f001 ffa8 	bl	80027ea <HAL_SPI_Receive>
                    SPI_TIMEOUT);

    csnHigh(nrfStruct);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ff60 	bl	8000760 <csnHigh>
}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <pwrUp>:
    return reg;
}

/* Power control */
void pwrUp(nrfStruct_t *nrfStruct)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    uint8_t tmp = readReg(nrfStruct, CONFIG);
 80008b0:	2100      	movs	r1, #0
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ff74 	bl	80007a0 <readReg>
 80008b8:	4603      	mov	r3, r0
 80008ba:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << 1);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, CONFIG, tmp);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	461a      	mov	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff93 	bl	80007f6 <writeReg>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <pwrDown>:
void pwrDown(nrfStruct_t *nrfStruct)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    ceLow(nrfStruct);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff4d 	bl	8000780 <ceLow>
    uint8_t tmp = readReg(nrfStruct, CONFIG);
 80008e6:	2100      	movs	r1, #0
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff59 	bl	80007a0 <readReg>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]
    tmp &= (0 << 1); //zmieniono OR na AND
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, CONFIG, tmp);
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	461a      	mov	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff7a 	bl	80007f6 <writeReg>
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <setBit>:
    tmp &= ~(1 << bit); //zmieniono OR na AND
    writeReg(nrfStruct, addr, tmp);
}

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	70fb      	strb	r3, [r7, #3]
 8000916:	4613      	mov	r3, r2
 8000918:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = readReg(nrfStruct, addr);
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	4619      	mov	r1, r3
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff3e 	bl	80007a0 <readReg>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << bit);
 8000928:	78bb      	ldrb	r3, [r7, #2]
 800092a:	2201      	movs	r2, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	b25a      	sxtb	r2, r3
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4313      	orrs	r3, r2
 8000938:	b25b      	sxtb	r3, r3
 800093a:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, addr, tmp);
 800093c:	7bfa      	ldrb	r2, [r7, #15]
 800093e:	78fb      	ldrb	r3, [r7, #3]
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff57 	bl	80007f6 <writeReg>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <nRF_Init>:

/* Main init function */
nrfStruct_t *nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
                      GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
                      GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af04      	add	r7, sp, #16
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	807b      	strh	r3, [r7, #2]
    /* Create main nRF structure	 */
    static nrfStruct_t nRFMainStruct;
    static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

    /* Init settigns struct */
    statusStrcut_Init(pnRFMainStruct);
 800095e:	4b6a      	ldr	r3, [pc, #424]	; (8000b08 <nRF_Init+0x1b8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fda6 	bl	80004b4 <statusStrcut_Init>
    settingStruct_Init(pnRFMainStruct);
 8000968:	4b67      	ldr	r3, [pc, #412]	; (8000b08 <nRF_Init+0x1b8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fdd5 	bl	800051c <settingStruct_Init>
    addressStruct_Init(pnRFMainStruct);
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <nRF_Init+0x1b8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe2c 	bl	80005d4 <addressStruct_Init>
    fifoStruct_Init(pnRFMainStruct);
 800097c:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <nRF_Init+0x1b8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fe6d 	bl	8000660 <fifoStruct_Init>
    hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 8000986:	4b60      	ldr	r3, [pc, #384]	; (8000b08 <nRF_Init+0x1b8>)
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68ba      	ldr	r2, [r7, #8]
 800099a:	68f9      	ldr	r1, [r7, #12]
 800099c:	f7ff fe9a 	bl	80006d4 <hardware_Init>
                  HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

    //	pwrDown(pnRFMainStruct);
    /* Turn on modul */
    pwrUp(pnRFMainStruct);
 80009a0:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <nRF_Init+0x1b8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff7f 	bl	80008a8 <pwrUp>

    /* Set default settings */
    setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 80009aa:	4b57      	ldr	r3, [pc, #348]	; (8000b08 <nRF_Init+0x1b8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ffa9 	bl	800090a <setBit>
    writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 80009b8:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <nRF_Init+0x1b8>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <nRF_Init+0x1b8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	79db      	ldrb	r3, [r3, #7]
 80009c2:	461a      	mov	r2, r3
 80009c4:	2101      	movs	r1, #1
 80009c6:	f7ff ff16 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <nRF_Init+0x1b8>)
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <nRF_Init+0x1b8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	799b      	ldrb	r3, [r3, #6]
 80009d4:	461a      	mov	r2, r3
 80009d6:	2102      	movs	r1, #2
 80009d8:	f7ff ff0d 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 80009dc:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <nRF_Init+0x1b8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2203      	movs	r2, #3
 80009e2:	2103      	movs	r1, #3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff06 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 80009ea:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <nRF_Init+0x1b8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2203      	movs	r2, #3
 80009f0:	2104      	movs	r1, #4
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff feff 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 80009f8:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <nRF_Init+0x1b8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2202      	movs	r2, #2
 80009fe:	2105      	movs	r1, #5
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fef8 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 8000a06:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <nRF_Init+0x1b8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	220e      	movs	r2, #14
 8000a0c:	2106      	movs	r1, #6
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fef1 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 8000a14:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <nRF_Init+0x1b8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	220e      	movs	r2, #14
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff feea 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <nRF_Init+0x1b8>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <nRF_Init+0x1b8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	7a1b      	ldrb	r3, [r3, #8]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	211c      	movs	r1, #28
 8000a30:	f7ff fee1 	bl	80007f6 <writeReg>

    uint8_t i;
    for (i = 0; i < 6; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
 8000a38:	e00f      	b.n	8000a5a <nRF_Init+0x10a>
    {
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <nRF_Init+0x1b8>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	7dfb      	ldrb	r3, [r7, #23]
 8000a40:	3311      	adds	r3, #17
 8000a42:	b2d9      	uxtb	r1, r3
                 (pnRFMainStruct->setStruct.pipePayLen[i]));
 8000a44:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <nRF_Init+0x1b8>)
 8000a46:	681a      	ldr	r2, [r3, #0]
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	7a5b      	ldrb	r3, [r3, #9]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f7ff fed1 	bl	80007f6 <writeReg>
    for (i = 0; i < 6; i++)
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	3301      	adds	r3, #1
 8000a58:	75fb      	strb	r3, [r7, #23]
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d9ec      	bls.n	8000a3a <nRF_Init+0xea>
    }
    writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <nRF_Init+0x1b8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	211d      	movs	r1, #29
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fec4 	bl	80007f6 <writeReg>

    /* Set default address */
    writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <nRF_Init+0x1b8>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <nRF_Init+0x1b8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f103 0211 	add.w	r2, r3, #17
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	f7ff fee6 	bl	800084e <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.txAddr));
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <nRF_Init+0x1b8>)
 8000a84:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr0),
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <nRF_Init+0x1b8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f103 0216 	add.w	r2, r3, #22
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a8e:	2305      	movs	r3, #5
 8000a90:	210a      	movs	r1, #10
 8000a92:	f7ff fedc 	bl	800084e <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr0));
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <nRF_Init+0x1b8>)
 8000a98:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr1),
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <nRF_Init+0x1b8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f103 021b 	add.w	r2, r3, #27
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	210b      	movs	r1, #11
 8000aa6:	f7ff fed2 	bl	800084e <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr1));
    writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <nRF_Init+0x1b8>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <nRF_Init+0x1b8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	210c      	movs	r1, #12
 8000aba:	f7ff fe9c 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <nRF_Init+0x1b8>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <nRF_Init+0x1b8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aca:	461a      	mov	r2, r3
 8000acc:	210d      	movs	r1, #13
 8000ace:	f7ff fe92 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <nRF_Init+0x1b8>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <nRF_Init+0x1b8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ade:	461a      	mov	r2, r3
 8000ae0:	210e      	movs	r1, #14
 8000ae2:	f7ff fe88 	bl	80007f6 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <nRF_Init+0x1b8>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <nRF_Init+0x1b8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000af2:	461a      	mov	r2, r3
 8000af4:	210f      	movs	r1, #15
 8000af6:	f7ff fe7e 	bl	80007f6 <writeReg>

    return pnRFMainStruct;
 8000afa:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <nRF_Init+0x1b8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <setChannel>:
    return ERR_CODE;
}

/* RF channel */
uint8_t setChannel(nrfStruct_t *nrfStruct, uint8_t channel)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
    if (channel >= 0 && channel <= 125)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b7d      	cmp	r3, #125	; 0x7d
 8000b1c:	d80a      	bhi.n	8000b34 <setChannel+0x28>
    {
        writeReg(nrfStruct, RF_CH, channel); //Maximum channel limited to 125 by hardware
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	461a      	mov	r2, r3
 8000b22:	2105      	movs	r1, #5
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fe66 	bl	80007f6 <writeReg>
        nrfStruct->setStruct.channel = channel;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	78fa      	ldrb	r2, [r7, #3]
 8000b2e:	705a      	strb	r2, [r3, #1]
        return OK_CODE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <setChannel+0x2a>
    }
    return ERR_CODE;
 8000b34:	23ff      	movs	r3, #255	; 0xff
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <setRFpower>:
    else
        return 0;
}

void setRFpower(nrfStruct_t *nrfStruct, powerRF_t power)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	460b      	mov	r3, r1
 8000b48:	70fb      	strb	r3, [r7, #3]
    /*
	if (power > RF_PWR_0dBm && power < RF_PWR_18dBm)
	 return ERR_CODE;*/
    uint8_t tmp = readReg(nrfStruct, RF_SETUP); //
 8000b4a:	2106      	movs	r1, #6
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fe27 	bl	80007a0 <readReg>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
    tmp = tmp & 0xF8;                           //0xF8 - 1111 1000B reset 3 LSB
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	f023 0307 	bic.w	r3, r3, #7
 8000b5c:	73fb      	strb	r3, [r7, #15]
    tmp = tmp | (power << 1);                   //combining tmp and shifted power
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	b25a      	sxtb	r2, r3
 8000b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, RF_SETUP, tmp);
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	461a      	mov	r2, r3
 8000b72:	2106      	movs	r1, #6
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fe3e 	bl	80007f6 <writeReg>
    nrfStruct->setStruct.powerRF = power;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	78fa      	ldrb	r2, [r7, #3]
 8000b7e:	70da      	strb	r2, [r3, #3]
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <setDataRate>:

void setDataRate(nrfStruct_t *nrfStruct, dataRate_t rate)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp = readReg(nrfStruct, RF_SETUP); //
 8000b94:	2106      	movs	r1, #6
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fe02 	bl	80007a0 <readReg>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
    tmp = tmp & 0x06;                           //0x06 = 0000 0110B - reset data rate's bits - Also this line reset PLL_LOCK and CONT_WAVE bits
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f003 0306 	and.w	r3, r3, #6
 8000ba6:	73fb      	strb	r3, [r7, #15]
    tmp = tmp | (rate << 3);                    //combining tmp and shifted data rate
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	b25a      	sxtb	r2, r3
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, RF_SETUP, tmp);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2106      	movs	r1, #6
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fe19 	bl	80007f6 <writeReg>
    nrfStruct->setStruct.dataRate = rate;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	709a      	strb	r2, [r3, #2]
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bda:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <MX_SPI1_Init+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c08:	2218      	movs	r2, #24
 8000c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c20:	220a      	movs	r2, #10
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c26:	f001 fc4b 	bl	80024c0 <HAL_SPI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c30:	f7ff fc3a 	bl	80004a8 <Error_Handler>
  }

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200002cc 	.word	0x200002cc
 8000c3c:	40013000 	.word	0x40013000

08000c40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d12f      	bne.n	8000cc0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <HAL_SPI_MspInit+0x90>)
 8000ca4:	f000 fe5c 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca8:	2340      	movs	r3, #64	; 0x40
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_SPI_MspInit+0x90>)
 8000cbc:	f000 fe50 	bl	8001960 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_MspInit+0x5c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_MspInit+0x5c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_MspInit+0x5c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x5c>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_MspInit+0x5c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x5c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_MspInit+0x60>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_MspInit+0x60>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <BusFault_Handler+0x4>

08000d56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 fc2a 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART2_IRQHandler+0x10>)
 8000d92:	f002 fbd7 	bl	8003544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000364 	.word	0x20000364

08000da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000da4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da8:	f000 ff4c 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <SystemInit+0x5c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <SystemInit+0x5c>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <SystemInit+0x5c>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4911      	ldr	r1, [pc, #68]	; (8000e0c <SystemInit+0x5c>)
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <SystemInit+0x60>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <SystemInit+0x5c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <SystemInit+0x5c>)
 8000dd2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <SystemInit+0x5c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SystemInit+0x5c>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <SystemInit+0x5c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <SystemInit+0x5c>)
 8000dee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000df2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SystemInit+0x5c>)
 8000df6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dfa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SystemInit+0x64>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	f8ff0000 	.word	0xf8ff0000
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e36:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <MX_TIM1_Init+0x9c>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e3c:	2247      	movs	r2, #71	; 0x47
 8000e3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e62:	f002 f847 	bl	8002ef4 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e6c:	f7ff fb1c 	bl	80004a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e7e:	f002 f887 	bl	8002f90 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e88:	f7ff fb0e 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM1_Init+0x98>)
 8000e9a:	f002 fa29 	bl	80032f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ea4:	f7ff fb00 	bl	80004a8 <Error_Handler>
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000324 	.word	0x20000324
 8000eb4:	40012c00 	.word	0x40012c00

08000eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <HAL_TIM_Base_MspInit+0x34>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10b      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_TIM_Base_MspInit+0x38>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_TIM_Base_MspInit+0x38>)
 8000ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_TIM_Base_MspInit+0x38>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40012c00 	.word	0x40012c00
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <nRF_UartInit>:
		nrfDataRate250kbps, nrfDataRate1Mbps, nrfDataRate2Mbps, nrfChannel,
		nrfReadRegister, nrfWriteRegister };

/* Create struct */
nRF_UartStruct_t* nRF_UartInit(nrfStruct_t *nrfStruct,
		UART_HandleTypeDef *huart) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]

	/* Creat struct */
	static nRF_UartStruct_t nrfUartStruct;
	static nRF_UartStruct_t *pnrfUartStruct = &nrfUartStruct;

	pnrfUartStruct->nrfStruct = nrfStruct;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <nRF_UartInit+0x80>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
	pnrfUartStruct->nrfUartStruct = huart;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <nRF_UartInit+0x80>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	605a      	str	r2, [r3, #4]

	pnrfUartStruct->uartIrqFlag = 0;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <nRF_UartInit+0x80>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	721a      	strb	r2, [r3, #8]
	pnrfUartStruct->uartPromptFlag = 0;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <nRF_UartInit+0x80>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	725a      	strb	r2, [r3, #9]

	pnrfUartStruct->uartNrfChannel = 0;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <nRF_UartInit+0x80>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	729a      	strb	r2, [r3, #10]
	pnrfUartStruct->uartNrfReadReg = 0;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <nRF_UartInit+0x80>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	72da      	strb	r2, [r3, #11]
	pnrfUartStruct->uartNrfWriteReg = 0;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <nRF_UartInit+0x80>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	731a      	strb	r2, [r3, #12]
	pnrfUartStruct->uartNrfWriteVal = 0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <nRF_UartInit+0x80>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	735a      	strb	r2, [r3, #13]

	resetChar(pnrfUartStruct->uartTxBuffer, UART_BUFFER_SIZE_TX);
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <nRF_UartInit+0x80>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	330e      	adds	r3, #14
 8000f44:	2118      	movs	r1, #24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa47 	bl	80013da <resetChar>
	resetChar(pnrfUartStruct->uartRxBuffer, UART_BUFFER_SIZE_RX);
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <nRF_UartInit+0x80>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3326      	adds	r3, #38	; 0x26
 8000f52:	2118      	movs	r1, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fa40 	bl	80013da <resetChar>
	resetChar(pnrfUartStruct->uartTemporaryBuffer, UART_BUFFER_SIZE_TMP);
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <nRF_UartInit+0x80>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	333e      	adds	r3, #62	; 0x3e
 8000f60:	2118      	movs	r1, #24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fa39 	bl	80013da <resetChar>

	return pnrfUartStruct;
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <nRF_UartInit+0x80>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000038 	.word	0x20000038

08000f78 <nrfModeEnter>:

/* Enter to nRF mode */
uint8_t nrfModeEnter(nRF_UartStruct_t *nRF_UartStruct) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	if (strstr(nRF_UartStruct->uartTemporaryBuffer, nrfEnter) != NULL) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	333e      	adds	r3, #62	; 0x3e
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <nrfModeEnter+0x30>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fe34 	bl	8003bf4 <strstr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <nrfModeEnter+0x24>
		nRF_UartStruct->uartPromptFlag = 1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	725a      	strb	r2, [r3, #9]
		/*
		sendString(nrfPrompt, &huart2);
		HAL_Delay(10);
		sendString("\n\rnRF24L01 access available\n", &huart2);
		 */
		return 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <nrfModeEnter+0x26>
	}
	return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08004044 	.word	0x08004044

08000fac <nrfModeExit>:

/* Exit nRF mode */
uint8_t nrfModeExit(nRF_UartStruct_t *nRF_UartStruct) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if (strstr(nRF_UartStruct->uartTemporaryBuffer, nrfExit) != NULL) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	333e      	adds	r3, #62	; 0x3e
 8000fb8:	4908      	ldr	r1, [pc, #32]	; (8000fdc <nrfModeExit+0x30>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fe1a 	bl	8003bf4 <strstr>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <nrfModeExit+0x24>
		nRF_UartStruct->uartPromptFlag = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	725a      	strb	r2, [r3, #9]
		/*
		sendString(nrfPrompt, &huart2);
		HAL_Delay(10);
		sendString("nRF24L01 access not available\n", &huart2);
		 */
		return 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <nrfModeExit+0x26>
	}
	return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08004050 	.word	0x08004050

08000fe0 <nrfModeCommand>:

/* Detect and execute commands (others than Exit and Enter) */
uint8_t nrfModeCommand(nRF_UartStruct_t *nRF_UartStruct) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	/* Find command */
	int8_t commandNumber = detectCommand(nRF_UartStruct,
			nRF_UartStruct->uartTemporaryBuffer);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	333e      	adds	r3, #62	; 0x3e
	int8_t commandNumber = detectCommand(nRF_UartStruct,
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f812 	bl	8001018 <detectCommand>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
	/* Execute command */
	if (commandNumber > 0) {
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd06      	ble.n	800100e <nrfModeCommand+0x2e>
		executeCommand(nRF_UartStruct, commandNumber);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	4619      	mov	r1, r3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f8cb 	bl	80011a0 <executeCommand>
		return 1;
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <nrfModeCommand+0x30>
	}
	return -1;
 800100e:	23ff      	movs	r3, #255	; 0xff
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <detectCommand>:


/* Functions's bodies */
int8_t detectCommand(nRF_UartStruct_t *nRF_UartStruct, const char *str) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	if (strlen(str) < MINIMUM_COMMAND_SIZE) //Check min size of command
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f7ff f892 	bl	800014c <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	2b08      	cmp	r3, #8
 800102c:	d802      	bhi.n	8001034 <detectCommand+0x1c>
		return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e034      	b.n	800109e <detectCommand+0x86>
	/* Check command */
	uint8_t i;
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e02c      	b.n	8001094 <detectCommand+0x7c>
		if (strstr(str, nrfCommandTable[i]) != NULL) {
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <detectCommand+0x90>)
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	4619      	mov	r1, r3
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f002 fdd5 	bl	8003bf4 <strstr>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d01e      	beq.n	800108e <detectCommand+0x76>
			/* If it's change channel command read channel number */
			if (i == 9) {
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b09      	cmp	r3, #9
 8001054:	d10a      	bne.n	800106c <detectCommand+0x54>
				/* Wrong channel's number */
				if (detectChannel(nRF_UartStruct, str) == -1)
 8001056:	6839      	ldr	r1, [r7, #0]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f861 	bl	8001120 <detectChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d102      	bne.n	800106c <detectCommand+0x54>
					return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e018      	b.n	800109e <detectCommand+0x86>
			}
			if (i == 10) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d10a      	bne.n	8001088 <detectCommand+0x70>
				/* Wrong address to read */
				if (detectReadAddress(nRF_UartStruct, str) == -1)
 8001072:	6839      	ldr	r1, [r7, #0]
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f819 	bl	80010ac <detectReadAddress>
 800107a:	4603      	mov	r3, r0
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d102      	bne.n	8001088 <detectCommand+0x70>
					return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e00a      	b.n	800109e <detectCommand+0x86>
			}
			return i;
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	e007      	b.n	800109e <detectCommand+0x86>
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b0b      	cmp	r3, #11
 8001098:	d9cf      	bls.n	800103a <detectCommand+0x22>
		}
	}
	return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <detectReadAddress>:

int8_t detectReadAddress(nRF_UartStruct_t *nRF_UartStruct, const char *str) {
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	if (strlen(str) <= 14) {
 80010b6:	6838      	ldr	r0, [r7, #0]
 80010b8:	f7ff f848 	bl	800014c <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b0e      	cmp	r3, #14
 80010c0:	d802      	bhi.n	80010c8 <detectReadAddress+0x1c>
		return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e025      	b.n	8001114 <detectReadAddress+0x68>
	}
	/* Find position of command in string */
	char chNum[4];
	strncpy(chNum, (strstr(str, nrfCommandTable[10]) + strlen(nrfCommandTable[10])), 5);
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <detectReadAddress+0x70>)
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	4619      	mov	r1, r3
 80010ce:	6838      	ldr	r0, [r7, #0]
 80010d0:	f002 fd90 	bl	8003bf4 <strstr>
 80010d4:	4604      	mov	r4, r0
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <detectReadAddress+0x70>)
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f836 	bl	800014c <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	18e1      	adds	r1, r4, r3
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2205      	movs	r2, #5
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fd6d 	bl	8003bca <strncpy>
	uint8_t addr = atoi(chNum);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fd2d 	bl	8003b54 <atoi>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]

	/* Check address  */
	if (addr < 0x00 || addr > 0x1D) {
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b1d      	cmp	r3, #29
 8001102:	d902      	bls.n	800110a <detectReadAddress+0x5e>
		return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	e004      	b.n	8001114 <detectReadAddress+0x68>
	}

	nRF_UartStruct->uartNrfReadReg = addr;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	72da      	strb	r2, [r3, #11]
	return addr;
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	20000008 	.word	0x20000008

08001120 <detectChannel>:

int8_t detectChannel(nRF_UartStruct_t *nRF_UartStruct, const char *str) {
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	if (strlen(str) < 9) {
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff f80e 	bl	800014c <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	2b08      	cmp	r3, #8
 8001134:	d802      	bhi.n	800113c <detectChannel+0x1c>
		return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e02a      	b.n	8001192 <detectChannel+0x72>
	}
	/* Find position of command in string */
	char chNum[4];
	/* strlen(nrfCommandTable[9])is offset of command  "#nrf-ch-" ,  necessary to find number of channel */
	strncpy(chNum, (strstr(str, nrfCommandTable[9]) + strlen(nrfCommandTable[9])), 3);
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <detectChannel+0x7c>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f002 fd56 	bl	8003bf4 <strstr>
 8001148:	4604      	mov	r4, r0
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <detectChannel+0x7c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	4618      	mov	r0, r3
 8001150:	f7fe fffc 	bl	800014c <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	18e1      	adds	r1, r4, r3
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2203      	movs	r2, #3
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fd33 	bl	8003bca <strncpy>
	int8_t channel = atoi(chNum);	//conversion string channel number to u_int
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fcf3 	bl	8003b54 <atoi>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]

	/* Check channel number*/
	if (channel > 125 || channel < 0) {
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	2b7d      	cmp	r3, #125	; 0x7d
 8001178:	dc03      	bgt.n	8001182 <detectChannel+0x62>
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da02      	bge.n	8001188 <detectChannel+0x68>
		return -1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e004      	b.n	8001192 <detectChannel+0x72>
	}
	/* Write channel number to structure */
	nRF_UartStruct->uartNrfChannel = channel;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	729a      	strb	r2, [r3, #10]

	return channel;
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <executeCommand>:

int8_t executeCommand(nRF_UartStruct_t *nRF_UartStruct, uint8_t cmdNum) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	switch (cmdNum) {
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b0b      	cmp	r3, #11
 80011b0:	f200 80d6 	bhi.w	8001360 <executeCommand+0x1c0>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <executeCommand+0x1c>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011ed 	.word	0x080011ed
 80011c0:	0800120d 	.word	0x0800120d
 80011c4:	0800122d 	.word	0x0800122d
 80011c8:	0800124f 	.word	0x0800124f
 80011cc:	08001271 	.word	0x08001271
 80011d0:	08001293 	.word	0x08001293
 80011d4:	080012b5 	.word	0x080012b5
 80011d8:	080012d7 	.word	0x080012d7
 80011dc:	080012f9 	.word	0x080012f9
 80011e0:	0800131b 	.word	0x0800131b
 80011e4:	08001341 	.word	0x08001341
 80011e8:	08001351 	.word	0x08001351
	case 0:
		/* Execute Power Up */
		pwrUp(nRF_UartStruct->nrfStruct);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fb59 	bl	80008a8 <pwrUp>
		sendString("\n\rnRF24L01 module power up.", nRF_UartStruct->nrfUartStruct);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4860      	ldr	r0, [pc, #384]	; (8001380 <executeCommand+0x1e0>)
 80011fe:	f000 f8d9 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001202:	2032      	movs	r0, #50	; 0x32
 8001204:	f000 fa06 	bl	8001614 <HAL_Delay>
		return 0;
 8001208:	2300      	movs	r3, #0
 800120a:	e0b4      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 1:
		/* Execute Power Down */
		pwrDown(nRF_UartStruct->nrfStruct);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fb61 	bl	80008d8 <pwrDown>
		sendString("\n\rnRF24L01 module power down.", nRF_UartStruct->nrfUartStruct);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4619      	mov	r1, r3
 800121c:	4859      	ldr	r0, [pc, #356]	; (8001384 <executeCommand+0x1e4>)
 800121e:	f000 f8c9 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001222:	2032      	movs	r0, #50	; 0x32
 8001224:	f000 f9f6 	bl	8001614 <HAL_Delay>
		return 1;
 8001228:	2301      	movs	r3, #1
 800122a:	e0a4      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 2:
		/* Set power 0dBm */
		setRFpower(nRF_UartStruct->nrfStruct, RF_PWR_0dBm);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2103      	movs	r1, #3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc83 	bl	8000b3e <setRFpower>
		sendString("\n\rSet RF power 0dBm.", nRF_UartStruct->nrfUartStruct);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4619      	mov	r1, r3
 800123e:	4852      	ldr	r0, [pc, #328]	; (8001388 <executeCommand+0x1e8>)
 8001240:	f000 f8b8 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001244:	2032      	movs	r0, #50	; 0x32
 8001246:	f000 f9e5 	bl	8001614 <HAL_Delay>
		return 2;
 800124a:	2302      	movs	r3, #2
 800124c:	e093      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 3:
		/* Set power -6dBm */
		setRFpower(nRF_UartStruct->nrfStruct, RF_PWR_6dBm);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2102      	movs	r1, #2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fc72 	bl	8000b3e <setRFpower>
		sendString("\n\rSet RF power -6dBm.", nRF_UartStruct->nrfUartStruct);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4619      	mov	r1, r3
 8001260:	484a      	ldr	r0, [pc, #296]	; (800138c <executeCommand+0x1ec>)
 8001262:	f000 f8a7 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001266:	2032      	movs	r0, #50	; 0x32
 8001268:	f000 f9d4 	bl	8001614 <HAL_Delay>
		return 3;
 800126c:	2303      	movs	r3, #3
 800126e:	e082      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 4:
		/* Set power -12dBm */
		setRFpower(nRF_UartStruct->nrfStruct, RF_PWR_12dBm);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc61 	bl	8000b3e <setRFpower>
		sendString("\n\rSet RF power -12dBm.", nRF_UartStruct->nrfUartStruct);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	4843      	ldr	r0, [pc, #268]	; (8001390 <executeCommand+0x1f0>)
 8001284:	f000 f896 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f000 f9c3 	bl	8001614 <HAL_Delay>
		return 4;
 800128e:	2304      	movs	r3, #4
 8001290:	e071      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 5:
		/* Set power -18dBm */
		setRFpower(nRF_UartStruct->nrfStruct, RF_PWR_18dBm);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fc50 	bl	8000b3e <setRFpower>
		sendString("\n\rSet RF power -18dBm.", nRF_UartStruct->nrfUartStruct);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4619      	mov	r1, r3
 80012a4:	483b      	ldr	r0, [pc, #236]	; (8001394 <executeCommand+0x1f4>)
 80012a6:	f000 f885 	bl	80013b4 <sendString>
		HAL_Delay(50);
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f000 f9b2 	bl	8001614 <HAL_Delay>
		return 5;
 80012b0:	2305      	movs	r3, #5
 80012b2:	e060      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 6:
		setDataRate(nRF_UartStruct->nrfStruct, RF_DataRate_250);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2104      	movs	r1, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fc64 	bl	8000b88 <setDataRate>
		sendString("\n\rSet data rate 250kBps.", nRF_UartStruct->nrfUartStruct);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4834      	ldr	r0, [pc, #208]	; (8001398 <executeCommand+0x1f8>)
 80012c8:	f000 f874 	bl	80013b4 <sendString>
		HAL_Delay(50);
 80012cc:	2032      	movs	r0, #50	; 0x32
 80012ce:	f000 f9a1 	bl	8001614 <HAL_Delay>
		return 6;
 80012d2:	2306      	movs	r3, #6
 80012d4:	e04f      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 7:
		setDataRate(nRF_UartStruct->nrfStruct, RF_DataRate_1M);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fc53 	bl	8000b88 <setDataRate>
		sendString("\n\rSet data rate 1Mbps.", nRF_UartStruct->nrfUartStruct);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4619      	mov	r1, r3
 80012e8:	482c      	ldr	r0, [pc, #176]	; (800139c <executeCommand+0x1fc>)
 80012ea:	f000 f863 	bl	80013b4 <sendString>
		HAL_Delay(50);
 80012ee:	2032      	movs	r0, #50	; 0x32
 80012f0:	f000 f990 	bl	8001614 <HAL_Delay>
		return 7;
 80012f4:	2307      	movs	r3, #7
 80012f6:	e03e      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 8:
		setDataRate(nRF_UartStruct->nrfStruct, RF_DataRate_2M);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fc42 	bl	8000b88 <setDataRate>
		sendString("\n\rSet data rate 2Mbps.", nRF_UartStruct->nrfUartStruct);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4619      	mov	r1, r3
 800130a:	4825      	ldr	r0, [pc, #148]	; (80013a0 <executeCommand+0x200>)
 800130c:	f000 f852 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001310:	2032      	movs	r0, #50	; 0x32
 8001312:	f000 f97f 	bl	8001614 <HAL_Delay>
		return 8;
 8001316:	2308      	movs	r3, #8
 8001318:	e02d      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 9:
		/* Set channel */
		setChannel(nRF_UartStruct->nrfStruct, nRF_UartStruct->uartNrfChannel);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7a9b      	ldrb	r3, [r3, #10]
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f7ff fbf1 	bl	8000b0c <setChannel>
		sendString("\n\rSet RF channel.", nRF_UartStruct->nrfUartStruct);	//log
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4619      	mov	r1, r3
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <executeCommand+0x204>)
 8001332:	f000 f83f 	bl	80013b4 <sendString>
		HAL_Delay(50);
 8001336:	2032      	movs	r0, #50	; 0x32
 8001338:	f000 f96c 	bl	8001614 <HAL_Delay>
		return 9;
 800133c:	2309      	movs	r3, #9
 800133e:	e01a      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 10:
		/* read nRF register */
		sendString("\n\rRead nRF register.", nRF_UartStruct->nrfUartStruct);	//log
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4619      	mov	r1, r3
 8001346:	4818      	ldr	r0, [pc, #96]	; (80013a8 <executeCommand+0x208>)
 8001348:	f000 f834 	bl	80013b4 <sendString>
		return 10;
 800134c:	230a      	movs	r3, #10
 800134e:	e012      	b.n	8001376 <executeCommand+0x1d6>
		break;
	case 11:
		sendString("\n\rWrite nRF register.", nRF_UartStruct->nrfUartStruct);	//log
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <executeCommand+0x20c>)
 8001358:	f000 f82c 	bl	80013b4 <sendString>
		return 11;
 800135c:	230b      	movs	r3, #11
 800135e:	e00a      	b.n	8001376 <executeCommand+0x1d6>
		break;
	default:
		sendString("\n\rInvalid command number.", nRF_UartStruct->nrfUartStruct);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4619      	mov	r1, r3
 8001366:	4812      	ldr	r0, [pc, #72]	; (80013b0 <executeCommand+0x210>)
 8001368:	f000 f824 	bl	80013b4 <sendString>
		HAL_Delay(50);
 800136c:	2032      	movs	r0, #50	; 0x32
 800136e:	f000 f951 	bl	8001614 <HAL_Delay>
		return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
		break;
	}

	return -1;
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08003e0c 	.word	0x08003e0c
 8001384:	08003e28 	.word	0x08003e28
 8001388:	08003e48 	.word	0x08003e48
 800138c:	08003e60 	.word	0x08003e60
 8001390:	08003e78 	.word	0x08003e78
 8001394:	08003e90 	.word	0x08003e90
 8001398:	08003ea8 	.word	0x08003ea8
 800139c:	08003ec4 	.word	0x08003ec4
 80013a0:	08003edc 	.word	0x08003edc
 80013a4:	08003ef4 	.word	0x08003ef4
 80013a8:	08003f08 	.word	0x08003f08
 80013ac:	08003f20 	.word	0x08003f20
 80013b0:	08003f38 	.word	0x08003f38

080013b4 <sendString>:
		sendShortInteger(buffer[i], huart);
	}
	return 1;
}

void sendString(const char *str, UART_HandleTypeDef *huart) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t*) str, strlen(str));
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7fe fec4 	bl	800014c <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f002 f820 	bl	8003412 <HAL_UART_Transmit_IT>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <resetChar>:
	char data[16];
	size_t dataSize = sprintf(data, "%s%ld.%ld", sign, tmpInt, tmpInt2);
	HAL_UART_Transmit_IT(huart, (uint8_t*) data, dataSize);
}

uint8_t resetChar(char *buf, size_t bufSize) {
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
	if (bufSize <= 0 || bufSize > 256)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <resetChar+0x18>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f0:	d901      	bls.n	80013f6 <resetChar+0x1c>
		return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e010      	b.n	8001418 <resetChar+0x3e>
	else {
		uint8_t i;
		for (i = 0; i < (bufSize - 1); i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e007      	b.n	800140c <resetChar+0x32>
			buf[i] = 0x00;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (bufSize - 1); i++) {
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	3301      	adds	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	429a      	cmp	r2, r3
 8001414:	d3f2      	bcc.n	80013fc <resetChar+0x22>
		}
		return 1;
 8001416:	2301      	movs	r3, #1
	}
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
	...

08001424 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_USART2_UART_Init+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800145c:	f001 ff8c 	bl	8003378 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001466:	f7ff f81f 	bl	80004a8 <Error_Handler>
  }

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000364 	.word	0x20000364
 8001474:	40004400 	.word	0x40004400

08001478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_UART_MspInit+0x80>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d12b      	bne.n	80014f0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_UART_MspInit+0x84>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_UART_MspInit+0x84>)
 800149e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a2:	61d3      	str	r3, [r2, #28]
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_UART_MspInit+0x84>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_UART_MspInit+0x84>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_UART_MspInit+0x84>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_UART_MspInit+0x84>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014c8:	230c      	movs	r3, #12
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014dc:	f000 fa40 	bl	8001960 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2026      	movs	r0, #38	; 0x26
 80014e6:	f000 f98e 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014ea:	2026      	movs	r0, #38	; 0x26
 80014ec:	f000 f9a7 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010800 	.word	0x40010800

08001504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001504:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001506:	e003      	b.n	8001510 <LoopCopyDataInit>

08001508 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800150a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800150c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800150e:	3104      	adds	r1, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001514:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001516:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001518:	d3f6      	bcc.n	8001508 <CopyDataInit>
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800151c:	e002      	b.n	8001524 <LoopFillZerobss>

0800151e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001520:	f842 3b04 	str.w	r3, [r2], #4

08001524 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001526:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001528:	d3f9      	bcc.n	800151e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800152a:	f7ff fc41 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f002 fb15 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001532:	f7fe fec3 	bl	80002bc <main>
  bx lr
 8001536:	4770      	bx	lr
  ldr r3, =_sidata
 8001538:	08004170 	.word	0x08004170
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001540:	20000214 	.word	0x20000214
  ldr r2, =_sbss
 8001544:	20000214 	.word	0x20000214
  ldr r3, = _ebss
 8001548:	200003a8 	.word	0x200003a8

0800154c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_2_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x28>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f945 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fbb2 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f95d 	bl	800185a <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f925 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000004 	.word	0x20000004
 80015d4:	20000040 	.word	0x20000040
 80015d8:	2000003c 	.word	0x2000003c

080015dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_IncTick+0x1c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_IncTick+0x20>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000040 	.word	0x20000040
 80015fc:	200003a4 	.word	0x200003a4

08001600 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_GetTick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	200003a4 	.word	0x200003a4

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fff0 	bl	8001600 <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_Delay+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffe0 	bl	8001600 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000040 	.word	0x20000040

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <__NVIC_EnableIRQ+0x34>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff90 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff2d 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff42 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff90 	bl	8001748 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5f 	bl	80016f4 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff35 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001886:	2b02      	cmp	r3, #2
 8001888:	d005      	beq.n	8001896 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2204      	movs	r2, #4
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e051      	b.n	800193a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020e 	bic.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_DMA_Abort_IT+0xd0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d029      	beq.n	8001914 <HAL_DMA_Abort_IT+0xa0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_DMA_Abort_IT+0xd4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d022      	beq.n	8001910 <HAL_DMA_Abort_IT+0x9c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <HAL_DMA_Abort_IT+0xd8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d01a      	beq.n	800190a <HAL_DMA_Abort_IT+0x96>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_DMA_Abort_IT+0xdc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d012      	beq.n	8001904 <HAL_DMA_Abort_IT+0x90>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_DMA_Abort_IT+0xe0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00a      	beq.n	80018fe <HAL_DMA_Abort_IT+0x8a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1a      	ldr	r2, [pc, #104]	; (8001958 <HAL_DMA_Abort_IT+0xe4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d102      	bne.n	80018f8 <HAL_DMA_Abort_IT+0x84>
 80018f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018f6:	e00e      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018fc:	e00b      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	e008      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	e005      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	e002      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001910:	2310      	movs	r3, #16
 8001912:	e000      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001914:	2301      	movs	r3, #1
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_DMA_Abort_IT+0xe8>)
 8001918:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
    } 
  }
  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020008 	.word	0x40020008
 8001948:	4002001c 	.word	0x4002001c
 800194c:	40020030 	.word	0x40020030
 8001950:	40020044 	.word	0x40020044
 8001954:	40020058 	.word	0x40020058
 8001958:	4002006c 	.word	0x4002006c
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	; 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e127      	b.n	8001bc4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001974:	2201      	movs	r2, #1
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8116 	bne.w	8001bbe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b12      	cmp	r3, #18
 8001998:	d034      	beq.n	8001a04 <HAL_GPIO_Init+0xa4>
 800199a:	2b12      	cmp	r3, #18
 800199c:	d80d      	bhi.n	80019ba <HAL_GPIO_Init+0x5a>
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d02b      	beq.n	80019fa <HAL_GPIO_Init+0x9a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d804      	bhi.n	80019b0 <HAL_GPIO_Init+0x50>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d031      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d01c      	beq.n	80019e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ae:	e048      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d043      	beq.n	8001a3c <HAL_GPIO_Init+0xdc>
 80019b4:	2b11      	cmp	r3, #17
 80019b6:	d01b      	beq.n	80019f0 <HAL_GPIO_Init+0x90>
          break;
 80019b8:	e043      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ba:	4a89      	ldr	r2, [pc, #548]	; (8001be0 <HAL_GPIO_Init+0x280>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d026      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
 80019c0:	4a87      	ldr	r2, [pc, #540]	; (8001be0 <HAL_GPIO_Init+0x280>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d806      	bhi.n	80019d4 <HAL_GPIO_Init+0x74>
 80019c6:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <HAL_GPIO_Init+0x284>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d020      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
 80019cc:	4a86      	ldr	r2, [pc, #536]	; (8001be8 <HAL_GPIO_Init+0x288>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01d      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
          break;
 80019d2:	e036      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d4:	4a85      	ldr	r2, [pc, #532]	; (8001bec <HAL_GPIO_Init+0x28c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
 80019da:	4a85      	ldr	r2, [pc, #532]	; (8001bf0 <HAL_GPIO_Init+0x290>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d016      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
 80019e0:	4a84      	ldr	r2, [pc, #528]	; (8001bf4 <HAL_GPIO_Init+0x294>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0xae>
          break;
 80019e6:	e02c      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e028      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	3304      	adds	r3, #4
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e023      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	3308      	adds	r3, #8
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e01e      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	330c      	adds	r3, #12
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e019      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a16:	2304      	movs	r3, #4
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e012      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	611a      	str	r2, [r3, #16]
          break;
 8001a2e:	e008      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	615a      	str	r2, [r3, #20]
          break;
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2bff      	cmp	r3, #255	; 0xff
 8001a46:	d801      	bhi.n	8001a4c <HAL_GPIO_Init+0xec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	e001      	b.n	8001a50 <HAL_GPIO_Init+0xf0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2bff      	cmp	r3, #255	; 0xff
 8001a56:	d802      	bhi.n	8001a5e <HAL_GPIO_Init+0xfe>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x104>
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3b08      	subs	r3, #8
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	401a      	ands	r2, r3
 8001a76:	6a39      	ldr	r1, [r7, #32]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8096 	beq.w	8001bbe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a92:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_GPIO_Init+0x298>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_GPIO_Init+0x298>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6193      	str	r3, [r2, #24]
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <HAL_GPIO_Init+0x298>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aaa:	4a54      	ldr	r2, [pc, #336]	; (8001bfc <HAL_GPIO_Init+0x29c>)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_GPIO_Init+0x2a0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x19e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_GPIO_Init+0x2a4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x19a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_GPIO_Init+0x2a8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x196>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_GPIO_Init+0x2ac>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x192>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x1a0>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e004      	b.n	8001b00 <HAL_GPIO_Init+0x1a0>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x1a0>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x1a0>
 8001afe:	2300      	movs	r3, #0
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	f002 0203 	and.w	r2, r2, #3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b10:	493a      	ldr	r1, [pc, #232]	; (8001bfc <HAL_GPIO_Init+0x29c>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4938      	ldr	r1, [pc, #224]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4933      	ldr	r1, [pc, #204]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	492e      	ldr	r1, [pc, #184]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4929      	ldr	r1, [pc, #164]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	4924      	ldr	r1, [pc, #144]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	491f      	ldr	r1, [pc, #124]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	491a      	ldr	r1, [pc, #104]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60cb      	str	r3, [r1, #12]
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	4915      	ldr	r1, [pc, #84]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f47f aed0 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	372c      	adds	r7, #44	; 0x2c
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	10210000 	.word	0x10210000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	10120000 	.word	0x10120000
 8001bec:	10310000 	.word	0x10310000
 8001bf0:	10320000 	.word	0x10320000
 8001bf4:	10220000 	.word	0x10220000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40011400 	.word	0x40011400
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f806 	bl	8001c74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e26c      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8087 	beq.w	8001db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00c      	beq.n	8001cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d112      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
 8001cc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d06c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x12c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d168      	bne.n	8001db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e246      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x76>
 8001cf0:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7f      	ldr	r2, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e02e      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b78      	ldr	r3, [pc, #480]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0xbc>
 8001d2a:	4b72      	ldr	r3, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a71      	ldr	r2, [pc, #452]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a67      	ldr	r2, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fc4c 	bl	8001600 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fc48 	bl	8001600 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1fa      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe4>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc38 	bl	8001600 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fc34 	bl	8001600 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1e6      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x10c>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d063      	beq.n	8001e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1ba      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4939      	ldr	r1, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e03a      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fbed 	bl	8001600 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fbe9 	bl	8001600 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e19b      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fbcc 	bl	8001600 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fbc8 	bl	8001600 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e17a      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d03a      	beq.n	8001f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fbac 	bl	8001600 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fba8 	bl	8001600 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e15a      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fada 	bl	8002484 <RCC_Delay>
 8001ed0:	e01c      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fb92 	bl	8001600 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ede:	e00f      	b.n	8001f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fb8e 	bl	8001600 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d908      	bls.n	8001f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e140      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	42420000 	.word	0x42420000
 8001efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b9e      	ldr	r3, [pc, #632]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e9      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a6 	beq.w	8002066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b97      	ldr	r3, [pc, #604]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b94      	ldr	r3, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a93      	ldr	r2, [pc, #588]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b8e      	ldr	r3, [pc, #568]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4b8b      	ldr	r3, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8a      	ldr	r2, [pc, #552]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fb4f 	bl	8001600 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fb4b 	bl	8001600 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0fd      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x312>
 8001f8c:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a7a      	ldr	r2, [pc, #488]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e02d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x334>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	e01c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x356>
 8001fc4:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d015      	beq.n	800202a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff faff 	bl	8001600 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7ff fafb 	bl	8001600 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0ab      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ee      	beq.n	8002006 <HAL_RCC_OscConfig+0x37e>
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff fae9 	bl	8001600 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fae5 	bl	8001600 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e095      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a47      	ldr	r2, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8081 	beq.w	8002172 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d061      	beq.n	8002140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d146      	bne.n	8002112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fab9 	bl	8001600 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fab5 	bl	8001600 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e067      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	492d      	ldr	r1, [pc, #180]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a19      	ldr	r1, [r3, #32]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	430b      	orrs	r3, r1
 80020de:	4927      	ldr	r1, [pc, #156]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fa89 	bl	8001600 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fa85 	bl	8001600 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e037      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46a>
 8002110:	e02f      	b.n	8002172 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fa72 	bl	8001600 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fa6e 	bl	8001600 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e020      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x498>
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e013      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	42420060 	.word	0x42420060

08002188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0d0      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4965      	ldr	r1, [pc, #404]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e073      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06b      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4936      	ldr	r1, [pc, #216]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7ff f9c2 	bl	8001600 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff f9be 	bl	8001600 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d210      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	fa21 f303 	lsr.w	r3, r1, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f920 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	08003f8c 	.word	0x08003f8c
 8002354:	20000004 	.word	0x20000004
 8002358:	2000003c 	.word	0x2000003c

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b490      	push	{r4, r7}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002362:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002364:	1d3c      	adds	r4, r7, #4
 8002366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb4>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x40>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x46>
 800239a:	e02d      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_RCC_GetSysClockFreq+0xbc>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	e02d      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	0c9b      	lsrs	r3, r3, #18
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ae:	4413      	add	r3, r2
 80023b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c5b      	lsrs	r3, r3, #17
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ce:	4413      	add	r3, r2
 80023d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023da:	fb02 f203 	mul.w	r2, r2, r3
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	623b      	str	r3, [r7, #32]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023fa:	623b      	str	r3, [r7, #32]
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc90      	pop	{r4, r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	08003f78 	.word	0x08003f78
 8002410:	08003f88 	.word	0x08003f88
 8002414:	40021000 	.word	0x40021000
 8002418:	007a1200 	.word	0x007a1200
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_RCC_GetHCLKFreq+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff2 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 800243c:	4601      	mov	r1, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	08003f9c 	.word	0x08003f9c

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffde 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	08003f9c 	.word	0x08003f9c

08002484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <RCC_Delay+0x34>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <RCC_Delay+0x38>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0a5b      	lsrs	r3, r3, #9
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a0:	bf00      	nop
  }
  while (Delay --);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <RCC_Delay+0x1c>
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000004 	.word	0x20000004
 80024bc:	10624dd3 	.word	0x10624dd3

080024c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e053      	b.n	800257a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fe fba7 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002508:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	ea42 0103 	orr.w	r1, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	0c1a      	lsrs	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f002 0204 	and.w	r2, r2, #4
 8002558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b088      	sub	sp, #32
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_SPI_Transmit+0x22>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e11e      	b.n	80027e2 <HAL_SPI_Transmit+0x260>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ac:	f7ff f828 	bl	8001600 <HAL_GetTick>
 80025b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d002      	beq.n	80025c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
 80025c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025c6:	e103      	b.n	80027d0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_SPI_Transmit+0x52>
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025d8:	e0fa      	b.n	80027d0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2203      	movs	r2, #3
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002620:	d107      	bne.n	8002632 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002630:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d007      	beq.n	8002650 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002658:	d14b      	bne.n	80026f2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_SPI_Transmit+0xe6>
 8002662:	8afb      	ldrh	r3, [r7, #22]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d13e      	bne.n	80026e6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c9a      	adds	r2, r3, #2
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800268c:	e02b      	b.n	80026e6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d112      	bne.n	80026c2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	; 0x36
 80026c0:	e011      	b.n	80026e6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c2:	f7fe ff9d 	bl	8001600 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d803      	bhi.n	80026da <HAL_SPI_Transmit+0x158>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d102      	bne.n	80026e0 <HAL_SPI_Transmit+0x15e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026e4:	e074      	b.n	80027d0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ce      	bne.n	800268e <HAL_SPI_Transmit+0x10c>
 80026f0:	e04c      	b.n	800278c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_SPI_Transmit+0x17e>
 80026fa:	8afb      	ldrh	r3, [r7, #22]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d140      	bne.n	8002782 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002726:	e02c      	b.n	8002782 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d113      	bne.n	800275e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	86da      	strh	r2, [r3, #54]	; 0x36
 800275c:	e011      	b.n	8002782 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800275e:	f7fe ff4f 	bl	8001600 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d803      	bhi.n	8002776 <HAL_SPI_Transmit+0x1f4>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d102      	bne.n	800277c <HAL_SPI_Transmit+0x1fa>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002780:	e026      	b.n	80027d0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1cd      	bne.n	8002728 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fb91 	bl	8002eb8 <SPI_EndRxTxTransaction>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	77fb      	strb	r3, [r7, #31]
 80027cc:	e000      	b.n	80027d0 <HAL_SPI_Transmit+0x24e>
  }

error:
 80027ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b088      	sub	sp, #32
 80027ee:	af02      	add	r7, sp, #8
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002806:	d112      	bne.n	800282e <HAL_SPI_Receive+0x44>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2204      	movs	r2, #4
 8002814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f8e9 	bl	80029fc <HAL_SPI_TransmitReceive>
 800282a:	4603      	mov	r3, r0
 800282c:	e0e2      	b.n	80029f4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_SPI_Receive+0x52>
 8002838:	2302      	movs	r3, #2
 800283a:	e0db      	b.n	80029f4 <HAL_SPI_Receive+0x20a>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002844:	f7fe fedc 	bl	8001600 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d002      	beq.n	800285c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800285a:	e0c2      	b.n	80029e2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Receive+0x7e>
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800286c:	e0b9      	b.n	80029e2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2204      	movs	r2, #4
 8002872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	88fa      	ldrh	r2, [r7, #6]
 8002886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b4:	d107      	bne.n	80028c6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d007      	beq.n	80028e4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d162      	bne.n	80029b2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028ec:	e02e      	b.n	800294c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d115      	bne.n	8002928 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f103 020c 	add.w	r2, r3, #12
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002926:	e011      	b.n	800294c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002928:	f7fe fe6a 	bl	8001600 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d803      	bhi.n	8002940 <HAL_SPI_Receive+0x156>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d102      	bne.n	8002946 <HAL_SPI_Receive+0x15c>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	75fb      	strb	r3, [r7, #23]
          goto error;
 800294a:	e04a      	b.n	80029e2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1cb      	bne.n	80028ee <HAL_SPI_Receive+0x104>
 8002956:	e031      	b.n	80029bc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d113      	bne.n	800298e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	b292      	uxth	r2, r2
 8002972:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800298c:	e011      	b.n	80029b2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800298e:	f7fe fe37 	bl	8001600 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d803      	bhi.n	80029a6 <HAL_SPI_Receive+0x1bc>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d102      	bne.n	80029ac <HAL_SPI_Receive+0x1c2>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029b0:	e017      	b.n	80029e2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1cd      	bne.n	8002958 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fa27 	bl	8002e14 <SPI_EndRxTransaction>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
 80029de:	e000      	b.n	80029e2 <HAL_SPI_Receive+0x1f8>
  }

error :
 80029e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x26>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e18a      	b.n	8002d38 <HAL_SPI_TransmitReceive+0x33c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2a:	f7fe fde9 	bl	8001600 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d00f      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x70>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a52:	d107      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x68>
 8002a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d003      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a6a:	e15b      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x82>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x82>
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d103      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a84:	e14e      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d003      	beq.n	8002a9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2205      	movs	r2, #5
 8002a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d007      	beq.n	8002aee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af6:	d178      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_SPI_TransmitReceive+0x10a>
 8002b00:	8b7b      	ldrh	r3, [r7, #26]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d166      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	1c9a      	adds	r2, r3, #2
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2a:	e053      	b.n	8002bd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d11b      	bne.n	8002b72 <HAL_SPI_TransmitReceive+0x176>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_SPI_TransmitReceive+0x176>
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d113      	bne.n	8002b72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	1c9a      	adds	r2, r3, #2
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d119      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x1b8>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d014      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	b292      	uxth	r2, r2
 8002b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	1c9a      	adds	r2, r3, #2
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bb4:	f7fe fd24 	bl	8001600 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d807      	bhi.n	8002bd4 <HAL_SPI_TransmitReceive+0x1d8>
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d003      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bd2:	e0a7      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1a6      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x130>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1a1      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x130>
 8002be8:	e07c      	b.n	8002ce4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x1fc>
 8002bf2:	8b7b      	ldrh	r3, [r7, #26]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d16b      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1e:	e057      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d11c      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x26c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d017      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x26c>
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d114      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d119      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x2ae>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d014      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002caa:	f7fe fca9 	bl	8001600 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_TransmitReceive+0x2c6>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_TransmitReceive+0x2cc>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cce:	e029      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1a2      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x224>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d19d      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f8e5 	bl	8002eb8 <SPI_EndRxTxTransaction>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d00:	e010      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	e000      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d50:	e04c      	b.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d048      	beq.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d5a:	f7fe fc51 	bl	8001600 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d902      	bls.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d13d      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d88:	d111      	bne.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d92:	d004      	beq.n	8002d9e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d107      	bne.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db6:	d10f      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e00f      	b.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d1a3      	bne.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e28:	d111      	bne.n	8002e4e <SPI_EndRxTransaction+0x3a>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e32:	d004      	beq.n	8002e3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d107      	bne.n	8002e4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e56:	d117      	bne.n	8002e88 <SPI_EndRxTransaction+0x74>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d112      	bne.n	8002e88 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff ff67 	bl	8002d40 <SPI_WaitFlagStateUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01a      	beq.n	8002eae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e013      	b.n	8002eb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff54 	bl	8002d40 <SPI_WaitFlagStateUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0220 	orr.w	r2, r3, #32
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e000      	b.n	8002eb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff ff36 	bl	8002d40 <SPI_WaitFlagStateUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e000      	b.n	8002eec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e01d      	b.n	8002f42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd ffcc 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f000 f8e4 	bl	8003100 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d007      	beq.n	8002f7c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIM_ConfigClockSource+0x18>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0a6      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x166>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d067      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x120>
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d80b      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x6c>
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d073      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x140>
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d802      	bhi.n	8002ff2 <HAL_TIM_ConfigClockSource+0x62>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d06f      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ff0:	e078      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d06c      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x140>
 8002ff6:	2b30      	cmp	r3, #48	; 0x30
 8002ff8:	d06a      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ffa:	e073      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ffc:	2b70      	cmp	r3, #112	; 0x70
 8002ffe:	d00d      	beq.n	800301c <HAL_TIM_ConfigClockSource+0x8c>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d804      	bhi.n	800300e <HAL_TIM_ConfigClockSource+0x7e>
 8003004:	2b50      	cmp	r3, #80	; 0x50
 8003006:	d033      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xe0>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d041      	beq.n	8003090 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800300c:	e06a      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d066      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x152>
 8003014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003018:	d017      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800301a:	e063      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f000 f941 	bl	80032b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800303e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e04c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f000 f92a 	bl	80032b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800306c:	609a      	str	r2, [r3, #8]
      break;
 800306e:	e039      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 f8a1 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2150      	movs	r1, #80	; 0x50
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f8f8 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 800308e:	e029      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	461a      	mov	r2, r3
 800309e:	f000 f8bf 	bl	8003220 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2160      	movs	r1, #96	; 0x60
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f8e8 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 80030ae:	e019      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	461a      	mov	r2, r3
 80030be:	f000 f881 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2140      	movs	r1, #64	; 0x40
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f8d8 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 80030ce:	e009      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 f8cf 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 80030e0:	e000      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80030e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <TIM_Base_SetConfig+0xb8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00b      	beq.n	8003130 <TIM_Base_SetConfig+0x30>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0x30>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <TIM_Base_SetConfig+0xbc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x30>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <TIM_Base_SetConfig+0xc0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <TIM_Base_SetConfig+0xb8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0x62>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0x62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a19      	ldr	r2, [pc, #100]	; (80031bc <TIM_Base_SetConfig+0xbc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <TIM_Base_SetConfig+0xc0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <TIM_Base_SetConfig+0xb8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d103      	bne.n	80031a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	615a      	str	r2, [r3, #20]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800

080031c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f023 030a 	bic.w	r3, r3, #10
 8003200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f023 0210 	bic.w	r2, r3, #16
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800324a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800325c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	621a      	str	r2, [r3, #32]
}
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	f043 0307 	orr.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	021a      	lsls	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e032      	b.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003340:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4313      	orrs	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e03f      	b.n	800340a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe f86a 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 faef 	bl	80039a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b20      	cmp	r3, #32
 800342a:	d130      	bne.n	800348e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_UART_Transmit_IT+0x26>
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e029      	b.n	8003490 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_UART_Transmit_IT+0x38>
 8003446:	2302      	movs	r3, #2
 8003448:	e022      	b.n	8003490 <HAL_UART_Transmit_IT+0x7e>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003488:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d140      	bne.n	8003536 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Receive_IT+0x26>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e039      	b.n	8003538 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Receive_IT+0x38>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e032      	b.n	8003538 <HAL_UART_Receive_IT+0x9e>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2222      	movs	r2, #34	; 0x22
 80034f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003510:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0220 	orr.w	r2, r2, #32
 8003530:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e000      	b.n	8003538 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
  }
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
	...

08003544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x52>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f984 	bl	800389c <UART_Receive_IT>
      return;
 8003594:	e0cc      	b.n	8003730 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80ab 	beq.w	80036f4 <HAL_UART_IRQHandler+0x1b0>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_UART_IRQHandler+0x70>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a0 	beq.w	80036f4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_UART_IRQHandler+0x90>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_UART_IRQHandler+0xb0>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	f043 0202 	orr.w	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_UART_IRQHandler+0xd0>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_UART_IRQHandler+0xf0>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f043 0208 	orr.w	r2, r3, #8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d078      	beq.n	800372e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_UART_IRQHandler+0x112>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f923 	bl	800389c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_UART_IRQHandler+0x13a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d031      	beq.n	80036e2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f86e 	bl	8003760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d023      	beq.n	80036da <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ae:	4a22      	ldr	r2, [pc, #136]	; (8003738 <HAL_UART_IRQHandler+0x1f4>)
 80036b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f8dc 	bl	8001874 <HAL_DMA_Abort_IT>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e00e      	b.n	80036f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f83b 	bl	800374e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e00a      	b.n	80036f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f837 	bl	800374e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e006      	b.n	80036f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f833 	bl	800374e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80036ee:	e01e      	b.n	800372e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	bf00      	nop
    return;
 80036f2:	e01c      	b.n	800372e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_UART_IRQHandler+0x1cc>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f85a 	bl	80037c2 <UART_Transmit_IT>
    return;
 800370e:	e00f      	b.n	8003730 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_UART_IRQHandler+0x1ec>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f8a1 	bl	800386c <UART_EndTransmit_IT>
    return;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_UART_IRQHandler+0x1ec>
    return;
 800372e:	bf00      	nop
  }
}
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	0800379b 	.word	0x0800379b

0800373c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003776:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff ffca 	bl	800374e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b21      	cmp	r3, #33	; 0x21
 80037d4:	d144      	bne.n	8003860 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037de:	d11a      	bne.n	8003816 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d105      	bne.n	800380a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	1c9a      	adds	r2, r3, #2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	621a      	str	r2, [r3, #32]
 8003808:	e00e      	b.n	8003828 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]
 8003814:	e008      	b.n	8003828 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6211      	str	r1, [r2, #32]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4619      	mov	r1, r3
 8003836:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800385a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003882:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff55 	bl	800373c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b22      	cmp	r3, #34	; 0x22
 80038ae:	d171      	bne.n	8003994 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d123      	bne.n	8003902 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
 80038e4:	e029      	b.n	800393a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003900:	e01b      	b.n	800393a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6858      	ldr	r0, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6291      	str	r1, [r2, #40]	; 0x28
 800391a:	b2c2      	uxtb	r2, r0
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e00c      	b.n	800393a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	1c58      	adds	r0, r3, #1
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	6288      	str	r0, [r1, #40]	; 0x28
 8003932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29b      	uxth	r3, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4619      	mov	r1, r3
 8003948:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800394a:	2b00      	cmp	r3, #0
 800394c:	d120      	bne.n	8003990 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0220 	bic.w	r2, r2, #32
 800395c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800396c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fc fd7e 	bl	8000488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e002      	b.n	8003996 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039da:	f023 030c 	bic.w	r3, r3, #12
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <UART_SetConfig+0x1ac>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d14e      	bne.n	8003aa6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7fe fd28 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003a0c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009a      	lsls	r2, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	0119      	lsls	r1, r3, #4
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4b42      	ldr	r3, [pc, #264]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003a46:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2064      	movs	r0, #100	; 0x64
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a64:	4419      	add	r1, r3
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009a      	lsls	r2, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	fb00 f303 	mul.w	r3, r0, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	3332      	adds	r3, #50	; 0x32
 8003a90:	4a2f      	ldr	r2, [pc, #188]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003aa4:	e04d      	b.n	8003b42 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7fe fcc5 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009a      	lsls	r2, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	0119      	lsls	r1, r3, #4
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009a      	lsls	r2, r3, #2
 8003ad6:	441a      	add	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003ae4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2064      	movs	r0, #100	; 0x64
 8003aec:	fb00 f303 	mul.w	r3, r0, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	3332      	adds	r3, #50	; 0x32
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b02:	4419      	add	r1, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009a      	lsls	r2, r3, #2
 8003b0e:	441a      	add	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003b1c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2064      	movs	r0, #100	; 0x64
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	3332      	adds	r3, #50	; 0x32
 8003b2e:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <UART_SetConfig+0x1b0>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	440a      	add	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	51eb851f 	.word	0x51eb851f

08003b54 <atoi>:
 8003b54:	220a      	movs	r2, #10
 8003b56:	2100      	movs	r1, #0
 8003b58:	f000 b8e2 	b.w	8003d20 <strtol>

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	2500      	movs	r5, #0
 8003b60:	4e0c      	ldr	r6, [pc, #48]	; (8003b94 <__libc_init_array+0x38>)
 8003b62:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b64:	1ba4      	subs	r4, r4, r6
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	42a5      	cmp	r5, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	f000 f910 	bl	8003d90 <_init>
 8003b70:	2500      	movs	r5, #0
 8003b72:	4e0a      	ldr	r6, [pc, #40]	; (8003b9c <__libc_init_array+0x40>)
 8003b74:	4c0a      	ldr	r4, [pc, #40]	; (8003ba0 <__libc_init_array+0x44>)
 8003b76:	1ba4      	subs	r4, r4, r6
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	42a5      	cmp	r5, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b84:	4798      	blx	r3
 8003b86:	3501      	adds	r5, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b8e:	4798      	blx	r3
 8003b90:	3501      	adds	r5, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08004168 	.word	0x08004168
 8003b98:	08004168 	.word	0x08004168
 8003b9c:	08004168 	.word	0x08004168
 8003ba0:	0800416c 	.word	0x0800416c

08003ba4 <memcpy>:
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	1e43      	subs	r3, r0, #1
 8003ba8:	440a      	add	r2, r1
 8003baa:	4291      	cmp	r1, r2
 8003bac:	d100      	bne.n	8003bb0 <memcpy+0xc>
 8003bae:	bd10      	pop	{r4, pc}
 8003bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bb8:	e7f7      	b.n	8003baa <memcpy+0x6>

08003bba <memset>:
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4402      	add	r2, r0
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d100      	bne.n	8003bc4 <memset+0xa>
 8003bc2:	4770      	bx	lr
 8003bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc8:	e7f9      	b.n	8003bbe <memset+0x4>

08003bca <strncpy>:
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	4604      	mov	r4, r0
 8003bce:	3901      	subs	r1, #1
 8003bd0:	b902      	cbnz	r2, 8003bd4 <strncpy+0xa>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	4623      	mov	r3, r4
 8003bd6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003bda:	1e56      	subs	r6, r2, #1
 8003bdc:	f803 5b01 	strb.w	r5, [r3], #1
 8003be0:	b92d      	cbnz	r5, 8003bee <strncpy+0x24>
 8003be2:	4414      	add	r4, r2
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d0f4      	beq.n	8003bd2 <strncpy+0x8>
 8003be8:	f803 5b01 	strb.w	r5, [r3], #1
 8003bec:	e7fa      	b.n	8003be4 <strncpy+0x1a>
 8003bee:	461c      	mov	r4, r3
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	e7ed      	b.n	8003bd0 <strncpy+0x6>

08003bf4 <strstr>:
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	7803      	ldrb	r3, [r0, #0]
 8003bf8:	b17b      	cbz	r3, 8003c1a <strstr+0x26>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	7823      	ldrb	r3, [r4, #0]
 8003bfe:	4620      	mov	r0, r4
 8003c00:	1c66      	adds	r6, r4, #1
 8003c02:	b17b      	cbz	r3, 8003c24 <strstr+0x30>
 8003c04:	1e4a      	subs	r2, r1, #1
 8003c06:	1e63      	subs	r3, r4, #1
 8003c08:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003c0c:	b14d      	cbz	r5, 8003c22 <strstr+0x2e>
 8003c0e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003c12:	4634      	mov	r4, r6
 8003c14:	42af      	cmp	r7, r5
 8003c16:	d0f7      	beq.n	8003c08 <strstr+0x14>
 8003c18:	e7f0      	b.n	8003bfc <strstr+0x8>
 8003c1a:	780b      	ldrb	r3, [r1, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf18      	it	ne
 8003c20:	2000      	movne	r0, #0
 8003c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c24:	4618      	mov	r0, r3
 8003c26:	e7fc      	b.n	8003c22 <strstr+0x2e>

08003c28 <_strtol_l.isra.0>:
 8003c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	4689      	mov	r9, r1
 8003c30:	4692      	mov	sl, r2
 8003c32:	461e      	mov	r6, r3
 8003c34:	460f      	mov	r7, r1
 8003c36:	463d      	mov	r5, r7
 8003c38:	9808      	ldr	r0, [sp, #32]
 8003c3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c3e:	f000 f885 	bl	8003d4c <__locale_ctype_ptr_l>
 8003c42:	4420      	add	r0, r4
 8003c44:	7843      	ldrb	r3, [r0, #1]
 8003c46:	f013 0308 	ands.w	r3, r3, #8
 8003c4a:	d132      	bne.n	8003cb2 <_strtol_l.isra.0+0x8a>
 8003c4c:	2c2d      	cmp	r4, #45	; 0x2d
 8003c4e:	d132      	bne.n	8003cb6 <_strtol_l.isra.0+0x8e>
 8003c50:	2201      	movs	r2, #1
 8003c52:	787c      	ldrb	r4, [r7, #1]
 8003c54:	1cbd      	adds	r5, r7, #2
 8003c56:	2e00      	cmp	r6, #0
 8003c58:	d05d      	beq.n	8003d16 <_strtol_l.isra.0+0xee>
 8003c5a:	2e10      	cmp	r6, #16
 8003c5c:	d109      	bne.n	8003c72 <_strtol_l.isra.0+0x4a>
 8003c5e:	2c30      	cmp	r4, #48	; 0x30
 8003c60:	d107      	bne.n	8003c72 <_strtol_l.isra.0+0x4a>
 8003c62:	782b      	ldrb	r3, [r5, #0]
 8003c64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c68:	2b58      	cmp	r3, #88	; 0x58
 8003c6a:	d14f      	bne.n	8003d0c <_strtol_l.isra.0+0xe4>
 8003c6c:	2610      	movs	r6, #16
 8003c6e:	786c      	ldrb	r4, [r5, #1]
 8003c70:	3502      	adds	r5, #2
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	bf14      	ite	ne
 8003c76:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003c7a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003c7e:	2700      	movs	r7, #0
 8003c80:	fbb1 fcf6 	udiv	ip, r1, r6
 8003c84:	4638      	mov	r0, r7
 8003c86:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003c8a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003c8e:	2b09      	cmp	r3, #9
 8003c90:	d817      	bhi.n	8003cc2 <_strtol_l.isra.0+0x9a>
 8003c92:	461c      	mov	r4, r3
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	dd23      	ble.n	8003ce0 <_strtol_l.isra.0+0xb8>
 8003c98:	1c7b      	adds	r3, r7, #1
 8003c9a:	d007      	beq.n	8003cac <_strtol_l.isra.0+0x84>
 8003c9c:	4584      	cmp	ip, r0
 8003c9e:	d31c      	bcc.n	8003cda <_strtol_l.isra.0+0xb2>
 8003ca0:	d101      	bne.n	8003ca6 <_strtol_l.isra.0+0x7e>
 8003ca2:	45a6      	cmp	lr, r4
 8003ca4:	db19      	blt.n	8003cda <_strtol_l.isra.0+0xb2>
 8003ca6:	2701      	movs	r7, #1
 8003ca8:	fb00 4006 	mla	r0, r0, r6, r4
 8003cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cb0:	e7eb      	b.n	8003c8a <_strtol_l.isra.0+0x62>
 8003cb2:	462f      	mov	r7, r5
 8003cb4:	e7bf      	b.n	8003c36 <_strtol_l.isra.0+0xe>
 8003cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8003cb8:	bf04      	itt	eq
 8003cba:	1cbd      	addeq	r5, r7, #2
 8003cbc:	787c      	ldrbeq	r4, [r7, #1]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	e7c9      	b.n	8003c56 <_strtol_l.isra.0+0x2e>
 8003cc2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003cc6:	2b19      	cmp	r3, #25
 8003cc8:	d801      	bhi.n	8003cce <_strtol_l.isra.0+0xa6>
 8003cca:	3c37      	subs	r4, #55	; 0x37
 8003ccc:	e7e2      	b.n	8003c94 <_strtol_l.isra.0+0x6c>
 8003cce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003cd2:	2b19      	cmp	r3, #25
 8003cd4:	d804      	bhi.n	8003ce0 <_strtol_l.isra.0+0xb8>
 8003cd6:	3c57      	subs	r4, #87	; 0x57
 8003cd8:	e7dc      	b.n	8003c94 <_strtol_l.isra.0+0x6c>
 8003cda:	f04f 37ff 	mov.w	r7, #4294967295
 8003cde:	e7e5      	b.n	8003cac <_strtol_l.isra.0+0x84>
 8003ce0:	1c7b      	adds	r3, r7, #1
 8003ce2:	d108      	bne.n	8003cf6 <_strtol_l.isra.0+0xce>
 8003ce4:	2322      	movs	r3, #34	; 0x22
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	f8c8 3000 	str.w	r3, [r8]
 8003cec:	f1ba 0f00 	cmp.w	sl, #0
 8003cf0:	d107      	bne.n	8003d02 <_strtol_l.isra.0+0xda>
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	b102      	cbz	r2, 8003cfa <_strtol_l.isra.0+0xd2>
 8003cf8:	4240      	negs	r0, r0
 8003cfa:	f1ba 0f00 	cmp.w	sl, #0
 8003cfe:	d0f8      	beq.n	8003cf2 <_strtol_l.isra.0+0xca>
 8003d00:	b10f      	cbz	r7, 8003d06 <_strtol_l.isra.0+0xde>
 8003d02:	f105 39ff 	add.w	r9, r5, #4294967295
 8003d06:	f8ca 9000 	str.w	r9, [sl]
 8003d0a:	e7f2      	b.n	8003cf2 <_strtol_l.isra.0+0xca>
 8003d0c:	2430      	movs	r4, #48	; 0x30
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d1af      	bne.n	8003c72 <_strtol_l.isra.0+0x4a>
 8003d12:	2608      	movs	r6, #8
 8003d14:	e7ad      	b.n	8003c72 <_strtol_l.isra.0+0x4a>
 8003d16:	2c30      	cmp	r4, #48	; 0x30
 8003d18:	d0a3      	beq.n	8003c62 <_strtol_l.isra.0+0x3a>
 8003d1a:	260a      	movs	r6, #10
 8003d1c:	e7a9      	b.n	8003c72 <_strtol_l.isra.0+0x4a>
	...

08003d20 <strtol>:
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <strtol+0x24>)
 8003d22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	4d08      	ldr	r5, [pc, #32]	; (8003d48 <strtol+0x28>)
 8003d28:	6a23      	ldr	r3, [r4, #32]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf08      	it	eq
 8003d2e:	462b      	moveq	r3, r5
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	460a      	mov	r2, r1
 8003d36:	4601      	mov	r1, r0
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7ff ff75 	bl	8003c28 <_strtol_l.isra.0>
 8003d3e:	b003      	add	sp, #12
 8003d40:	bd30      	pop	{r4, r5, pc}
 8003d42:	bf00      	nop
 8003d44:	20000044 	.word	0x20000044
 8003d48:	200000a8 	.word	0x200000a8

08003d4c <__locale_ctype_ptr_l>:
 8003d4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003d50:	4770      	bx	lr

08003d52 <__ascii_mbtowc>:
 8003d52:	b082      	sub	sp, #8
 8003d54:	b901      	cbnz	r1, 8003d58 <__ascii_mbtowc+0x6>
 8003d56:	a901      	add	r1, sp, #4
 8003d58:	b142      	cbz	r2, 8003d6c <__ascii_mbtowc+0x1a>
 8003d5a:	b14b      	cbz	r3, 8003d70 <__ascii_mbtowc+0x1e>
 8003d5c:	7813      	ldrb	r3, [r2, #0]
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	7812      	ldrb	r2, [r2, #0]
 8003d62:	1c10      	adds	r0, r2, #0
 8003d64:	bf18      	it	ne
 8003d66:	2001      	movne	r0, #1
 8003d68:	b002      	add	sp, #8
 8003d6a:	4770      	bx	lr
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	e7fb      	b.n	8003d68 <__ascii_mbtowc+0x16>
 8003d70:	f06f 0001 	mvn.w	r0, #1
 8003d74:	e7f8      	b.n	8003d68 <__ascii_mbtowc+0x16>

08003d76 <__ascii_wctomb>:
 8003d76:	b149      	cbz	r1, 8003d8c <__ascii_wctomb+0x16>
 8003d78:	2aff      	cmp	r2, #255	; 0xff
 8003d7a:	bf8b      	itete	hi
 8003d7c:	238a      	movhi	r3, #138	; 0x8a
 8003d7e:	700a      	strbls	r2, [r1, #0]
 8003d80:	6003      	strhi	r3, [r0, #0]
 8003d82:	2001      	movls	r0, #1
 8003d84:	bf88      	it	hi
 8003d86:	f04f 30ff 	movhi.w	r0, #4294967295
 8003d8a:	4770      	bx	lr
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4770      	bx	lr

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
