
nRf24L01_uart_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002524  08002524  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002524  08002524  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002524  08002524  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800252c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08002538  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002538  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d44e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216f  00000000  00000000  0002d483  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  0002f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  000303e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ac4  00000000  00000000  000310b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af61  00000000  00000000  00045b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000747ff  00000000  00000000  00050ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c52d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  000c5350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002498 	.word	0x08002498

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002498 	.word	0x08002498

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4b      	ldr	r2, [pc, #300]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x148>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b43      	ldr	r3, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3d      	ldr	r3, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3a      	ldr	r3, [pc, #232]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001d6:	f000 fe6f 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2110      	movs	r1, #16
 80001de:	4833      	ldr	r0, [pc, #204]	; (80002ac <MX_GPIO_Init+0x150>)
 80001e0:	f000 fe6a 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	482c      	ldr	r0, [pc, #176]	; (80002ac <MX_GPIO_Init+0x150>)
 80001fa:	f000 fd03 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001fe:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000204:	2303      	movs	r3, #3
 8000206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f000 fcf8 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9 
 8000214:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000218:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021a:	2303      	movs	r3, #3
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000226:	f000 fced 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4819      	ldr	r0, [pc, #100]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000242:	f000 fcdf 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000246:	2310      	movs	r3, #16
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_GPIO_Init+0x150>)
 800025e:	f000 fcd1 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000274:	f000 fcc6 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000278:	2304      	movs	r3, #4
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027c:	2303      	movs	r3, #3
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000288:	f000 fcbc 	bl	8000c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f000 fc0a 	bl	8000aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000296:	2028      	movs	r0, #40	; 0x28
 8000298:	f000 fc23 	bl	8000ae2 <HAL_NVIC_EnableIRQ>

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40011400 	.word	0x40011400

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c0:	f000 faba 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c4:	f000 f81e 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c8:	f7ff ff48 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002cc:	f000 fa1e 	bl	800070c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80002d0:	f000 f878 	bl	80003c4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002d4:	f000 f998 	bl	8000608 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	sendString("\n\rPeriphery initialized.", &huart2);
 80002d8:	4906      	ldr	r1, [pc, #24]	; (80002f4 <main+0x38>)
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <main+0x3c>)
 80002dc:	f000 fa02 	bl	80006e4 <sendString>
	HAL_UART_Receive_IT(&huart2, uartReceiveBuffer, 4);
 80002e0:	2204      	movs	r2, #4
 80002e2:	4906      	ldr	r1, [pc, #24]	; (80002fc <main+0x40>)
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <main+0x38>)
 80002e6:	f001 fd4e 	bl	8001d86 <HAL_UART_Receive_IT>
	sendString("\n\rUart set as listener.", &huart2);
 80002ea:	4902      	ldr	r1, [pc, #8]	; (80002f4 <main+0x38>)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <main+0x44>)
 80002ee:	f000 f9f9 	bl	80006e4 <sendString>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <main+0x36>
 80002f4:	20000100 	.word	0x20000100
 80002f8:	080024b0 	.word	0x080024b0
 80002fc:	20000048 	.word	0x20000048
 8000300:	080024cc 	.word	0x080024cc

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b090      	sub	sp, #64	; 0x40
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f8b8 	bl	8002488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	2310      	movs	r3, #16
 8000330:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000336:	2300      	movs	r3, #0
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800033a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800033e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fdf1 	bl	8000f2c <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000350:	f000 f832 	bl	80003b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2302      	movs	r3, #2
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f85c 	bl	800142c <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800037a:	f000 f81d 	bl	80003b8 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, uartReceiveBuffer, 4);
 8000390:	2204      	movs	r2, #4
 8000392:	4906      	ldr	r1, [pc, #24]	; (80003ac <HAL_UART_RxCpltCallback+0x24>)
 8000394:	4806      	ldr	r0, [pc, #24]	; (80003b0 <HAL_UART_RxCpltCallback+0x28>)
 8000396:	f001 fcf6 	bl	8001d86 <HAL_UART_Receive_IT>
	sendString("\r\nData received.", &huart2);
 800039a:	4905      	ldr	r1, [pc, #20]	; (80003b0 <HAL_UART_RxCpltCallback+0x28>)
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <HAL_UART_RxCpltCallback+0x2c>)
 800039e:	f000 f9a1 	bl	80006e4 <sendString>
//	sendShortInteger(uartReceiveBuffer[0], &huart2);
//	sendBuffer(uartReceiveBuffer,8, &huart2);

}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000048 	.word	0x20000048
 80003b0:	20000100 	.word	0x20000100
 80003b4:	080024e4 	.word	0x080024e4

080003b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_SPI1_Init+0x64>)
 80003ca:	4a18      	ldr	r2, [pc, #96]	; (800042c <MX_SPI1_Init+0x68>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_SPI1_Init+0x64>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_SPI1_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_SPI1_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_SPI1_Init+0x64>)
 80003f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_SPI1_Init+0x64>)
 80003f8:	2210      	movs	r2, #16
 80003fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_SPI1_Init+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_SPI1_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_SPI1_Init+0x64>)
 8000410:	220a      	movs	r2, #10
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_SPI1_Init+0x64>)
 8000416:	f001 f9a5 	bl	8001764 <HAL_SPI_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000420:	f7ff ffca 	bl	80003b8 <Error_Handler>
  }

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000068 	.word	0x20000068
 800042c:	40013000 	.word	0x40013000

08000430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a1b      	ldr	r2, [pc, #108]	; (80004b8 <HAL_SPI_MspInit+0x88>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d12f      	bne.n	80004b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000450:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a19      	ldr	r2, [pc, #100]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000480:	23a0      	movs	r3, #160	; 0xa0
 8000482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000484:	2302      	movs	r3, #2
 8000486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000488:	2303      	movs	r3, #3
 800048a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	480b      	ldr	r0, [pc, #44]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 8000494:	f000 fbb6 	bl	8000c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 80004ac:	f000 fbaa 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40013000 	.word	0x40013000
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a14      	ldr	r2, [pc, #80]	; (8000520 <HAL_MspInit+0x5c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_MspInit+0x5c>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_MspInit+0x60>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_MspInit+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <HardFault_Handler+0x4>

0800053a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <MemManage_Handler+0x4>

08000540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <BusFault_Handler+0x4>

08000546 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <UsageFault_Handler+0x4>

0800054c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000574:	f000 f9a6 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USART2_IRQHandler+0x10>)
 8000582:	f001 fc55 	bl	8001e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000100 	.word	0x20000100

08000590 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000594:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000598:	f000 fca6 	bl	8000ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <SystemInit+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <SystemInit+0x5c>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <SystemInit+0x5c>)
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	4911      	ldr	r1, [pc, #68]	; (80005fc <SystemInit+0x5c>)
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <SystemInit+0x60>)
 80005b8:	4013      	ands	r3, r2
 80005ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <SystemInit+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <SystemInit+0x5c>)
 80005c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SystemInit+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <SystemInit+0x5c>)
 80005d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SystemInit+0x5c>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SystemInit+0x5c>)
 80005de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SystemInit+0x5c>)
 80005e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <SystemInit+0x64>)
 80005ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	f8ff0000 	.word	0xf8ff0000
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM1_Init+0x98>)
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_TIM1_Init+0x98>)
 800062c:	2247      	movs	r2, #71	; 0x47
 800062e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_TIM1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM1_Init+0x98>)
 8000638:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800063c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_TIM1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM1_Init+0x98>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_TIM1_Init+0x98>)
 8000652:	f001 f8e8 	bl	8001826 <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800065c:	f7ff feac 	bl	80003b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4619      	mov	r1, r3
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_TIM1_Init+0x98>)
 800066e:	f001 f905 	bl	800187c <HAL_TIM_ConfigClockSource>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000678:	f7ff fe9e 	bl	80003b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_TIM1_Init+0x98>)
 800068a:	f001 faa7 	bl	8001bdc <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000694:	f7ff fe90 	bl	80003b8 <Error_Handler>
  }

}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000c0 	.word	0x200000c0
 80006a4:	40012c00 	.word	0x40012c00

080006a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_TIM_Base_MspInit+0x34>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d10b      	bne.n	80006d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40012c00 	.word	0x40012c00
 80006e0:	40021000 	.word	0x40021000

080006e4 <sendString>:
		sendShortInteger(buffer[i], huart);
	}
	return 1;
}

void sendString(const char *str, UART_HandleTypeDef *huart) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t*) str, strlen(str));
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fd2c 	bl	800014c <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f001 fafe 	bl	8001cfe <HAL_UART_Transmit_IT>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f001 fa8e 	bl	8001c64 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f7ff fe33 	bl	80003b8 <Error_Handler>
  }

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000100 	.word	0x20000100
 800075c:	40004400 	.word	0x40004400

08000760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <HAL_UART_MspInit+0x80>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d12b      	bne.n	80007d8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_UART_MspInit+0x84>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <HAL_UART_MspInit+0x84>)
 8000786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_MspInit+0x84>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_UART_MspInit+0x84>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <HAL_UART_MspInit+0x84>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_UART_MspInit+0x84>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b0:	230c      	movs	r3, #12
 80007b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <HAL_UART_MspInit+0x88>)
 80007c4:	f000 fa1e 	bl	8000c04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2026      	movs	r0, #38	; 0x26
 80007ce:	f000 f96c 	bl	8000aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007d2:	2026      	movs	r0, #38	; 0x26
 80007d4:	f000 f985 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40004400 	.word	0x40004400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ee:	e003      	b.n	80007f8 <LoopCopyDataInit>

080007f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007f6:	3104      	adds	r1, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000800:	d3f6      	bcc.n	80007f0 <CopyDataInit>
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000804:	e002      	b.n	800080c <LoopFillZerobss>

08000806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000808:	f842 3b04 	str.w	r3, [r2], #4

0800080c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000810:	d3f9      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff fec5 	bl	80005a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 fe13 	bl	8002440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fd4f 	bl	80002bc <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r3, =_sidata
 8000820:	0800252c 	.word	0x0800252c
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000828:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000830:	20000144 	.word	0x20000144

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f923 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fe36 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f93b 	bl	8000afe <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f903 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000140 	.word	0x20000140

080008e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	20000140 	.word	0x20000140

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4906      	ldr	r1, [pc, #24]	; (8000994 <__NVIC_EnableIRQ+0x34>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100

08000998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	db0a      	blt.n	80009c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	490c      	ldr	r1, [pc, #48]	; (80009e4 <__NVIC_SetPriority+0x4c>)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	0112      	lsls	r2, r2, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	440b      	add	r3, r1
 80009bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c0:	e00a      	b.n	80009d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4908      	ldr	r1, [pc, #32]	; (80009e8 <__NVIC_SetPriority+0x50>)
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	f003 030f 	and.w	r3, r3, #15
 80009ce:	3b04      	subs	r3, #4
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	440b      	add	r3, r1
 80009d6:	761a      	strb	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	f1c3 0307 	rsb	r3, r3, #7
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	bf28      	it	cs
 8000a0a:	2304      	movcs	r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3304      	adds	r3, #4
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d902      	bls.n	8000a1c <NVIC_EncodePriority+0x30>
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3b03      	subs	r3, #3
 8000a1a:	e000      	b.n	8000a1e <NVIC_EncodePriority+0x32>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	f04f 32ff 	mov.w	r2, #4294967295
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	401a      	ands	r2, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a34:	f04f 31ff 	mov.w	r1, #4294967295
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	43d9      	mvns	r1, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	4313      	orrs	r3, r2
         );
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3724      	adds	r7, #36	; 0x24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff90 	bl	8000998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff2d 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff42 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ff90 	bl	80009ec <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff5f 	bl	8000998 <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff35 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffa2 	bl	8000a50 <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d005      	beq.n	8000b3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2204      	movs	r2, #4
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e051      	b.n	8000bde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 020e 	bic.w	r2, r2, #14
 8000b48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0201 	bic.w	r2, r2, #1
 8000b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_DMA_Abort_IT+0xd0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d029      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0xa0>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_DMA_Abort_IT+0xd4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d022      	beq.n	8000bb4 <HAL_DMA_Abort_IT+0x9c>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_DMA_Abort_IT+0xd8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d01a      	beq.n	8000bae <HAL_DMA_Abort_IT+0x96>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_DMA_Abort_IT+0xdc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d012      	beq.n	8000ba8 <HAL_DMA_Abort_IT+0x90>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_DMA_Abort_IT+0xe0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00a      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x8a>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_DMA_Abort_IT+0xe4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d102      	bne.n	8000b9c <HAL_DMA_Abort_IT+0x84>
 8000b96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b9a:	e00e      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba0:	e00b      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba6:	e008      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	e005      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	e002      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	e000      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <HAL_DMA_Abort_IT+0xe8>)
 8000bbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	4798      	blx	r3
    } 
  }
  return status;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020008 	.word	0x40020008
 8000bec:	4002001c 	.word	0x4002001c
 8000bf0:	40020030 	.word	0x40020030
 8000bf4:	40020044 	.word	0x40020044
 8000bf8:	40020058 	.word	0x40020058
 8000bfc:	4002006c 	.word	0x4002006c
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b08b      	sub	sp, #44	; 0x2c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e127      	b.n	8000e68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8116 	bne.w	8000e62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b12      	cmp	r3, #18
 8000c3c:	d034      	beq.n	8000ca8 <HAL_GPIO_Init+0xa4>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d80d      	bhi.n	8000c5e <HAL_GPIO_Init+0x5a>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d02b      	beq.n	8000c9e <HAL_GPIO_Init+0x9a>
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d804      	bhi.n	8000c54 <HAL_GPIO_Init+0x50>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d031      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d01c      	beq.n	8000c8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c52:	e048      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d043      	beq.n	8000ce0 <HAL_GPIO_Init+0xdc>
 8000c58:	2b11      	cmp	r3, #17
 8000c5a:	d01b      	beq.n	8000c94 <HAL_GPIO_Init+0x90>
          break;
 8000c5c:	e043      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c5e:	4a89      	ldr	r2, [pc, #548]	; (8000e84 <HAL_GPIO_Init+0x280>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d026      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
 8000c64:	4a87      	ldr	r2, [pc, #540]	; (8000e84 <HAL_GPIO_Init+0x280>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d806      	bhi.n	8000c78 <HAL_GPIO_Init+0x74>
 8000c6a:	4a87      	ldr	r2, [pc, #540]	; (8000e88 <HAL_GPIO_Init+0x284>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d020      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
 8000c70:	4a86      	ldr	r2, [pc, #536]	; (8000e8c <HAL_GPIO_Init+0x288>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d01d      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
          break;
 8000c76:	e036      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c78:	4a85      	ldr	r2, [pc, #532]	; (8000e90 <HAL_GPIO_Init+0x28c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d019      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
 8000c7e:	4a85      	ldr	r2, [pc, #532]	; (8000e94 <HAL_GPIO_Init+0x290>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d016      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
 8000c84:	4a84      	ldr	r2, [pc, #528]	; (8000e98 <HAL_GPIO_Init+0x294>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0xae>
          break;
 8000c8a:	e02c      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e028      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e023      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e01e      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	330c      	adds	r3, #12
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e019      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e012      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d105      	bne.n	8000cd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	611a      	str	r2, [r3, #16]
          break;
 8000cd2:	e008      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	615a      	str	r2, [r3, #20]
          break;
 8000cde:	e002      	b.n	8000ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	2bff      	cmp	r3, #255	; 0xff
 8000cea:	d801      	bhi.n	8000cf0 <HAL_GPIO_Init+0xec>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	e001      	b.n	8000cf4 <HAL_GPIO_Init+0xf0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2bff      	cmp	r3, #255	; 0xff
 8000cfa:	d802      	bhi.n	8000d02 <HAL_GPIO_Init+0xfe>
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	e002      	b.n	8000d08 <HAL_GPIO_Init+0x104>
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	3b08      	subs	r3, #8
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	401a      	ands	r2, r3
 8000d1a:	6a39      	ldr	r1, [r7, #32]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	431a      	orrs	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 8096 	beq.w	8000e62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d36:	4b59      	ldr	r3, [pc, #356]	; (8000e9c <HAL_GPIO_Init+0x298>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a58      	ldr	r2, [pc, #352]	; (8000e9c <HAL_GPIO_Init+0x298>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HAL_GPIO_Init+0x298>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d4e:	4a54      	ldr	r2, [pc, #336]	; (8000ea0 <HAL_GPIO_Init+0x29c>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x19e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x19a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a49      	ldr	r2, [pc, #292]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x196>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x192>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x1a0>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x1a0>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x1a0>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x1a0>
 8000da2:	2300      	movs	r3, #0
 8000da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db4:	493a      	ldr	r1, [pc, #232]	; (8000ea0 <HAL_GPIO_Init+0x29c>)
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4938      	ldr	r1, [pc, #224]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
 8000dda:	e006      	b.n	8000dea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ddc:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4933      	ldr	r1, [pc, #204]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	492e      	ldr	r1, [pc, #184]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	604b      	str	r3, [r1, #4]
 8000e02:	e006      	b.n	8000e12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	4929      	ldr	r1, [pc, #164]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	4924      	ldr	r1, [pc, #144]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	608b      	str	r3, [r1, #8]
 8000e2a:	e006      	b.n	8000e3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	491f      	ldr	r1, [pc, #124]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	491a      	ldr	r1, [pc, #104]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60cb      	str	r3, [r1, #12]
 8000e52:	e006      	b.n	8000e62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	4915      	ldr	r1, [pc, #84]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	3301      	adds	r3, #1
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f47f aed0 	bne.w	8000c18 <HAL_GPIO_Init+0x14>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	372c      	adds	r7, #44	; 0x2c
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	10210000 	.word	0x10210000
 8000e88:	10110000 	.word	0x10110000
 8000e8c:	10120000 	.word	0x10120000
 8000e90:	10310000 	.word	0x10310000
 8000e94:	10320000 	.word	0x10320000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	611a      	str	r2, [r3, #16]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f806 	bl	8000f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40010400 	.word	0x40010400

08000f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e26c      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8087 	beq.w	800105a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d00c      	beq.n	8000f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f58:	4b8f      	ldr	r3, [pc, #572]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d112      	bne.n	8000f8a <HAL_RCC_OscConfig+0x5e>
 8000f64:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d10b      	bne.n	8000f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d06c      	beq.n	8001058 <HAL_RCC_OscConfig+0x12c>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d168      	bne.n	8001058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e246      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f92:	d106      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x76>
 8000f94:	4b80      	ldr	r3, [pc, #512]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a7f      	ldr	r2, [pc, #508]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e02e      	b.n	8001000 <HAL_RCC_OscConfig+0xd4>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x98>
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a7a      	ldr	r2, [pc, #488]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a77      	ldr	r2, [pc, #476]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e01d      	b.n	8001000 <HAL_RCC_OscConfig+0xd4>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0xbc>
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a71      	ldr	r2, [pc, #452]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0xd4>
 8000fe8:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a6a      	ldr	r2, [pc, #424]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a67      	ldr	r2, [pc, #412]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fc6e 	bl	80008e8 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fc6a 	bl	80008e8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e1fa      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0xe4>
 800102e:	e014      	b.n	800105a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fc5a 	bl	80008e8 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fc56 	bl	80008e8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1e6      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x10c>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d063      	beq.n	800112e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b08      	cmp	r3, #8
 800107c:	d11c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x18c>
 800107e:	4b46      	ldr	r3, [pc, #280]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d116      	bne.n	80010b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x176>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e1ba      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4939      	ldr	r1, [pc, #228]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	e03a      	b.n	800112e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d020      	beq.n	8001102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_RCC_OscConfig+0x270>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc0f 	bl	80008e8 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fc0b 	bl	80008e8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e19b      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4927      	ldr	r1, [pc, #156]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
 8001100:	e015      	b.n	800112e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_RCC_OscConfig+0x270>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fbee 	bl	80008e8 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fbea 	bl	80008e8 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e17a      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d03a      	beq.n	80011b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d019      	beq.n	8001176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_RCC_OscConfig+0x274>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fbce 	bl	80008e8 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fbca 	bl	80008e8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e15a      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fada 	bl	8001728 <RCC_Delay>
 8001174:	e01c      	b.n	80011b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_RCC_OscConfig+0x274>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fbb4 	bl	80008e8 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001182:	e00f      	b.n	80011a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fbb0 	bl	80008e8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d908      	bls.n	80011a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e140      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	42420000 	.word	0x42420000
 80011a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a4:	4b9e      	ldr	r3, [pc, #632]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e9      	bne.n	8001184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80a6 	beq.w	800130a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c2:	4b97      	ldr	r3, [pc, #604]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10d      	bne.n	80011ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b94      	ldr	r3, [pc, #592]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a93      	ldr	r2, [pc, #588]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b91      	ldr	r3, [pc, #580]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ea:	4b8e      	ldr	r3, [pc, #568]	; (8001424 <HAL_RCC_OscConfig+0x4f8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d118      	bne.n	8001228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <HAL_RCC_OscConfig+0x4f8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a8a      	ldr	r2, [pc, #552]	; (8001424 <HAL_RCC_OscConfig+0x4f8>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb71 	bl	80008e8 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff fb6d 	bl	80008e8 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0fd      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x4f8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x312>
 8001230:	4b7b      	ldr	r3, [pc, #492]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a7a      	ldr	r2, [pc, #488]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	e02d      	b.n	800129a <HAL_RCC_OscConfig+0x36e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x334>
 8001246:	4b76      	ldr	r3, [pc, #472]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a75      	ldr	r2, [pc, #468]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6213      	str	r3, [r2, #32]
 8001252:	4b73      	ldr	r3, [pc, #460]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a72      	ldr	r2, [pc, #456]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	6213      	str	r3, [r2, #32]
 800125e:	e01c      	b.n	800129a <HAL_RCC_OscConfig+0x36e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x356>
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6213      	str	r3, [r2, #32]
 8001280:	e00b      	b.n	800129a <HAL_RCC_OscConfig+0x36e>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a66      	ldr	r2, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6213      	str	r3, [r2, #32]
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a63      	ldr	r2, [pc, #396]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d015      	beq.n	80012ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fb21 	bl	80008e8 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7ff fb1d 	bl	80008e8 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0ab      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0ee      	beq.n	80012aa <HAL_RCC_OscConfig+0x37e>
 80012cc:	e014      	b.n	80012f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fb0b 	bl	80008e8 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fb07 	bl	80008e8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e095      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ec:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ee      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a47      	ldr	r2, [pc, #284]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8081 	beq.w	8001416 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d061      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d146      	bne.n	80013b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_RCC_OscConfig+0x4fc>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fadb 	bl	80008e8 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fad7 	bl	80008e8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e067      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d108      	bne.n	8001370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	492d      	ldr	r1, [pc, #180]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a19      	ldr	r1, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	430b      	orrs	r3, r1
 8001382:	4927      	ldr	r1, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x4fc>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff faab 	bl	80008e8 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff faa7 	bl	80008e8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e037      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x46a>
 80013b4:	e02f      	b.n	8001416 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_RCC_OscConfig+0x4fc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fa94 	bl	80008e8 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fa90 	bl	80008e8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e020      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x498>
 80013e2:	e018      	b.n	8001416 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e013      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	429a      	cmp	r2, r3
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	40007000 	.word	0x40007000
 8001428:	42420060 	.word	0x42420060

0800142c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0d0      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d910      	bls.n	8001470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 0207 	bic.w	r2, r3, #7
 8001456:	4965      	ldr	r1, [pc, #404]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d040      	beq.n	800154c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d115      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e073      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e06b      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 0203 	bic.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff f9e4 	bl	80008e8 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff f9e0 	bl	80008e8 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e053      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 020c 	and.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	429a      	cmp	r2, r3
 800154a:	d1eb      	bne.n	8001524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d210      	bcs.n	800157c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4922      	ldr	r1, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4601      	mov	r1, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	fa21 f303 	lsr.w	r3, r1, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1cc>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1d0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f942 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	0800250c 	.word	0x0800250c
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	b490      	push	{r4, r7}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001608:	1d3c      	adds	r4, r7, #4
 800160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b04      	cmp	r3, #4
 8001638:	d002      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x40>
 800163a:	2b08      	cmp	r3, #8
 800163c:	d003      	beq.n	8001646 <HAL_RCC_GetSysClockFreq+0x46>
 800163e:	e02d      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001642:	623b      	str	r3, [r7, #32]
      break;
 8001644:	e02d      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	0c9b      	lsrs	r3, r3, #18
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001652:	4413      	add	r3, r2
 8001654:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001658:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0c5b      	lsrs	r3, r3, #17
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001672:	4413      	add	r3, r2
 8001674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001678:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800167e:	fb02 f203 	mul.w	r2, r2, r3
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
 800168a:	e004      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	623b      	str	r3, [r7, #32]
      break;
 800169a:	e002      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800169e:	623b      	str	r3, [r7, #32]
      break;
 80016a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a2:	6a3b      	ldr	r3, [r7, #32]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc90      	pop	{r4, r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	080024f8 	.word	0x080024f8
 80016b4:	08002508 	.word	0x08002508
 80016b8:	40021000 	.word	0x40021000
 80016bc:	007a1200 	.word	0x007a1200
 80016c0:	003d0900 	.word	0x003d0900

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016dc:	f7ff fff2 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 80016e0:	4601      	mov	r1, r0
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	0800251c 	.word	0x0800251c

08001700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001704:	f7ff ffde 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 8001708:	4601      	mov	r1, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0adb      	lsrs	r3, r3, #11
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	0800251c 	.word	0x0800251c

08001728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <RCC_Delay+0x34>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <RCC_Delay+0x38>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0a5b      	lsrs	r3, r3, #9
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001744:	bf00      	nop
  }
  while (Delay --);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	60fa      	str	r2, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <RCC_Delay+0x1c>
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000000 	.word	0x20000000
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e053      	b.n	800181e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7fe fe4d 	bl	8000430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	ea42 0103 	orr.w	r1, r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	0c1a      	lsrs	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f002 0204 	and.w	r2, r2, #4
 80017fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69da      	ldr	r2, [r3, #28]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e01d      	b.n	8001874 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d106      	bne.n	8001852 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7fe ff2b 	bl	80006a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3304      	adds	r3, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f000 f8c1 	bl	80019ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_TIM_ConfigClockSource+0x18>
 8001890:	2302      	movs	r3, #2
 8001892:	e0a6      	b.n	80019e2 <HAL_TIM_ConfigClockSource+0x166>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80018b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d067      	beq.n	800199c <HAL_TIM_ConfigClockSource+0x120>
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	d80b      	bhi.n	80018e8 <HAL_TIM_ConfigClockSource+0x6c>
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d073      	beq.n	80019bc <HAL_TIM_ConfigClockSource+0x140>
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d802      	bhi.n	80018de <HAL_TIM_ConfigClockSource+0x62>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d06f      	beq.n	80019bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80018dc:	e078      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d06c      	beq.n	80019bc <HAL_TIM_ConfigClockSource+0x140>
 80018e2:	2b30      	cmp	r3, #48	; 0x30
 80018e4:	d06a      	beq.n	80019bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80018e6:	e073      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018e8:	2b70      	cmp	r3, #112	; 0x70
 80018ea:	d00d      	beq.n	8001908 <HAL_TIM_ConfigClockSource+0x8c>
 80018ec:	2b70      	cmp	r3, #112	; 0x70
 80018ee:	d804      	bhi.n	80018fa <HAL_TIM_ConfigClockSource+0x7e>
 80018f0:	2b50      	cmp	r3, #80	; 0x50
 80018f2:	d033      	beq.n	800195c <HAL_TIM_ConfigClockSource+0xe0>
 80018f4:	2b60      	cmp	r3, #96	; 0x60
 80018f6:	d041      	beq.n	800197c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80018f8:	e06a      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	d066      	beq.n	80019ce <HAL_TIM_ConfigClockSource+0x152>
 8001900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001904:	d017      	beq.n	8001936 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001906:	e063      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f000 f941 	bl	8001b9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800192a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	609a      	str	r2, [r3, #8]
      break;
 8001934:	e04c      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f000 f92a 	bl	8001b9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001958:	609a      	str	r2, [r3, #8]
      break;
 800195a:	e039      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	461a      	mov	r2, r3
 800196a:	f000 f8a1 	bl	8001ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2150      	movs	r1, #80	; 0x50
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f8f8 	bl	8001b6a <TIM_ITRx_SetConfig>
      break;
 800197a:	e029      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	461a      	mov	r2, r3
 800198a:	f000 f8bf 	bl	8001b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2160      	movs	r1, #96	; 0x60
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f8e8 	bl	8001b6a <TIM_ITRx_SetConfig>
      break;
 800199a:	e019      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f000 f881 	bl	8001ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f8d8 	bl	8001b6a <TIM_ITRx_SetConfig>
      break;
 80019ba:	e009      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f000 f8cf 	bl	8001b6a <TIM_ITRx_SetConfig>
      break;
 80019cc:	e000      	b.n	80019d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80019ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <TIM_Base_SetConfig+0xb8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00b      	beq.n	8001a1c <TIM_Base_SetConfig+0x30>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d007      	beq.n	8001a1c <TIM_Base_SetConfig+0x30>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <TIM_Base_SetConfig+0xbc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d003      	beq.n	8001a1c <TIM_Base_SetConfig+0x30>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a25      	ldr	r2, [pc, #148]	; (8001aac <TIM_Base_SetConfig+0xc0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d108      	bne.n	8001a2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <TIM_Base_SetConfig+0xb8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00b      	beq.n	8001a4e <TIM_Base_SetConfig+0x62>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d007      	beq.n	8001a4e <TIM_Base_SetConfig+0x62>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <TIM_Base_SetConfig+0xbc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d003      	beq.n	8001a4e <TIM_Base_SetConfig+0x62>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a18      	ldr	r2, [pc, #96]	; (8001aac <TIM_Base_SetConfig+0xc0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <TIM_Base_SetConfig+0xb8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d103      	bne.n	8001a94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800

08001ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	f023 0201 	bic.w	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f023 030a 	bic.w	r3, r3, #10
 8001aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	621a      	str	r2, [r3, #32]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f023 0210 	bic.w	r2, r3, #16
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	031b      	lsls	r3, r3, #12
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	621a      	str	r2, [r3, #32]
}
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f043 0307 	orr.w	r3, r3, #7
 8001b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b087      	sub	sp, #28
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	021a      	lsls	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	609a      	str	r2, [r3, #8]
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e032      	b.n	8001c5a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e03f      	b.n	8001cf6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7fe fd68 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2224      	movs	r2, #36	; 0x24
 8001c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 faef 	bl	800228c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d130      	bne.n	8001d7a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_UART_Transmit_IT+0x26>
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e029      	b.n	8001d7c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_UART_Transmit_IT+0x38>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e022      	b.n	8001d7c <HAL_UART_Transmit_IT+0x7e>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2221      	movs	r2, #33	; 0x21
 8001d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	4613      	mov	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d140      	bne.n	8001e22 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_UART_Receive_IT+0x26>
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e039      	b.n	8001e24 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Receive_IT+0x38>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e032      	b.n	8001e24 <HAL_UART_Receive_IT+0x9e>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	88fa      	ldrh	r2, [r7, #6]
 8001dd6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2222      	movs	r2, #34	; 0x22
 8001de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_UART_IRQHandler+0x52>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f984 	bl	8002188 <UART_Receive_IT>
      return;
 8001e80:	e0cc      	b.n	800201c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80ab 	beq.w	8001fe0 <HAL_UART_IRQHandler+0x1b0>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x70>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80a0 	beq.w	8001fe0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x90>
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_UART_IRQHandler+0xb0>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	f043 0202 	orr.w	r2, r3, #2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_UART_IRQHandler+0xd0>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_UART_IRQHandler+0xf0>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	f043 0208 	orr.w	r2, r3, #8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d078      	beq.n	800201a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_UART_IRQHandler+0x112>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f923 	bl	8002188 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_UART_IRQHandler+0x13a>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d031      	beq.n	8001fce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f86e 	bl	800204c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d023      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d013      	beq.n	8001fbe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_UART_IRQHandler+0x1f4>)
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fdb8 	bl	8000b18 <HAL_DMA_Abort_IT>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fbc:	e00e      	b.n	8001fdc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f83b 	bl	800203a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	e00a      	b.n	8001fdc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f837 	bl	800203a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fcc:	e006      	b.n	8001fdc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f833 	bl	800203a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001fda:	e01e      	b.n	800201a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fdc:	bf00      	nop
    return;
 8001fde:	e01c      	b.n	800201a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_UART_IRQHandler+0x1cc>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f85a 	bl	80020ae <UART_Transmit_IT>
    return;
 8001ffa:	e00f      	b.n	800201c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_UART_IRQHandler+0x1ec>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8a1 	bl	8002158 <UART_EndTransmit_IT>
    return;
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <HAL_UART_IRQHandler+0x1ec>
    return;
 800201a:	bf00      	nop
  }
}
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	08002087 	.word	0x08002087

08002028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002062:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff ffca 	bl	800203a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b21      	cmp	r3, #33	; 0x21
 80020c0:	d144      	bne.n	800214c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ca:	d11a      	bne.n	8002102 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	1c9a      	adds	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	621a      	str	r2, [r3, #32]
 80020f4:	e00e      	b.n	8002114 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	621a      	str	r2, [r3, #32]
 8002100:	e008      	b.n	8002114 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6211      	str	r1, [r2, #32]
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4619      	mov	r1, r3
 8002122:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10f      	bne.n	8002148 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002136:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002146:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff55 	bl	8002028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b22      	cmp	r3, #34	; 0x22
 800219a:	d171      	bne.n	8002280 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a4:	d123      	bne.n	80021ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10e      	bne.n	80021d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	1c9a      	adds	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
 80021d0:	e029      	b.n	8002226 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
 80021ec:	e01b      	b.n	8002226 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6858      	ldr	r0, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	1c59      	adds	r1, r3, #1
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6291      	str	r1, [r2, #40]	; 0x28
 8002206:	b2c2      	uxtb	r2, r0
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e00c      	b.n	8002226 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	1c58      	adds	r0, r3, #1
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6288      	str	r0, [r1, #40]	; 0x28
 800221e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4619      	mov	r1, r3
 8002234:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002236:	2b00      	cmp	r3, #0
 8002238:	d120      	bne.n	800227c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0220 	bic.w	r2, r2, #32
 8002248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002258:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe f888 	bl	8000388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e002      	b.n	8002282 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022c6:	f023 030c 	bic.w	r3, r3, #12
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a52      	ldr	r2, [pc, #328]	; (8002438 <UART_SetConfig+0x1ac>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d14e      	bne.n	8002392 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022f4:	f7ff fa04 	bl	8001700 <HAL_RCC_GetPCLK2Freq>
 80022f8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	4a4a      	ldr	r2, [pc, #296]	; (800243c <UART_SetConfig+0x1b0>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	0119      	lsls	r1, r3, #4
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002330:	4b42      	ldr	r3, [pc, #264]	; (800243c <UART_SetConfig+0x1b0>)
 8002332:	fba3 0302 	umull	r0, r3, r3, r2
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2064      	movs	r0, #100	; 0x64
 800233a:	fb00 f303 	mul.w	r3, r0, r3
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	3332      	adds	r3, #50	; 0x32
 8002344:	4a3d      	ldr	r2, [pc, #244]	; (800243c <UART_SetConfig+0x1b0>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002350:	4419      	add	r1, r3
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009a      	lsls	r2, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fbb2 f2f3 	udiv	r2, r2, r3
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <UART_SetConfig+0x1b0>)
 800236a:	fba3 0302 	umull	r0, r3, r3, r2
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2064      	movs	r0, #100	; 0x64
 8002372:	fb00 f303 	mul.w	r3, r0, r3
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	3332      	adds	r3, #50	; 0x32
 800237c:	4a2f      	ldr	r2, [pc, #188]	; (800243c <UART_SetConfig+0x1b0>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	f003 020f 	and.w	r2, r3, #15
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	440a      	add	r2, r1
 800238e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002390:	e04d      	b.n	800242e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002392:	f7ff f9a1 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002396:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	441a      	add	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4a23      	ldr	r2, [pc, #140]	; (800243c <UART_SetConfig+0x1b0>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	0119      	lsls	r1, r3, #4
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <UART_SetConfig+0x1b0>)
 80023d0:	fba3 0302 	umull	r0, r3, r3, r2
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	2064      	movs	r0, #100	; 0x64
 80023d8:	fb00 f303 	mul.w	r3, r0, r3
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	3332      	adds	r3, #50	; 0x32
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <UART_SetConfig+0x1b0>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ee:	4419      	add	r1, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fbb2 f2f3 	udiv	r2, r2, r3
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <UART_SetConfig+0x1b0>)
 8002408:	fba3 0302 	umull	r0, r3, r3, r2
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	fb00 f303 	mul.w	r3, r0, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <UART_SetConfig+0x1b0>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	440a      	add	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40013800 	.word	0x40013800
 800243c:	51eb851f 	.word	0x51eb851f

08002440 <__libc_init_array>:
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	2500      	movs	r5, #0
 8002444:	4e0c      	ldr	r6, [pc, #48]	; (8002478 <__libc_init_array+0x38>)
 8002446:	4c0d      	ldr	r4, [pc, #52]	; (800247c <__libc_init_array+0x3c>)
 8002448:	1ba4      	subs	r4, r4, r6
 800244a:	10a4      	asrs	r4, r4, #2
 800244c:	42a5      	cmp	r5, r4
 800244e:	d109      	bne.n	8002464 <__libc_init_array+0x24>
 8002450:	f000 f822 	bl	8002498 <_init>
 8002454:	2500      	movs	r5, #0
 8002456:	4e0a      	ldr	r6, [pc, #40]	; (8002480 <__libc_init_array+0x40>)
 8002458:	4c0a      	ldr	r4, [pc, #40]	; (8002484 <__libc_init_array+0x44>)
 800245a:	1ba4      	subs	r4, r4, r6
 800245c:	10a4      	asrs	r4, r4, #2
 800245e:	42a5      	cmp	r5, r4
 8002460:	d105      	bne.n	800246e <__libc_init_array+0x2e>
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002468:	4798      	blx	r3
 800246a:	3501      	adds	r5, #1
 800246c:	e7ee      	b.n	800244c <__libc_init_array+0xc>
 800246e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002472:	4798      	blx	r3
 8002474:	3501      	adds	r5, #1
 8002476:	e7f2      	b.n	800245e <__libc_init_array+0x1e>
 8002478:	08002524 	.word	0x08002524
 800247c:	08002524 	.word	0x08002524
 8002480:	08002524 	.word	0x08002524
 8002484:	08002528 	.word	0x08002528

08002488 <memset>:
 8002488:	4603      	mov	r3, r0
 800248a:	4402      	add	r2, r0
 800248c:	4293      	cmp	r3, r2
 800248e:	d100      	bne.n	8002492 <memset+0xa>
 8002490:	4770      	bx	lr
 8002492:	f803 1b01 	strb.w	r1, [r3], #1
 8002496:	e7f9      	b.n	800248c <memset+0x4>

08002498 <_init>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr

080024a4 <_fini>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr
