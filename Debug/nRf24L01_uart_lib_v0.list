
nRf24L01_uart_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003994  08003994  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003994  08003994  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800399c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000038  080039d4  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080039d4  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001070d  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ed  00000000  00000000  0003076e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014cad  00000000  00000000  00034cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bea9  00000000  00000000  00049985  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000751de  00000000  00000000  0005582e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caa0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004674  00000000  00000000  000caa88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08003768 	.word	0x08003768

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08003768 	.word	0x08003768

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4b      	ldr	r2, [pc, #300]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x148>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b43      	ldr	r3, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3d      	ldr	r3, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3a      	ldr	r3, [pc, #232]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001d6:	f001 fac7 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2110      	movs	r1, #16
 80001de:	4833      	ldr	r0, [pc, #204]	; (80002ac <MX_GPIO_Init+0x150>)
 80001e0:	f001 fac2 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	482c      	ldr	r0, [pc, #176]	; (80002ac <MX_GPIO_Init+0x150>)
 80001fa:	f001 f95b 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001fe:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000204:	2303      	movs	r3, #3
 8000206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f001 f950 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9 
 8000214:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000218:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021a:	2303      	movs	r3, #3
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000226:	f001 f945 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4819      	ldr	r0, [pc, #100]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000242:	f001 f937 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000246:	2310      	movs	r3, #16
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_GPIO_Init+0x150>)
 800025e:	f001 f929 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000274:	f001 f91e 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000278:	2304      	movs	r3, #4
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027c:	2303      	movs	r3, #3
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000288:	f001 f914 	bl	80014b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f001 f862 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000296:	2028      	movs	r0, #40	; 0x28
 8000298:	f001 f87b 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40011400 	.word	0x40011400

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 feef 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f88f 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f7ff ff47 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ce:	f000 fe53 	bl	8000f78 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80002d2:	f000 fbe7 	bl	8000aa4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002d6:	f000 fd07 	bl	8000ce8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	sendString("\n\rPeriphery initialized.", &huart2);
 80002da:	4934      	ldr	r1, [pc, #208]	; (80003ac <main+0xf0>)
 80002dc:	4834      	ldr	r0, [pc, #208]	; (80003b0 <main+0xf4>)
 80002de:	f000 fe13 	bl	8000f08 <sendString>
	HAL_Delay(200);
 80002e2:	20c8      	movs	r0, #200	; 0xc8
 80002e4:	f000 ff40 	bl	8001168 <HAL_Delay>

	HAL_TIM_Base_Start(&htim1);
 80002e8:	4832      	ldr	r0, [pc, #200]	; (80003b4 <main+0xf8>)
 80002ea:	f002 fbd8 	bl	8002a9e <HAL_TIM_Base_Start>
	sendString("\n\rTIM start counting.", &huart2);
 80002ee:	492f      	ldr	r1, [pc, #188]	; (80003ac <main+0xf0>)
 80002f0:	4831      	ldr	r0, [pc, #196]	; (80003b8 <main+0xfc>)
 80002f2:	f000 fe09 	bl	8000f08 <sendString>
	HAL_Delay(200);
 80002f6:	20c8      	movs	r0, #200	; 0xc8
 80002f8:	f000 ff36 	bl	8001168 <HAL_Delay>

	HAL_UART_Receive_IT(&huart2, (uint8_t*) uartReceiveBuffer, UART_READ_SIZE);
 80002fc:	2210      	movs	r2, #16
 80002fe:	492f      	ldr	r1, [pc, #188]	; (80003bc <main+0x100>)
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <main+0xf0>)
 8000302:	f002 fe74 	bl	8002fee <HAL_UART_Receive_IT>
	HAL_Delay(200);
 8000306:	20c8      	movs	r0, #200	; 0xc8
 8000308:	f000 ff2e 	bl	8001168 <HAL_Delay>
	sendString("\n\rUart set as listener.", &huart2);
 800030c:	4927      	ldr	r1, [pc, #156]	; (80003ac <main+0xf0>)
 800030e:	482c      	ldr	r0, [pc, #176]	; (80003c0 <main+0x104>)
 8000310:	f000 fdfa 	bl	8000f08 <sendString>

	/* nrf24L01+ struct init*/
	nrfStruct_t *testStruct;
	testStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin,
 8000314:	2310      	movs	r3, #16
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <main+0x108>)
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2310      	movs	r3, #16
 800031e:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <main+0x10c>)
 8000320:	4924      	ldr	r1, [pc, #144]	; (80003b4 <main+0xf8>)
 8000322:	482a      	ldr	r0, [pc, #168]	; (80003cc <main+0x110>)
 8000324:	f000 fae0 	bl	80008e8 <nRF_Init>
 8000328:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* UART print RX buffer */
		if (uartRx_flag) {
 800032a:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <main+0x114>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0fa      	beq.n	800032a <main+0x6e>
			memcpy(uartTmpBuffer, uartReceiveBuffer, UART_READ_SIZE); //copy characters to temporary buffer
 8000334:	2210      	movs	r2, #16
 8000336:	4921      	ldr	r1, [pc, #132]	; (80003bc <main+0x100>)
 8000338:	4826      	ldr	r0, [pc, #152]	; (80003d4 <main+0x118>)
 800033a:	f003 f9e8 	bl	800370e <memcpy>
			resetChar(uartReceiveBuffer, sizeof(uartReceiveBuffer));
 800033e:	2120      	movs	r1, #32
 8000340:	481e      	ldr	r0, [pc, #120]	; (80003bc <main+0x100>)
 8000342:	f000 fdf4 	bl	8000f2e <resetChar>
			HAL_UART_Receive_IT(&huart2, (uint8_t*) uartReceiveBuffer,
 8000346:	2210      	movs	r2, #16
 8000348:	491c      	ldr	r1, [pc, #112]	; (80003bc <main+0x100>)
 800034a:	4818      	ldr	r0, [pc, #96]	; (80003ac <main+0xf0>)
 800034c:	f002 fe4f 	bl	8002fee <HAL_UART_Receive_IT>
			UART_READ_SIZE);

			sendString("\r\nData received.", &huart2); //log
 8000350:	4916      	ldr	r1, [pc, #88]	; (80003ac <main+0xf0>)
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <main+0x11c>)
 8000354:	f000 fdd8 	bl	8000f08 <sendString>
			HAL_Delay(100);
 8000358:	2064      	movs	r0, #100	; 0x64
 800035a:	f000 ff05 	bl	8001168 <HAL_Delay>

			if (memcmp(nrfCommandPreamble, uartTmpBuffer, PREMBLE_TABLE_SIZE)
 800035e:	2205      	movs	r2, #5
 8000360:	491c      	ldr	r1, [pc, #112]	; (80003d4 <main+0x118>)
 8000362:	481e      	ldr	r0, [pc, #120]	; (80003dc <main+0x120>)
 8000364:	f003 f9c4 	bl	80036f0 <memcmp>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d11a      	bne.n	80003a4 <main+0xe8>
					== 0) { //check four first chars - detect command
				/* Check position of EOL to shortest command length. */
				if (strlen(uartTmpBuffer) < MINIMUM_COMMAND_SIZE)
 800036e:	4819      	ldr	r0, [pc, #100]	; (80003d4 <main+0x118>)
 8000370:	f7ff feec 	bl	800014c <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	2b0a      	cmp	r3, #10
 8000378:	d804      	bhi.n	8000384 <main+0xc8>
					sendString("\r\n#nRF command invalid.", &huart2);	//log
 800037a:	490c      	ldr	r1, [pc, #48]	; (80003ac <main+0xf0>)
 800037c:	4818      	ldr	r0, [pc, #96]	; (80003e0 <main+0x124>)
 800037e:	f000 fdc3 	bl	8000f08 <sendString>
 8000382:	e00f      	b.n	80003a4 <main+0xe8>
				else {
					/* Detect command */
					uint8_t detectCommandNumber = detectCommand(uartTmpBuffer,
 8000384:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0x118>)
 8000386:	f7ff fee1 	bl	800014c <strlen>
 800038a:	4603      	mov	r3, r0
 800038c:	461a      	mov	r2, r3
 800038e:	4915      	ldr	r1, [pc, #84]	; (80003e4 <main+0x128>)
 8000390:	4810      	ldr	r0, [pc, #64]	; (80003d4 <main+0x118>)
 8000392:	f000 fd17 	bl	8000dc4 <detectCommand>
 8000396:	4603      	mov	r3, r0
 8000398:	70fb      	strb	r3, [r7, #3]
							nrfCommandTable, strlen(uartTmpBuffer));
					executeCommand(testStruct, detectCommandNumber);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	4619      	mov	r1, r3
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 fd3a 	bl	8000e18 <executeCommand>
				}
			}
			uartRx_flag = 0;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <main+0x114>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
		if (uartRx_flag) {
 80003aa:	e7be      	b.n	800032a <main+0x6e>
 80003ac:	20000190 	.word	0x20000190
 80003b0:	08003780 	.word	0x08003780
 80003b4:	20000150 	.word	0x20000150
 80003b8:	0800379c 	.word	0x0800379c
 80003bc:	200000d8 	.word	0x200000d8
 80003c0:	080037b4 	.word	0x080037b4
 80003c4:	40011000 	.word	0x40011000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	200000f8 	.word	0x200000f8
 80003d0:	20000054 	.word	0x20000054
 80003d4:	20000098 	.word	0x20000098
 80003d8:	080037cc 	.word	0x080037cc
 80003dc:	0800393c 	.word	0x0800393c
 80003e0:	080037e0 	.word	0x080037e0
 80003e4:	20000008 	.word	0x20000008

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b090      	sub	sp, #64	; 0x40
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	2228      	movs	r2, #40	; 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 f994 	bl	8003724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040a:	2301      	movs	r3, #1
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000426:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800042a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f001 f9d3 	bl	80017dc <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800043c:	f000 f828 	bl	8000490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2302      	movs	r3, #2
 8000446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fc3e 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000466:	f000 f813 	bl	8000490 <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	; 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	uartRx_flag = 1;
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <HAL_UART_RxCpltCallback+0x18>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	20000054 	.word	0x20000054

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <statusStrcut_Init>:
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
    nrfStruct->statusStruct.dataReadIrq = 0;
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004aa:	f36f 0300 	bfc	r3, #0, #1
 80004ae:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.dataSendIrq = 0;
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004b8:	f36f 0341 	bfc	r3, #1, #1
 80004bc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.maxRetr = 0;
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004c6:	f36f 0382 	bfc	r3, #2, #1
 80004ca:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004d4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80004d8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.txFull = 0;
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80004e2:	f36f 1386 	bfc	r3, #6, #1
 80004e6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

    nrfStruct->statusStruct.packetsLost = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    nrfStruct->statusStruct.packetsRetr = 0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    /* Init settigns struct */
    nrfStruct->setStruct.rxMode = 0;                //set as receiver
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7813      	ldrb	r3, [r2, #0]
 8000510:	f36f 0300 	bfc	r3, #0, #1
 8000514:	7013      	strb	r3, [r2, #0]
    nrfStruct->setStruct.channel = 0x02;            //set channel np. 0
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2202      	movs	r2, #2
 800051a:	705a      	strb	r2, [r3, #1]
    nrfStruct->setStruct.dataRate = RF_DataRate_2M; //lowest data rate
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2201      	movs	r2, #1
 8000520:	709a      	strb	r2, [r3, #2]
    nrfStruct->setStruct.powerRF = RF_PWR_0dBm;     //-12dBm power
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2203      	movs	r2, #3
 8000526:	70da      	strb	r2, [r3, #3]

    nrfStruct->setStruct.ard = 0; //auto retr. delay 250us
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	711a      	strb	r2, [r3, #4]
    nrfStruct->setStruct.arc = 3; //auto retr. counter
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	715a      	strb	r2, [r3, #5]

    nrfStruct->setStruct.enableCRC = 1;
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7bd3      	ldrb	r3, [r2, #15]
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.codingCRC = 0;
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	7bd3      	ldrb	r3, [r2, #15]
 8000542:	f36f 0341 	bfc	r3, #1, #1
 8000546:	73d3      	strb	r3, [r2, #15]

    nrfStruct->setStruct.enableTxIrq = 0;
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7bd3      	ldrb	r3, [r2, #15]
 800054c:	f36f 0382 	bfc	r3, #2, #1
 8000550:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableRxIrq = 0;
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7bd3      	ldrb	r3, [r2, #15]
 8000556:	f36f 03c3 	bfc	r3, #3, #1
 800055a:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableMaxRtIrq = 0;
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7bd3      	ldrb	r3, [r2, #15]
 8000560:	f36f 1304 	bfc	r3, #4, #1
 8000564:	73d3      	strb	r3, [r2, #15]

    /* Pipe Enable - defult pipe 0 enable only */
    nrfStruct->setStruct.pipeEn = DF_RXADDR;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2203      	movs	r2, #3
 800056a:	719a      	strb	r2, [r3, #6]
    nrfStruct->setStruct.pipeACK = DF_EN_AA;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	223f      	movs	r2, #63	; 0x3f
 8000570:	71da      	strb	r2, [r3, #7]
    nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	721a      	strb	r2, [r3, #8]

    /* Pipe RX Payload Lenght  */
    uint8_t i;
    for (i = 0; i < 6; i++)
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e007      	b.n	800058e <settingStruct_Init+0x8a>
    {
        nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	725a      	strb	r2, [r3, #9]
    for (i = 0; i < 6; i++)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	3301      	adds	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b05      	cmp	r3, #5
 8000592:	d9f4      	bls.n	800057e <settingStruct_Init+0x7a>
    }

    nrfStruct->setStruct.enableDPL = 0;
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7bd3      	ldrb	r3, [r2, #15]
 8000598:	f36f 1345 	bfc	r3, #5, #1
 800059c:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableAckPay = 0;
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7bd3      	ldrb	r3, [r2, #15]
 80005a2:	f36f 1386 	bfc	r3, #6, #1
 80005a6:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableDynACK = 0; //enable NO_ACK command
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7bd3      	ldrb	r3, [r2, #15]
 80005ac:	f36f 13c7 	bfc	r3, #7, #1
 80005b0:	73d3      	strb	r3, [r2, #15]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    /* Init address struct */
    nrfStruct->addrStruct.addrWidth = longWidth;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2203      	movs	r2, #3
 80005c8:	741a      	strb	r2, [r3, #16]
    uint8_t i;
    for (i = 0; i < 5; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e007      	b.n	80005e0 <addressStruct_Init+0x24>
    {
        nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	22e7      	movs	r2, #231	; 0xe7
 80005d8:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < 5; i++)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	3301      	adds	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d9f4      	bls.n	80005d0 <addressStruct_Init+0x14>
    }
    for (i = 0; i < 5; ++i)
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e007      	b.n	80005fc <addressStruct_Init+0x40>
    {
        nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	22e7      	movs	r2, #231	; 0xe7
 80005f4:	759a      	strb	r2, [r3, #22]
    for (i = 0; i < 5; ++i)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	3301      	adds	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d9f4      	bls.n	80005ec <addressStruct_Init+0x30>
    }
    for (i = 0; i < 5; ++i)
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e007      	b.n	8000618 <addressStruct_Init+0x5c>
    {
        nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	22c2      	movs	r2, #194	; 0xc2
 8000610:	76da      	strb	r2, [r3, #27]
    for (i = 0; i < 5; ++i)
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	3301      	adds	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	2b04      	cmp	r3, #4
 800061c:	d9f4      	bls.n	8000608 <addressStruct_Init+0x4c>
    }
    nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	22c3      	movs	r2, #195	; 0xc3
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
    nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	22c4      	movs	r2, #196	; 0xc4
 800062a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	22c5      	movs	r2, #197	; 0xc5
 8000632:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	22c6      	movs	r2, #198	; 0xc6
 800063a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    /* Init fifo struct */
    nrfStruct->fifoStruct.txReUse = 0;
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000656:	f36f 0300 	bfc	r3, #0, #1
 800065a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.rxRead = 0;
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000664:	f36f 0341 	bfc	r3, #1, #1
 8000668:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxFull = 0;
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000672:	f36f 0382 	bfc	r3, #2, #1
 8000676:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxEmpty = 1;
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.txSend = 0;
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800068e:	f36f 1304 	bfc	r3, #4, #1
 8000692:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txFull = 0;
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800069c:	f36f 1345 	bfc	r3, #5, #1
 80006a0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txEmpty = 1;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	603b      	str	r3, [r7, #0]
    /* Put pointer of SPI and TIM structures to nRF alias */
    nrfStruct->nRFspi = HAL_SPIx;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
    nrfStruct->nRFtim = HAL_TIMx;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Put GPIO port pointer and pin number to structure's alias */
    nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	631a      	str	r2, [r3, #48]	; 0x30
    nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	869a      	strh	r2, [r3, #52]	; 0x34
    nrfStruct->nRFportCE = HAL_GPIO_CE;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	69fa      	ldr	r2, [r7, #28]
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
    nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	8c3a      	ldrh	r2, [r7, #32]
 80006ec:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0); //Set star value as 0
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 800070e:	bf00      	nop
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3f8      	bcc.n	8000710 <delayUs+0x18>
        ;
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f001 f814 	bl	8001768 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	f001 f804 	bl	8001768 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <readReg>:
}

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = R_REGISTER | addr;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	73fb      	strb	r3, [r7, #15]
    uint8_t reg;
    uint8_t *pCmd = &cmd;
 8000778:	f107 030f 	add.w	r3, r7, #15
 800077c:	617b      	str	r3, [r7, #20]
    uint8_t *pReg = &reg;
 800077e:	f107 030e 	add.w	r3, r7, #14
 8000782:	613b      	str	r3, [r7, #16]

    csnLow(nrfStruct);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ffcf 	bl	8000728 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	6979      	ldr	r1, [r7, #20]
 8000794:	f001 fc9f 	bl	80020d6 <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 8000798:	2132      	movs	r1, #50	; 0x32
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffac 	bl	80006f8 <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007a4:	230a      	movs	r3, #10
 80007a6:	2201      	movs	r2, #1
 80007a8:	6939      	ldr	r1, [r7, #16]
 80007aa:	f001 fdc8 	bl	800233e <HAL_SPI_Receive>

    csnHigh(nrfStruct);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffca 	bl	8000748 <csnHigh>
    return reg;
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
 80007ca:	4613      	mov	r3, r2
 80007cc:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd = W_REGISTER | addr;
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	72fb      	strb	r3, [r7, #11]
    uint8_t *pCmd = &cmd;
 80007d8:	f107 030b 	add.w	r3, r7, #11
 80007dc:	60fb      	str	r3, [r7, #12]

    csnLow(nrfStruct);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffa2 	bl	8000728 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007e8:	230a      	movs	r3, #10
 80007ea:	2201      	movs	r2, #1
 80007ec:	68f9      	ldr	r1, [r7, #12]
 80007ee:	f001 fc72 	bl	80020d6 <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 80007f2:	2132      	movs	r1, #50	; 0x32
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff7f 	bl	80006f8 <delayUs>
    HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007fe:	1cb9      	adds	r1, r7, #2
 8000800:	230a      	movs	r3, #10
 8000802:	2201      	movs	r2, #1
 8000804:	f001 fc67 	bl	80020d6 <HAL_SPI_Transmit>

    csnHigh(nrfStruct);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff9d 	bl	8000748 <csnHigh>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <writeRegExt>:
    csnHigh(nrfStruct);
}

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
                 size_t bufSize)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	72fb      	strb	r3, [r7, #11]
    uint8_t cmd = W_REGISTER | addr;
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	b2db      	uxtb	r3, r3
 800082e:	74fb      	strb	r3, [r7, #19]
    uint8_t *pCmd = &cmd;
 8000830:	f107 0313 	add.w	r3, r7, #19
 8000834:	617b      	str	r3, [r7, #20]

    csnLow(nrfStruct);
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f7ff ff76 	bl	8000728 <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000840:	230a      	movs	r3, #10
 8000842:	2201      	movs	r2, #1
 8000844:	6979      	ldr	r1, [r7, #20]
 8000846:	f001 fc46 	bl	80020d6 <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 800084a:	2132      	movs	r1, #50	; 0x32
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f7ff ff53 	bl	80006f8 <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b29a      	uxth	r2, r3
 800085a:	230a      	movs	r3, #10
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f001 fd6e 	bl	800233e <HAL_SPI_Receive>
                    SPI_TIMEOUT);

    csnHigh(nrfStruct);
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff ff70 	bl	8000748 <csnHigh>
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <pwrUp>:
    return reg;
}

/* Power control */
void pwrUp(nrfStruct_t *nrfStruct)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    uint8_t tmp = readReg(nrfStruct, CONFIG);
 8000878:	2100      	movs	r1, #0
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff74 	bl	8000768 <readReg>
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << 1);
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, CONFIG, tmp);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	461a      	mov	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff93 	bl	80007be <writeReg>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <setBit>:
    tmp &= ~(1 << bit); //zmieniono OR na AND
    writeReg(nrfStruct, addr, tmp);
}

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
 80008ac:	4613      	mov	r3, r2
 80008ae:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = readReg(nrfStruct, addr);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff57 	bl	8000768 <readReg>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << bit);
 80008be:	78bb      	ldrb	r3, [r7, #2]
 80008c0:	2201      	movs	r2, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, addr, tmp);
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	4619      	mov	r1, r3
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff70 	bl	80007be <writeReg>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <nRF_Init>:

/* Main init function */
nrfStruct_t *nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
                      GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
                      GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af04      	add	r7, sp, #16
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	807b      	strh	r3, [r7, #2]
    /* Create main nRF structure	 */
    static nrfStruct_t nRFMainStruct;
    static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

    /* Init settigns struct */
    statusStrcut_Init(pnRFMainStruct);
 80008f6:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <nRF_Init+0x1b8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fdce 	bl	800049c <statusStrcut_Init>
    settingStruct_Init(pnRFMainStruct);
 8000900:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <nRF_Init+0x1b8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fdfd 	bl	8000504 <settingStruct_Init>
    addressStruct_Init(pnRFMainStruct);
 800090a:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <nRF_Init+0x1b8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe54 	bl	80005bc <addressStruct_Init>
    fifoStruct_Init(pnRFMainStruct);
 8000914:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <nRF_Init+0x1b8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe95 	bl	8000648 <fifoStruct_Init>
    hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 800091e:	4b60      	ldr	r3, [pc, #384]	; (8000aa0 <nRF_Init+0x1b8>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000924:	9302      	str	r3, [sp, #8]
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	68f9      	ldr	r1, [r7, #12]
 8000934:	f7ff fec2 	bl	80006bc <hardware_Init>
                  HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

    //	pwrDown(pnRFMainStruct);
    /* Turn on modul */
    pwrUp(pnRFMainStruct);
 8000938:	4b59      	ldr	r3, [pc, #356]	; (8000aa0 <nRF_Init+0x1b8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff97 	bl	8000870 <pwrUp>

    /* Set default settings */
    setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <nRF_Init+0x1b8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffa8 	bl	80008a0 <setBit>
    writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 8000950:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <nRF_Init+0x1b8>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <nRF_Init+0x1b8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	79db      	ldrb	r3, [r3, #7]
 800095a:	461a      	mov	r2, r3
 800095c:	2101      	movs	r1, #1
 800095e:	f7ff ff2e 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 8000962:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <nRF_Init+0x1b8>)
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <nRF_Init+0x1b8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	799b      	ldrb	r3, [r3, #6]
 800096c:	461a      	mov	r2, r3
 800096e:	2102      	movs	r1, #2
 8000970:	f7ff ff25 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <nRF_Init+0x1b8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2203      	movs	r2, #3
 800097a:	2103      	movs	r1, #3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff1e 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 8000982:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <nRF_Init+0x1b8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2203      	movs	r2, #3
 8000988:	2104      	movs	r1, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff17 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <nRF_Init+0x1b8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2202      	movs	r2, #2
 8000996:	2105      	movs	r1, #5
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff10 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 800099e:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <nRF_Init+0x1b8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	220e      	movs	r2, #14
 80009a4:	2106      	movs	r1, #6
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff09 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <nRF_Init+0x1b8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	220e      	movs	r2, #14
 80009b2:	2107      	movs	r1, #7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff02 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 80009ba:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <nRF_Init+0x1b8>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <nRF_Init+0x1b8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	7a1b      	ldrb	r3, [r3, #8]
 80009c4:	461a      	mov	r2, r3
 80009c6:	211c      	movs	r1, #28
 80009c8:	f7ff fef9 	bl	80007be <writeReg>

    uint8_t i;
    for (i = 0; i < 6; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	75fb      	strb	r3, [r7, #23]
 80009d0:	e00f      	b.n	80009f2 <nRF_Init+0x10a>
    {
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <nRF_Init+0x1b8>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	3311      	adds	r3, #17
 80009da:	b2d9      	uxtb	r1, r3
                 (pnRFMainStruct->setStruct.pipePayLen[i]));
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <nRF_Init+0x1b8>)
 80009de:	681a      	ldr	r2, [r3, #0]
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	4413      	add	r3, r2
 80009e4:	7a5b      	ldrb	r3, [r3, #9]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f7ff fee9 	bl	80007be <writeReg>
    for (i = 0; i < 6; i++)
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	3301      	adds	r3, #1
 80009f0:	75fb      	strb	r3, [r7, #23]
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d9ec      	bls.n	80009d2 <nRF_Init+0xea>
    }
    writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <nRF_Init+0x1b8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	211d      	movs	r1, #29
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fedc 	bl	80007be <writeReg>

    /* Set default address */
    writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f103 0211 	add.w	r2, r3, #17
 8000a12:	2305      	movs	r3, #5
 8000a14:	2110      	movs	r1, #16
 8000a16:	f7ff fefe 	bl	8000816 <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.txAddr));
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr0),
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f103 0216 	add.w	r2, r3, #22
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a26:	2305      	movs	r3, #5
 8000a28:	210a      	movs	r1, #10
 8000a2a:	f7ff fef4 	bl	8000816 <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr0));
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a30:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr1),
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f103 021b 	add.w	r2, r3, #27
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	210b      	movs	r1, #11
 8000a3e:	f7ff feea 	bl	8000816 <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr1));
    writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	210c      	movs	r1, #12
 8000a52:	f7ff feb4 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a62:	461a      	mov	r2, r3
 8000a64:	210d      	movs	r1, #13
 8000a66:	f7ff feaa 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000a76:	461a      	mov	r2, r3
 8000a78:	210e      	movs	r1, #14
 8000a7a:	f7ff fea0 	bl	80007be <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	f7ff fe96 	bl	80007be <writeReg>

    return pnRFMainStruct;
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <nRF_Init+0x1b8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_SPI1_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ad8:	2218      	movs	r2, #24
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000af6:	f001 fa8d 	bl	8002014 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b00:	f7ff fcc6 	bl	8000490 <Error_Handler>
  }

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000f8 	.word	0x200000f8
 8000b0c:	40013000 	.word	0x40013000

08000b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d12f      	bne.n	8000b90 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_SPI_MspInit+0x90>)
 8000b74:	f000 fc9e 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_SPI_MspInit+0x90>)
 8000b8c:	f000 fc92 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_MspInit+0x60>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_MspInit+0x60>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <BusFault_Handler+0x4>

08000c26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 fa6c 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <USART2_IRQHandler+0x10>)
 8000c62:	f002 fa19 	bl	8003098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000190 	.word	0x20000190

08000c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c78:	f000 fd8e 	bl	8001798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <SystemInit+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <SystemInit+0x5c>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <SystemInit+0x5c>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4911      	ldr	r1, [pc, #68]	; (8000cdc <SystemInit+0x5c>)
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <SystemInit+0x60>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SystemInit+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <SystemInit+0x5c>)
 8000ca2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <SystemInit+0x5c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SystemInit+0x5c>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <SystemInit+0x5c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <SystemInit+0x5c>)
 8000cbe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cc2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SystemInit+0x5c>)
 8000cc6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SystemInit+0x64>)
 8000cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	f8ff0000 	.word	0xf8ff0000
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <MX_TIM1_Init+0x9c>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d0c:	2247      	movs	r2, #71	; 0x47
 8000d0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d30:	4813      	ldr	r0, [pc, #76]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d32:	f001 fe89 	bl	8002a48 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f7ff fba8 	bl	8000490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d4e:	f001 fec9 	bl	8002ae4 <HAL_TIM_ConfigClockSource>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d58:	f7ff fb9a 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d6a:	f002 f86b 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d74:	f7ff fb8c 	bl	8000490 <Error_Handler>
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000150 	.word	0x20000150
 8000d84:	40012c00 	.word	0x40012c00

08000d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_TIM_Base_MspInit+0x34>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10b      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <detectCommand>:
		nrfPowerTx0dBm,
		nrfPowerTx6dBm, nrfPowerTx12dBm, nrfPowerTx18dBm, nrfDataRate250kbps,
		nrfDataRate1Mbps, nrfDataRate2Mbps, nrfChannel };

/* Functions's bodies */
uint8_t detectCommand(const char *str, const char **cmdTab, size_t strLen) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	if (strLen < MINIMUM_COMMAND_SIZE) //Check min size of command
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d801      	bhi.n	8000dda <detectCommand+0x16>
		return -1;
 8000dd6:	23ff      	movs	r3, #255	; 0xff
 8000dd8:	e01a      	b.n	8000e10 <detectCommand+0x4c>
	/* First command */
	uint8_t i;
	char *p = NULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	75fb      	strb	r3, [r7, #23]
 8000de2:	e011      	b.n	8000e08 <detectCommand+0x44>
		p = strstr(str, cmdTab[i]);
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	4413      	add	r3, r2
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f002 fc9f 	bl	8003734 <strstr>
 8000df6:	6138      	str	r0, [r7, #16]
		if (p != NULL) {
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <detectCommand+0x3e>
			return i;
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	e006      	b.n	8000e10 <detectCommand+0x4c>
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	3301      	adds	r3, #1
 8000e06:	75fb      	strb	r3, [r7, #23]
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b09      	cmp	r3, #9
 8000e0c:	d9ea      	bls.n	8000de4 <detectCommand+0x20>
		}
	}
	return -1;
 8000e0e:	23ff      	movs	r3, #255	; 0xff
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <executeCommand>:

uint8_t executeCommand(nrfStruct_t *nrfStruct, uint8_t commandNumber) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	switch (commandNumber) {
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b09      	cmp	r3, #9
 8000e28:	d852      	bhi.n	8000ed0 <executeCommand+0xb8>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <executeCommand+0x18>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e59 	.word	0x08000e59
 8000e34:	08000e65 	.word	0x08000e65
 8000e38:	08000e71 	.word	0x08000e71
 8000e3c:	08000e7d 	.word	0x08000e7d
 8000e40:	08000e89 	.word	0x08000e89
 8000e44:	08000e95 	.word	0x08000e95
 8000e48:	08000ea1 	.word	0x08000ea1
 8000e4c:	08000ead 	.word	0x08000ead
 8000e50:	08000eb9 	.word	0x08000eb9
 8000e54:	08000ec5 	.word	0x08000ec5
	case 0:
		/* Execute Power Up */
//		pwrUp(nrfStruct);
		sendString("\n\rExecuted 1st command.", &huart2);
 8000e58:	4920      	ldr	r1, [pc, #128]	; (8000edc <executeCommand+0xc4>)
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <executeCommand+0xc8>)
 8000e5c:	f000 f854 	bl	8000f08 <sendString>
		return 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e036      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 1:
//		pwrDown(nrfStruct);
		sendString("\n\rExecuted 2nd command.", &huart2);
 8000e64:	491d      	ldr	r1, [pc, #116]	; (8000edc <executeCommand+0xc4>)
 8000e66:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <executeCommand+0xcc>)
 8000e68:	f000 f84e 	bl	8000f08 <sendString>
		return 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e030      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 2:
		sendString("\n\rExecuted 3rd command.", &huart2);
 8000e70:	491a      	ldr	r1, [pc, #104]	; (8000edc <executeCommand+0xc4>)
 8000e72:	481d      	ldr	r0, [pc, #116]	; (8000ee8 <executeCommand+0xd0>)
 8000e74:	f000 f848 	bl	8000f08 <sendString>
		return 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e02a      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 3:
		sendString("\n\rExecuted 4th command.", &huart2);
 8000e7c:	4917      	ldr	r1, [pc, #92]	; (8000edc <executeCommand+0xc4>)
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <executeCommand+0xd4>)
 8000e80:	f000 f842 	bl	8000f08 <sendString>
		return 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e024      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 4:
		sendString("\n\rExecuted 5th command.", &huart2);
 8000e88:	4914      	ldr	r1, [pc, #80]	; (8000edc <executeCommand+0xc4>)
 8000e8a:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <executeCommand+0xd8>)
 8000e8c:	f000 f83c 	bl	8000f08 <sendString>
		return 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e01e      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 5:
		sendString("\n\rExecuted 6th command.", &huart2);
 8000e94:	4911      	ldr	r1, [pc, #68]	; (8000edc <executeCommand+0xc4>)
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <executeCommand+0xdc>)
 8000e98:	f000 f836 	bl	8000f08 <sendString>
		return 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e018      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 6:
		sendString("\n\rExecuted 7th command.", &huart2);
 8000ea0:	490e      	ldr	r1, [pc, #56]	; (8000edc <executeCommand+0xc4>)
 8000ea2:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <executeCommand+0xe0>)
 8000ea4:	f000 f830 	bl	8000f08 <sendString>
		return 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e012      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 7:
		sendString("\n\rExecuted 8th command.", &huart2);
 8000eac:	490b      	ldr	r1, [pc, #44]	; (8000edc <executeCommand+0xc4>)
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <executeCommand+0xe4>)
 8000eb0:	f000 f82a 	bl	8000f08 <sendString>
		return 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e00c      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 8:
		sendString("\n\rExecuted 9th command.", &huart2);
 8000eb8:	4908      	ldr	r1, [pc, #32]	; (8000edc <executeCommand+0xc4>)
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <executeCommand+0xe8>)
 8000ebc:	f000 f824 	bl	8000f08 <sendString>
		return 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e006      	b.n	8000ed2 <executeCommand+0xba>
		break;
	case 9:
		sendString("\n\rExecuted 10th command.", &huart2);
 8000ec4:	4905      	ldr	r1, [pc, #20]	; (8000edc <executeCommand+0xc4>)
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <executeCommand+0xec>)
 8000ec8:	f000 f81e 	bl	8000f08 <sendString>
		return 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <executeCommand+0xba>
		break;
	default:
		return 0;
 8000ed0:	2300      	movs	r3, #0
		break;
	}

	return 0;
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000190 	.word	0x20000190
 8000ee0:	080037f8 	.word	0x080037f8
 8000ee4:	08003810 	.word	0x08003810
 8000ee8:	08003828 	.word	0x08003828
 8000eec:	08003840 	.word	0x08003840
 8000ef0:	08003858 	.word	0x08003858
 8000ef4:	08003870 	.word	0x08003870
 8000ef8:	08003888 	.word	0x08003888
 8000efc:	080038a0 	.word	0x080038a0
 8000f00:	080038b8 	.word	0x080038b8
 8000f04:	080038d0 	.word	0x080038d0

08000f08 <sendString>:
	}
	return 1;
}


void sendString(const char *str, UART_HandleTypeDef *huart) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t*) str, strlen(str));
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff f91a 	bl	800014c <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f002 f820 	bl	8002f66 <HAL_UART_Transmit_IT>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <resetChar>:
	char data[16];
	size_t dataSize = sprintf(data, "%s%ld.%ld", sign, tmpInt, tmpInt2);
	HAL_UART_Transmit_IT(huart, (uint8_t*) data, dataSize);
}

uint8_t resetChar(char *buf, size_t bufSize) {
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	if (bufSize <= 0 || bufSize > 256)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <resetChar+0x18>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d901      	bls.n	8000f4a <resetChar+0x1c>
		return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e010      	b.n	8000f6c <resetChar+0x3e>
	else {
		uint8_t i;
		for (i = 0; i < (bufSize - 1); i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e007      	b.n	8000f60 <resetChar+0x32>
			buf[i] = 0x00;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (bufSize - 1); i++) {
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d3f2      	bcc.n	8000f50 <resetChar+0x22>
		}
		return 1;
 8000f6a:	2301      	movs	r3, #1
	}
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
	...

08000f78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_USART2_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f001 ff8c 	bl	8002ecc <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f7ff fa69 	bl	8000490 <Error_Handler>
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000190 	.word	0x20000190
 8000fc8:	40004400 	.word	0x40004400

08000fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0x80>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d12b      	bne.n	8001044 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x84>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x84>)
 8000ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff6:	61d3      	str	r3, [r2, #28]
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x84>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_UART_MspInit+0x84>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a11      	ldr	r2, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x84>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_UART_MspInit+0x84>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800101c:	230c      	movs	r3, #12
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001030:	f000 fa40 	bl	80014b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2026      	movs	r0, #38	; 0x26
 800103a:	f000 f98e 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103e:	2026      	movs	r0, #38	; 0x26
 8001040:	f000 f9a7 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004400 	.word	0x40004400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001058:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107e:	f7ff fdff 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 fb11 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001086:	f7ff f919 	bl	80002bc <main>
  bx lr
 800108a:	4770      	bx	lr
  ldr r3, =_sidata
 800108c:	0800399c 	.word	0x0800399c
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001094:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 8001098:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 800109c:	200001d4 	.word	0x200001d4

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x28>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f945 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff fd70 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f95d 	bl	80013ae <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f925 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000004 	.word	0x20000004
 8001128:	20000034 	.word	0x20000034
 800112c:	20000030 	.word	0x20000030

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x1c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x20>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <HAL_IncTick+0x20>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000034 	.word	0x20000034
 8001150:	200001d0 	.word	0x200001d0

08001154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_GetTick+0x10>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	200001d0 	.word	0x200001d0

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff fff0 	bl	8001154 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_Delay+0x40>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffe0 	bl	8001154 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000034 	.word	0x20000034

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4906      	ldr	r1, [pc, #24]	; (8001244 <__NVIC_EnableIRQ+0x34>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff90 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2d 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff42 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff35 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d005      	beq.n	80013ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2204      	movs	r2, #4
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e051      	b.n	800148e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 020e 	bic.w	r2, r2, #14
 80013f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_DMA_Abort_IT+0xd0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d029      	beq.n	8001468 <HAL_DMA_Abort_IT+0xa0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a20      	ldr	r2, [pc, #128]	; (800149c <HAL_DMA_Abort_IT+0xd4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d022      	beq.n	8001464 <HAL_DMA_Abort_IT+0x9c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <HAL_DMA_Abort_IT+0xd8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d01a      	beq.n	800145e <HAL_DMA_Abort_IT+0x96>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_DMA_Abort_IT+0xdc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d012      	beq.n	8001458 <HAL_DMA_Abort_IT+0x90>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <HAL_DMA_Abort_IT+0xe0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00a      	beq.n	8001452 <HAL_DMA_Abort_IT+0x8a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <HAL_DMA_Abort_IT+0xe4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <HAL_DMA_Abort_IT+0x84>
 8001446:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800144a:	e00e      	b.n	800146a <HAL_DMA_Abort_IT+0xa2>
 800144c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001450:	e00b      	b.n	800146a <HAL_DMA_Abort_IT+0xa2>
 8001452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001456:	e008      	b.n	800146a <HAL_DMA_Abort_IT+0xa2>
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	e005      	b.n	800146a <HAL_DMA_Abort_IT+0xa2>
 800145e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001462:	e002      	b.n	800146a <HAL_DMA_Abort_IT+0xa2>
 8001464:	2310      	movs	r3, #16
 8001466:	e000      	b.n	800146a <HAL_DMA_Abort_IT+0xa2>
 8001468:	2301      	movs	r3, #1
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_DMA_Abort_IT+0xe8>)
 800146c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
    } 
  }
  return status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40020008 	.word	0x40020008
 800149c:	4002001c 	.word	0x4002001c
 80014a0:	40020030 	.word	0x40020030
 80014a4:	40020044 	.word	0x40020044
 80014a8:	40020058 	.word	0x40020058
 80014ac:	4002006c 	.word	0x4002006c
 80014b0:	40020000 	.word	0x40020000

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e127      	b.n	8001718 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c8:	2201      	movs	r2, #1
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 8116 	bne.w	8001712 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d034      	beq.n	8001558 <HAL_GPIO_Init+0xa4>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d80d      	bhi.n	800150e <HAL_GPIO_Init+0x5a>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d02b      	beq.n	800154e <HAL_GPIO_Init+0x9a>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d804      	bhi.n	8001504 <HAL_GPIO_Init+0x50>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d031      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d01c      	beq.n	800153c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001502:	e048      	b.n	8001596 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001504:	2b03      	cmp	r3, #3
 8001506:	d043      	beq.n	8001590 <HAL_GPIO_Init+0xdc>
 8001508:	2b11      	cmp	r3, #17
 800150a:	d01b      	beq.n	8001544 <HAL_GPIO_Init+0x90>
          break;
 800150c:	e043      	b.n	8001596 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800150e:	4a89      	ldr	r2, [pc, #548]	; (8001734 <HAL_GPIO_Init+0x280>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d026      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 8001514:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_GPIO_Init+0x280>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d806      	bhi.n	8001528 <HAL_GPIO_Init+0x74>
 800151a:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_GPIO_Init+0x284>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d020      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 8001520:	4a86      	ldr	r2, [pc, #536]	; (800173c <HAL_GPIO_Init+0x288>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01d      	beq.n	8001562 <HAL_GPIO_Init+0xae>
          break;
 8001526:	e036      	b.n	8001596 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001528:	4a85      	ldr	r2, [pc, #532]	; (8001740 <HAL_GPIO_Init+0x28c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 800152e:	4a85      	ldr	r2, [pc, #532]	; (8001744 <HAL_GPIO_Init+0x290>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d016      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 8001534:	4a84      	ldr	r2, [pc, #528]	; (8001748 <HAL_GPIO_Init+0x294>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0xae>
          break;
 800153a:	e02c      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e028      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e023      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3308      	adds	r3, #8
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e01e      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e019      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156a:	2304      	movs	r3, #4
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e012      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	611a      	str	r2, [r3, #16]
          break;
 8001582:	e008      	b.n	8001596 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	615a      	str	r2, [r3, #20]
          break;
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d801      	bhi.n	80015a0 <HAL_GPIO_Init+0xec>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	e001      	b.n	80015a4 <HAL_GPIO_Init+0xf0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3304      	adds	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2bff      	cmp	r3, #255	; 0xff
 80015aa:	d802      	bhi.n	80015b2 <HAL_GPIO_Init+0xfe>
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x104>
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3b08      	subs	r3, #8
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	210f      	movs	r1, #15
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	401a      	ands	r2, r3
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8096 	beq.w	8001712 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e6:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_GPIO_Init+0x298>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_GPIO_Init+0x298>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b56      	ldr	r3, [pc, #344]	; (800174c <HAL_GPIO_Init+0x298>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015fe:	4a54      	ldr	r2, [pc, #336]	; (8001750 <HAL_GPIO_Init+0x29c>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x2a0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x19e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4a      	ldr	r2, [pc, #296]	; (8001758 <HAL_GPIO_Init+0x2a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x19a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a49      	ldr	r2, [pc, #292]	; (800175c <HAL_GPIO_Init+0x2a8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x196>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x2ac>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x192>
 8001642:	2303      	movs	r3, #3
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 8001646:	2304      	movs	r3, #4
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 8001652:	2300      	movs	r3, #0
 8001654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001656:	f002 0203 	and.w	r2, r2, #3
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001664:	493a      	ldr	r1, [pc, #232]	; (8001750 <HAL_GPIO_Init+0x29c>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4938      	ldr	r1, [pc, #224]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	43db      	mvns	r3, r3
 8001694:	4933      	ldr	r1, [pc, #204]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001696:	4013      	ands	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	492e      	ldr	r1, [pc, #184]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
 80016b2:	e006      	b.n	80016c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4929      	ldr	r1, [pc, #164]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016be:	4013      	ands	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	4924      	ldr	r1, [pc, #144]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
 80016da:	e006      	b.n	80016ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	491f      	ldr	r1, [pc, #124]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	491a      	ldr	r1, [pc, #104]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60cb      	str	r3, [r1, #12]
 8001702:	e006      	b.n	8001712 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	4915      	ldr	r1, [pc, #84]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 800170e:	4013      	ands	r3, r2
 8001710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f aed0 	bne.w	80014c8 <HAL_GPIO_Init+0x14>
  }
}
 8001728:	bf00      	nop
 800172a:	372c      	adds	r7, #44	; 0x2c
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	10210000 	.word	0x10210000
 8001738:	10110000 	.word	0x10110000
 800173c:	10120000 	.word	0x10120000
 8001740:	10310000 	.word	0x10310000
 8001744:	10320000 	.word	0x10320000
 8001748:	10220000 	.word	0x10220000
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000
 8001754:	40010800 	.word	0x40010800
 8001758:	40010c00 	.word	0x40010c00
 800175c:	40011000 	.word	0x40011000
 8001760:	40011400 	.word	0x40011400
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001778:	787b      	ldrb	r3, [r7, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001784:	e003      	b.n	800178e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	041a      	lsls	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f806 	bl	80017c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e26c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001808:	4b8f      	ldr	r3, [pc, #572]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <HAL_RCC_OscConfig+0x12c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d168      	bne.n	8001908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e246      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x76>
 8001844:	4b80      	ldr	r3, [pc, #512]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7a      	ldr	r2, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a77      	ldr	r2, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xbc>
 800187e:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001898:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc4c 	bl	8001154 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc48 	bl	8001154 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1fa      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe4>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc38 	bl	8001154 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fc34 	bl	8001154 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1e6      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x10c>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001922:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1ba      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4939      	ldr	r1, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e03a      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x270>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fbed 	bl	8001154 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fbe9 	bl	8001154 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e19b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4927      	ldr	r1, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCC_OscConfig+0x270>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fbcc 	bl	8001154 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff fbc8 	bl	8001154 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e17a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03a      	beq.n	8001a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fbac 	bl	8001154 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fba8 	bl	8001154 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e15a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 fada 	bl	8001fd8 <RCC_Delay>
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fb92 	bl	8001154 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fb8e 	bl	8001154 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e140      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000
 8001a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e9      	bne.n	8001a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a6 	beq.w	8001bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10d      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a93      	ldr	r2, [pc, #588]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b91      	ldr	r3, [pc, #580]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb4f 	bl	8001154 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff fb4b 	bl	8001154 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0fd      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x312>
 8001ae0:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e02d      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x334>
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	e01c      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x356>
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e00b      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b32:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d015      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff faff 	bl	8001154 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fafb 	bl	8001154 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0ab      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ee      	beq.n	8001b5a <HAL_RCC_OscConfig+0x37e>
 8001b7c:	e014      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fae9 	bl	8001154 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff fae5 	bl	8001154 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e095      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8081 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d061      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d146      	bne.n	8001c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fab9 	bl	8001154 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff fab5 	bl	8001154 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e067      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	492d      	ldr	r1, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a19      	ldr	r1, [r3, #32]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	430b      	orrs	r3, r1
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fa89 	bl	8001154 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fa85 	bl	8001154 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e037      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x46a>
 8001c64:	e02f      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fa72 	bl	8001154 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fa6e 	bl	8001154 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x498>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e013      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42420060 	.word	0x42420060

08001cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0d0      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 0207 	bic.w	r2, r3, #7
 8001d06:	4965      	ldr	r1, [pc, #404]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0b8      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	494d      	ldr	r1, [pc, #308]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d040      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d115      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e07f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e073      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4936      	ldr	r1, [pc, #216]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f9c2 	bl	8001154 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f9be 	bl	8001154 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e053      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d210      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0207 	bic.w	r2, r3, #7
 8001e12:	4922      	ldr	r1, [pc, #136]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e032      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e6a:	f000 f821 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4601      	mov	r1, r0
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1d0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f920 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003924 	.word	0x08003924
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000030 	.word	0x20000030

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	b490      	push	{r4, r7}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb8:	1d3c      	adds	r4, r7, #4
 8001eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x46>
 8001eee:	e02d      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef2:	623b      	str	r3, [r7, #32]
      break;
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	0c9b      	lsrs	r3, r3, #18
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f02:	4413      	add	r3, r2
 8001f04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0c5b      	lsrs	r3, r3, #17
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f22:	4413      	add	r3, r2
 8001f24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2e:	fb02 f203 	mul.w	r2, r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	e004      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	623b      	str	r3, [r7, #32]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4e:	623b      	str	r3, [r7, #32]
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	6a3b      	ldr	r3, [r7, #32]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3728      	adds	r7, #40	; 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc90      	pop	{r4, r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	08003910 	.word	0x08003910
 8001f64:	08003920 	.word	0x08003920
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	003d0900 	.word	0x003d0900

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff2 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f90:	4601      	mov	r1, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08003934 	.word	0x08003934

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4601      	mov	r1, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0adb      	lsrs	r3, r3, #11
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08003934 	.word	0x08003934

08001fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <RCC_Delay+0x34>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <RCC_Delay+0x38>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0a5b      	lsrs	r3, r3, #9
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff4:	bf00      	nop
  }
  while (Delay --);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <RCC_Delay+0x1c>
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000004 	.word	0x20000004
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e053      	b.n	80020ce <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7fe fd65 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	ea42 0103 	orr.w	r1, r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	0c1a      	lsrs	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f002 0204 	and.w	r2, r2, #4
 80020ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b088      	sub	sp, #32
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_SPI_Transmit+0x22>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e11e      	b.n	8002336 <HAL_SPI_Transmit+0x260>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002100:	f7ff f828 	bl	8001154 <HAL_GetTick>
 8002104:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002116:	2302      	movs	r3, #2
 8002118:	77fb      	strb	r3, [r7, #31]
    goto error;
 800211a:	e103      	b.n	8002324 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_SPI_Transmit+0x52>
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800212c:	e0fa      	b.n	8002324 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	88fa      	ldrh	r2, [r7, #6]
 8002146:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002174:	d107      	bne.n	8002186 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002184:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d007      	beq.n	80021a4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ac:	d14b      	bne.n	8002246 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_Transmit+0xe6>
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d13e      	bne.n	800223a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	881a      	ldrh	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	1c9a      	adds	r2, r3, #2
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021e0:	e02b      	b.n	800223a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d112      	bne.n	8002216 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	1c9a      	adds	r2, r3, #2
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	86da      	strh	r2, [r3, #54]	; 0x36
 8002214:	e011      	b.n	800223a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002216:	f7fe ff9d 	bl	8001154 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d803      	bhi.n	800222e <HAL_SPI_Transmit+0x158>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d102      	bne.n	8002234 <HAL_SPI_Transmit+0x15e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002238:	e074      	b.n	8002324 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ce      	bne.n	80021e2 <HAL_SPI_Transmit+0x10c>
 8002244:	e04c      	b.n	80022e0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0x17e>
 800224e:	8afb      	ldrh	r3, [r7, #22]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d140      	bne.n	80022d6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800227a:	e02c      	b.n	80022d6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d113      	bne.n	80022b2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b0:	e011      	b.n	80022d6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b2:	f7fe ff4f 	bl	8001154 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d803      	bhi.n	80022ca <HAL_SPI_Transmit+0x1f4>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d102      	bne.n	80022d0 <HAL_SPI_Transmit+0x1fa>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022d4:	e026      	b.n	8002324 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1cd      	bne.n	800227c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fb91 	bl	8002a0c <SPI_EndRxTxTransaction>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	77fb      	strb	r3, [r7, #31]
 8002320:	e000      	b.n	8002324 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002334:	7ffb      	ldrb	r3, [r7, #31]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b088      	sub	sp, #32
 8002342:	af02      	add	r7, sp, #8
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235a:	d112      	bne.n	8002382 <HAL_SPI_Receive+0x44>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10e      	bne.n	8002382 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2204      	movs	r2, #4
 8002368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f8e9 	bl	8002550 <HAL_SPI_TransmitReceive>
 800237e:	4603      	mov	r3, r0
 8002380:	e0e2      	b.n	8002548 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_SPI_Receive+0x52>
 800238c:	2302      	movs	r3, #2
 800238e:	e0db      	b.n	8002548 <HAL_SPI_Receive+0x20a>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002398:	f7fe fedc 	bl	8001154 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d002      	beq.n	80023b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ae:	e0c2      	b.n	8002536 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SPI_Receive+0x7e>
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023c0:	e0b9      	b.n	8002536 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2204      	movs	r2, #4
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002408:	d107      	bne.n	800241a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d007      	beq.n	8002438 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d162      	bne.n	8002506 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002440:	e02e      	b.n	80024a0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d115      	bne.n	800247c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f103 020c 	add.w	r2, r3, #12
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	87da      	strh	r2, [r3, #62]	; 0x3e
 800247a:	e011      	b.n	80024a0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800247c:	f7fe fe6a 	bl	8001154 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d803      	bhi.n	8002494 <HAL_SPI_Receive+0x156>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d102      	bne.n	800249a <HAL_SPI_Receive+0x15c>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800249e:	e04a      	b.n	8002536 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1cb      	bne.n	8002442 <HAL_SPI_Receive+0x104>
 80024aa:	e031      	b.n	8002510 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d113      	bne.n	80024e2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024e0:	e011      	b.n	8002506 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e2:	f7fe fe37 	bl	8001154 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d803      	bhi.n	80024fa <HAL_SPI_Receive+0x1bc>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d102      	bne.n	8002500 <HAL_SPI_Receive+0x1c2>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002504:	e017      	b.n	8002536 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1cd      	bne.n	80024ac <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fa27 	bl	8002968 <SPI_EndRxTransaction>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
 8002532:	e000      	b.n	8002536 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002534:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800255e:	2301      	movs	r3, #1
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x26>
 8002572:	2302      	movs	r3, #2
 8002574:	e18a      	b.n	800288c <HAL_SPI_TransmitReceive+0x33c>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257e:	f7fe fde9 	bl	8001154 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800258a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800259c:	2b01      	cmp	r3, #1
 800259e:	d00f      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x70>
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a6:	d107      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x68>
 80025b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d003      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025be:	e15b      	b.n	8002878 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x82>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x82>
 80025cc:	887b      	ldrh	r3, [r7, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025d8:	e14e      	b.n	8002878 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d003      	beq.n	80025ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	887a      	ldrh	r2, [r7, #2]
 80025fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	887a      	ldrh	r2, [r7, #2]
 8002616:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	d007      	beq.n	8002642 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264a:	d178      	bne.n	800273e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_TransmitReceive+0x10a>
 8002654:	8b7b      	ldrh	r3, [r7, #26]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d166      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	1c9a      	adds	r2, r3, #2
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267e:	e053      	b.n	8002728 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d11b      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x176>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d016      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x176>
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d113      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	1c9a      	adds	r2, r3, #2
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d119      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x1b8>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d014      	beq.n	8002708 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	b292      	uxth	r2, r2
 80026ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	1c9a      	adds	r2, r3, #2
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002708:	f7fe fd24 	bl	8001154 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002714:	429a      	cmp	r2, r3
 8002716:	d807      	bhi.n	8002728 <HAL_SPI_TransmitReceive+0x1d8>
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d003      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002726:	e0a7      	b.n	8002878 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1a6      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x130>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1a1      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x130>
 800273c:	e07c      	b.n	8002838 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_TransmitReceive+0x1fc>
 8002746:	8b7b      	ldrh	r3, [r7, #26]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d16b      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002772:	e057      	b.n	8002824 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11c      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x26c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d017      	beq.n	80027bc <HAL_SPI_TransmitReceive+0x26c>
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d114      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d119      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x2ae>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d014      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027fa:	2301      	movs	r3, #1
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027fe:	f7fe fca9 	bl	8001154 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800280a:	429a      	cmp	r2, r3
 800280c:	d803      	bhi.n	8002816 <HAL_SPI_TransmitReceive+0x2c6>
 800280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d102      	bne.n	800281c <HAL_SPI_TransmitReceive+0x2cc>
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002822:	e029      	b.n	8002878 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1a2      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x224>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d19d      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f8e5 	bl	8002a0c <SPI_EndRxTxTransaction>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002854:	e010      	b.n	8002878 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	e000      	b.n	8002878 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002876:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002888:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800288c:	4618      	mov	r0, r3
 800288e:	3730      	adds	r7, #48	; 0x30
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a4:	e04c      	b.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d048      	beq.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028ae:	f7fe fc51 	bl	8001154 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d902      	bls.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d13d      	bne.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028dc:	d111      	bne.n	8002902 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e6:	d004      	beq.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f0:	d107      	bne.n	8002902 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	d10f      	bne.n	800292c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e00f      	b.n	8002960 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4013      	ands	r3, r2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	429a      	cmp	r2, r3
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	429a      	cmp	r2, r3
 800295c:	d1a3      	bne.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297c:	d111      	bne.n	80029a2 <SPI_EndRxTransaction+0x3a>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002986:	d004      	beq.n	8002992 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d107      	bne.n	80029a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029aa:	d117      	bne.n	80029dc <SPI_EndRxTransaction+0x74>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b4:	d112      	bne.n	80029dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	2101      	movs	r1, #1
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ff67 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01a      	beq.n	8002a02 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e013      	b.n	8002a04 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff54 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e000      	b.n	8002a04 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff36 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e01d      	b.n	8002a96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f98a 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 f8e4 	bl	8002c54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d007      	beq.n	8002ad0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_TIM_ConfigClockSource+0x18>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0a6      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x166>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d067      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x120>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d80b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x6c>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d073      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0x140>
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d802      	bhi.n	8002b46 <HAL_TIM_ConfigClockSource+0x62>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d06f      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b44:	e078      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d06c      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0x140>
 8002b4a:	2b30      	cmp	r3, #48	; 0x30
 8002b4c:	d06a      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b4e:	e073      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d00d      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x8c>
 8002b54:	2b70      	cmp	r3, #112	; 0x70
 8002b56:	d804      	bhi.n	8002b62 <HAL_TIM_ConfigClockSource+0x7e>
 8002b58:	2b50      	cmp	r3, #80	; 0x50
 8002b5a:	d033      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0xe0>
 8002b5c:	2b60      	cmp	r3, #96	; 0x60
 8002b5e:	d041      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b60:	e06a      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d066      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x152>
 8002b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6c:	d017      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b6e:	e063      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f000 f941 	bl	8002e06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e04c      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f000 f92a 	bl	8002e06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc0:	609a      	str	r2, [r3, #8]
      break;
 8002bc2:	e039      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f000 f8a1 	bl	8002d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2150      	movs	r1, #80	; 0x50
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f8f8 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002be2:	e029      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f000 f8bf 	bl	8002d74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2160      	movs	r1, #96	; 0x60
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f8e8 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002c02:	e019      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f000 f881 	bl	8002d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f8d8 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002c22:	e009      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f000 f8cf 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002c34:	e000      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <TIM_Base_SetConfig+0xbc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <TIM_Base_SetConfig+0xc0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <TIM_Base_SetConfig+0xbc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <TIM_Base_SetConfig+0xc0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	615a      	str	r2, [r3, #20]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800

08002d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 030a 	bic.w	r3, r3, #10
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 0210 	bic.w	r2, r3, #16
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	031b      	lsls	r3, r3, #12
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f043 0307 	orr.w	r3, r3, #7
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	021a      	lsls	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e032      	b.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e94:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e03f      	b.n	8002f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe f86a 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 faef 	bl	80034f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	4613      	mov	r3, r2
 8002f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d130      	bne.n	8002fe2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Transmit_IT+0x26>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e029      	b.n	8002fe4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Transmit_IT+0x38>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e022      	b.n	8002fe4 <HAL_UART_Transmit_IT+0x7e>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fdc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b20      	cmp	r3, #32
 8003006:	d140      	bne.n	800308a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_UART_Receive_IT+0x26>
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e039      	b.n	800308c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_UART_Receive_IT+0x38>
 8003022:	2302      	movs	r3, #2
 8003024:	e032      	b.n	800308c <HAL_UART_Receive_IT+0x9e>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2222      	movs	r2, #34	; 0x22
 800304a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003064:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0220 	orr.w	r2, r2, #32
 8003084:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
	...

08003098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_UART_IRQHandler+0x52>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f984 	bl	80033f0 <UART_Receive_IT>
      return;
 80030e8:	e0cc      	b.n	8003284 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80ab 	beq.w	8003248 <HAL_UART_IRQHandler+0x1b0>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_UART_IRQHandler+0x70>
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80a0 	beq.w	8003248 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_UART_IRQHandler+0x90>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_UART_IRQHandler+0xb0>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	f043 0202 	orr.w	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_UART_IRQHandler+0xd0>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_UART_IRQHandler+0xf0>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	f043 0208 	orr.w	r2, r3, #8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d078      	beq.n	8003282 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_UART_IRQHandler+0x112>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f923 	bl	80033f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_UART_IRQHandler+0x13a>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d031      	beq.n	8003236 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f86e 	bl	80032b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_UART_IRQHandler+0x1f4>)
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe f8dc 	bl	80013c8 <HAL_DMA_Abort_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00e      	b.n	8003244 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f83b 	bl	80032a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00a      	b.n	8003244 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f837 	bl	80032a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e006      	b.n	8003244 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f833 	bl	80032a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003242:	e01e      	b.n	8003282 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	bf00      	nop
    return;
 8003246:	e01c      	b.n	8003282 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_UART_IRQHandler+0x1cc>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f85a 	bl	8003316 <UART_Transmit_IT>
    return;
 8003262:	e00f      	b.n	8003284 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_UART_IRQHandler+0x1ec>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f8a1 	bl	80033c0 <UART_EndTransmit_IT>
    return;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003282:	bf00      	nop
  }
}
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	080032ef 	.word	0x080032ef

08003290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff ffca 	bl	80032a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b21      	cmp	r3, #33	; 0x21
 8003328:	d144      	bne.n	80033b4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d11a      	bne.n	800336a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003348:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	621a      	str	r2, [r3, #32]
 800335c:	e00e      	b.n	800337c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	621a      	str	r2, [r3, #32]
 8003368:	e008      	b.n	800337c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6211      	str	r1, [r2, #32]
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4619      	mov	r1, r3
 800338a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800339e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff55 	bl	8003290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b22      	cmp	r3, #34	; 0x22
 8003402:	d171      	bne.n	80034e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d123      	bne.n	8003456 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10e      	bne.n	800343a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
 8003438:	e029      	b.n	800348e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
 8003454:	e01b      	b.n	800348e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6858      	ldr	r0, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	1c59      	adds	r1, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6291      	str	r1, [r2, #40]	; 0x28
 800346e:	b2c2      	uxtb	r2, r0
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e00c      	b.n	800348e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	1c58      	adds	r0, r3, #1
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	6288      	str	r0, [r1, #40]	; 0x28
 8003486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29b      	uxth	r3, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4619      	mov	r1, r3
 800349c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d120      	bne.n	80034e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0220 	bic.w	r2, r2, #32
 80034b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fc ffca 	bl	8000474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e002      	b.n	80034ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800352e:	f023 030c 	bic.w	r3, r3, #12
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	430b      	orrs	r3, r1
 800353a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <UART_SetConfig+0x1ac>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d14e      	bne.n	80035fa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7fe fd28 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8003560:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <UART_SetConfig+0x1b0>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	0119      	lsls	r1, r3, #4
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fbb2 f2f3 	udiv	r2, r2, r3
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <UART_SetConfig+0x1b0>)
 800359a:	fba3 0302 	umull	r0, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2064      	movs	r0, #100	; 0x64
 80035a2:	fb00 f303 	mul.w	r3, r0, r3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <UART_SetConfig+0x1b0>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	4419      	add	r1, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d0:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <UART_SetConfig+0x1b0>)
 80035d2:	fba3 0302 	umull	r0, r3, r3, r2
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2064      	movs	r0, #100	; 0x64
 80035da:	fb00 f303 	mul.w	r3, r0, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	3332      	adds	r3, #50	; 0x32
 80035e4:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <UART_SetConfig+0x1b0>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	440a      	add	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80035f8:	e04d      	b.n	8003696 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80035fa:	f7fe fcc5 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 80035fe:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <UART_SetConfig+0x1b0>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	0119      	lsls	r1, r3, #4
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009a      	lsls	r2, r3, #2
 800362a:	441a      	add	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	fbb2 f2f3 	udiv	r2, r2, r3
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <UART_SetConfig+0x1b0>)
 8003638:	fba3 0302 	umull	r0, r3, r3, r2
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	2064      	movs	r0, #100	; 0x64
 8003640:	fb00 f303 	mul.w	r3, r0, r3
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	3332      	adds	r3, #50	; 0x32
 800364a:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <UART_SetConfig+0x1b0>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003656:	4419      	add	r1, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	fbb2 f2f3 	udiv	r2, r2, r3
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <UART_SetConfig+0x1b0>)
 8003670:	fba3 0302 	umull	r0, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	2064      	movs	r0, #100	; 0x64
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	3332      	adds	r3, #50	; 0x32
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <UART_SetConfig+0x1b0>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	440a      	add	r2, r1
 8003694:	609a      	str	r2, [r3, #8]
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40013800 	.word	0x40013800
 80036a4:	51eb851f 	.word	0x51eb851f

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	2500      	movs	r5, #0
 80036ac:	4e0c      	ldr	r6, [pc, #48]	; (80036e0 <__libc_init_array+0x38>)
 80036ae:	4c0d      	ldr	r4, [pc, #52]	; (80036e4 <__libc_init_array+0x3c>)
 80036b0:	1ba4      	subs	r4, r4, r6
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	42a5      	cmp	r5, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	f000 f856 	bl	8003768 <_init>
 80036bc:	2500      	movs	r5, #0
 80036be:	4e0a      	ldr	r6, [pc, #40]	; (80036e8 <__libc_init_array+0x40>)
 80036c0:	4c0a      	ldr	r4, [pc, #40]	; (80036ec <__libc_init_array+0x44>)
 80036c2:	1ba4      	subs	r4, r4, r6
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	42a5      	cmp	r5, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036d0:	4798      	blx	r3
 80036d2:	3501      	adds	r5, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036da:	4798      	blx	r3
 80036dc:	3501      	adds	r5, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	08003994 	.word	0x08003994
 80036e4:	08003994 	.word	0x08003994
 80036e8:	08003994 	.word	0x08003994
 80036ec:	08003998 	.word	0x08003998

080036f0 <memcmp>:
 80036f0:	b530      	push	{r4, r5, lr}
 80036f2:	2400      	movs	r4, #0
 80036f4:	42a2      	cmp	r2, r4
 80036f6:	d101      	bne.n	80036fc <memcmp+0xc>
 80036f8:	2000      	movs	r0, #0
 80036fa:	e007      	b.n	800370c <memcmp+0x1c>
 80036fc:	5d03      	ldrb	r3, [r0, r4]
 80036fe:	3401      	adds	r4, #1
 8003700:	190d      	adds	r5, r1, r4
 8003702:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003706:	42ab      	cmp	r3, r5
 8003708:	d0f4      	beq.n	80036f4 <memcmp+0x4>
 800370a:	1b58      	subs	r0, r3, r5
 800370c:	bd30      	pop	{r4, r5, pc}

0800370e <memcpy>:
 800370e:	b510      	push	{r4, lr}
 8003710:	1e43      	subs	r3, r0, #1
 8003712:	440a      	add	r2, r1
 8003714:	4291      	cmp	r1, r2
 8003716:	d100      	bne.n	800371a <memcpy+0xc>
 8003718:	bd10      	pop	{r4, pc}
 800371a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800371e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003722:	e7f7      	b.n	8003714 <memcpy+0x6>

08003724 <memset>:
 8003724:	4603      	mov	r3, r0
 8003726:	4402      	add	r2, r0
 8003728:	4293      	cmp	r3, r2
 800372a:	d100      	bne.n	800372e <memset+0xa>
 800372c:	4770      	bx	lr
 800372e:	f803 1b01 	strb.w	r1, [r3], #1
 8003732:	e7f9      	b.n	8003728 <memset+0x4>

08003734 <strstr>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	7803      	ldrb	r3, [r0, #0]
 8003738:	b17b      	cbz	r3, 800375a <strstr+0x26>
 800373a:	4604      	mov	r4, r0
 800373c:	7823      	ldrb	r3, [r4, #0]
 800373e:	4620      	mov	r0, r4
 8003740:	1c66      	adds	r6, r4, #1
 8003742:	b17b      	cbz	r3, 8003764 <strstr+0x30>
 8003744:	1e4a      	subs	r2, r1, #1
 8003746:	1e63      	subs	r3, r4, #1
 8003748:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800374c:	b14d      	cbz	r5, 8003762 <strstr+0x2e>
 800374e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003752:	4634      	mov	r4, r6
 8003754:	42af      	cmp	r7, r5
 8003756:	d0f7      	beq.n	8003748 <strstr+0x14>
 8003758:	e7f0      	b.n	800373c <strstr+0x8>
 800375a:	780b      	ldrb	r3, [r1, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf18      	it	ne
 8003760:	2000      	movne	r0, #0
 8003762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003764:	4618      	mov	r0, r3
 8003766:	e7fc      	b.n	8003762 <strstr+0x2e>

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
