
nRf24L01_uart_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003710  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad0  08003ad0  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003ad0  08003ad0  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ad0  08003ad0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000038  08003b10  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003b10  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107b8  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ed  00000000  00000000  00030819  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00033de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d64  00000000  00000000  00034d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf2a  00000000  00000000  00049af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000752d8  00000000  00000000  00055a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cacf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  000cad74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08003804 	.word	0x08003804

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08003804 	.word	0x08003804

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4b      	ldr	r2, [pc, #300]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x148>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <MX_GPIO_Init+0x148>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b43      	ldr	r3, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3d      	ldr	r3, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3a      	ldr	r3, [pc, #232]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2110      	movs	r1, #16
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001d6:	f001 fb23 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2110      	movs	r1, #16
 80001de:	4833      	ldr	r0, [pc, #204]	; (80002ac <MX_GPIO_Init+0x150>)
 80001e0:	f001 fb1e 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	482c      	ldr	r0, [pc, #176]	; (80002ac <MX_GPIO_Init+0x150>)
 80001fa:	f001 f9b7 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001fe:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000204:	2303      	movs	r3, #3
 8000206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f001 f9ac 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9 
 8000214:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000218:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021a:	2303      	movs	r3, #3
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000226:	f001 f9a1 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4819      	ldr	r0, [pc, #100]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000242:	f001 f993 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000246:	2310      	movs	r3, #16
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_GPIO_Init+0x150>)
 800025e:	f001 f985 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000274:	f001 f97a 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000278:	2304      	movs	r3, #4
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027c:	2303      	movs	r3, #3
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000288:	f001 f970 	bl	800156c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2028      	movs	r0, #40	; 0x28
 8000292:	f001 f8be 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000296:	2028      	movs	r0, #40	; 0x28
 8000298:	f001 f8d7 	bl	800144a <HAL_NVIC_EnableIRQ>

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40011400 	.word	0x40011400

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 ff4b 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f8c1 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f7ff ff47 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ce:	f000 feaf 	bl	8001030 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80002d2:	f000 fc19 	bl	8000b08 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002d6:	f000 fd39 	bl	8000d4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	sendString("\n\rPeriphery initialized.", &huart2);
 80002da:	4948      	ldr	r1, [pc, #288]	; (80003fc <main+0x140>)
 80002dc:	4848      	ldr	r0, [pc, #288]	; (8000400 <main+0x144>)
 80002de:	f000 fe6f 	bl	8000fc0 <sendString>
	HAL_Delay(200);
 80002e2:	20c8      	movs	r0, #200	; 0xc8
 80002e4:	f000 ff9c 	bl	8001220 <HAL_Delay>

	HAL_TIM_Base_Start(&htim1);
 80002e8:	4846      	ldr	r0, [pc, #280]	; (8000404 <main+0x148>)
 80002ea:	f002 fc34 	bl	8002b56 <HAL_TIM_Base_Start>
	sendString("\n\rTIM start counting.", &huart2);
 80002ee:	4943      	ldr	r1, [pc, #268]	; (80003fc <main+0x140>)
 80002f0:	4845      	ldr	r0, [pc, #276]	; (8000408 <main+0x14c>)
 80002f2:	f000 fe65 	bl	8000fc0 <sendString>
	HAL_Delay(200);
 80002f6:	20c8      	movs	r0, #200	; 0xc8
 80002f8:	f000 ff92 	bl	8001220 <HAL_Delay>

	HAL_UART_Receive_IT(&huart2, (uint8_t*) uartReceiveBuffer, UART_READ_SIZE);
 80002fc:	220e      	movs	r2, #14
 80002fe:	4943      	ldr	r1, [pc, #268]	; (800040c <main+0x150>)
 8000300:	483e      	ldr	r0, [pc, #248]	; (80003fc <main+0x140>)
 8000302:	f002 fed0 	bl	80030a6 <HAL_UART_Receive_IT>
	HAL_Delay(200);
 8000306:	20c8      	movs	r0, #200	; 0xc8
 8000308:	f000 ff8a 	bl	8001220 <HAL_Delay>
	sendString("\n\rUart set as listener.", &huart2);
 800030c:	493b      	ldr	r1, [pc, #236]	; (80003fc <main+0x140>)
 800030e:	4840      	ldr	r0, [pc, #256]	; (8000410 <main+0x154>)
 8000310:	f000 fe56 	bl	8000fc0 <sendString>

	/* nrf24L01+ struct init*/
	nrfStruct_t *testStruct;
	testStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin,
 8000314:	2310      	movs	r3, #16
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	4b3e      	ldr	r3, [pc, #248]	; (8000414 <main+0x158>)
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2310      	movs	r3, #16
 800031e:	4a3e      	ldr	r2, [pc, #248]	; (8000418 <main+0x15c>)
 8000320:	4938      	ldr	r1, [pc, #224]	; (8000404 <main+0x148>)
 8000322:	483e      	ldr	r0, [pc, #248]	; (800041c <main+0x160>)
 8000324:	f000 fb12 	bl	800094c <nRF_Init>
 8000328:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* UART print RX buffer */
		if (uartRx_flag) {
 800032a:	4b3d      	ldr	r3, [pc, #244]	; (8000420 <main+0x164>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0fa      	beq.n	800032a <main+0x6e>
			sendString("\r\nData received.", &huart2); //log
 8000334:	4931      	ldr	r1, [pc, #196]	; (80003fc <main+0x140>)
 8000336:	483b      	ldr	r0, [pc, #236]	; (8000424 <main+0x168>)
 8000338:	f000 fe42 	bl	8000fc0 <sendString>
			HAL_Delay(100);
 800033c:	2064      	movs	r0, #100	; 0x64
 800033e:	f000 ff6f 	bl	8001220 <HAL_Delay>

			/* copy characters to temporary buffer */
			memcpy(uartTmpBuffer, uartReceiveBuffer, UART_READ_SIZE);
 8000342:	220e      	movs	r2, #14
 8000344:	4931      	ldr	r1, [pc, #196]	; (800040c <main+0x150>)
 8000346:	4838      	ldr	r0, [pc, #224]	; (8000428 <main+0x16c>)
 8000348:	f003 fa2e 	bl	80037a8 <memcpy>

			/* Main condition - data size */
			if (strlen(uartTmpBuffer) >= MINIMUM_COMMAND_SIZE) {
 800034c:	4836      	ldr	r0, [pc, #216]	; (8000428 <main+0x16c>)
 800034e:	f7ff fefd 	bl	800014c <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	2b08      	cmp	r3, #8
 8000356:	d93c      	bls.n	80003d2 <main+0x116>

				/* detect entrance to nRF and set prompt flag */
				if (uartPromptFlag == 0) {
 8000358:	4b34      	ldr	r3, [pc, #208]	; (800042c <main+0x170>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d111      	bne.n	8000386 <main+0xca>
					if (strstr(uartTmpBuffer, nrfEnter) != NULL) {
 8000362:	4933      	ldr	r1, [pc, #204]	; (8000430 <main+0x174>)
 8000364:	4830      	ldr	r0, [pc, #192]	; (8000428 <main+0x16c>)
 8000366:	f003 fa32 	bl	80037ce <strstr>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d00a      	beq.n	8000386 <main+0xca>
						uartPromptFlag = 1;
 8000370:	4b2e      	ldr	r3, [pc, #184]	; (800042c <main+0x170>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
						sendString(nrfPrompt, &huart2);
 8000376:	4921      	ldr	r1, [pc, #132]	; (80003fc <main+0x140>)
 8000378:	482e      	ldr	r0, [pc, #184]	; (8000434 <main+0x178>)
 800037a:	f000 fe21 	bl	8000fc0 <sendString>
						sendString("nRF24L01 access available\n", &huart2);
 800037e:	491f      	ldr	r1, [pc, #124]	; (80003fc <main+0x140>)
 8000380:	482d      	ldr	r0, [pc, #180]	; (8000438 <main+0x17c>)
 8000382:	f000 fe1d 	bl	8000fc0 <sendString>
					}
				}

				/* If nrf mode available check and execute command */
				if (uartPromptFlag == 1) {
 8000386:	4b29      	ldr	r3, [pc, #164]	; (800042c <main+0x170>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b01      	cmp	r3, #1
 800038e:	d124      	bne.n	80003da <main+0x11e>
					/* Check command as exit command */
					if (strstr(uartTmpBuffer, nrfExit) != NULL) {
 8000390:	492a      	ldr	r1, [pc, #168]	; (800043c <main+0x180>)
 8000392:	4825      	ldr	r0, [pc, #148]	; (8000428 <main+0x16c>)
 8000394:	f003 fa1b 	bl	80037ce <strstr>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d008      	beq.n	80003b0 <main+0xf4>
						sendString(nrfPrompt, &huart2);
 800039e:	4917      	ldr	r1, [pc, #92]	; (80003fc <main+0x140>)
 80003a0:	4824      	ldr	r0, [pc, #144]	; (8000434 <main+0x178>)
 80003a2:	f000 fe0d 	bl	8000fc0 <sendString>
						sendString("nRF24L01 access not available\n", &huart2);
 80003a6:	4915      	ldr	r1, [pc, #84]	; (80003fc <main+0x140>)
 80003a8:	4825      	ldr	r0, [pc, #148]	; (8000440 <main+0x184>)
 80003aa:	f000 fe09 	bl	8000fc0 <sendString>
 80003ae:	e014      	b.n	80003da <main+0x11e>
					}
					/* If not exit command - check as others commands */
					else {
						/* Detect command */
						uint8_t detectCommandNumber = detectCommand(
 80003b0:	481d      	ldr	r0, [pc, #116]	; (8000428 <main+0x16c>)
 80003b2:	f7ff fecb 	bl	800014c <strlen>
 80003b6:	4603      	mov	r3, r0
 80003b8:	461a      	mov	r2, r3
 80003ba:	4922      	ldr	r1, [pc, #136]	; (8000444 <main+0x188>)
 80003bc:	481a      	ldr	r0, [pc, #104]	; (8000428 <main+0x16c>)
 80003be:	f000 fd33 	bl	8000e28 <detectCommand>
 80003c2:	4603      	mov	r3, r0
 80003c4:	70fb      	strb	r3, [r7, #3]
								uartTmpBuffer, nrfCommandTable,
								strlen(uartTmpBuffer));
						/* Execute command */
						executeCommand(testStruct, detectCommandNumber);
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	4619      	mov	r1, r3
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f000 fd5a 	bl	8000e84 <executeCommand>
 80003d0:	e003      	b.n	80003da <main+0x11e>
					}
				}
				/* End of positive part of condtion */
			} else {
				sendString("\r\n#nRF command invalid.", &huart2);	//log
 80003d2:	490a      	ldr	r1, [pc, #40]	; (80003fc <main+0x140>)
 80003d4:	481c      	ldr	r0, [pc, #112]	; (8000448 <main+0x18c>)
 80003d6:	f000 fdf3 	bl	8000fc0 <sendString>
			}

			/* Reset buffers and start UART listening */
			resetChar(uartReceiveBuffer, sizeof(uartReceiveBuffer));
 80003da:	2120      	movs	r1, #32
 80003dc:	480b      	ldr	r0, [pc, #44]	; (800040c <main+0x150>)
 80003de:	f000 fe02 	bl	8000fe6 <resetChar>
			HAL_UART_Receive_IT(&huart2, (uint8_t*) uartReceiveBuffer,
 80003e2:	220e      	movs	r2, #14
 80003e4:	4909      	ldr	r1, [pc, #36]	; (800040c <main+0x150>)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <main+0x140>)
 80003e8:	f002 fe5d 	bl	80030a6 <HAL_UART_Receive_IT>
			UART_READ_SIZE);
			resetChar(uartTmpBuffer, sizeof(uartTmpBuffer));
 80003ec:	2120      	movs	r1, #32
 80003ee:	480e      	ldr	r0, [pc, #56]	; (8000428 <main+0x16c>)
 80003f0:	f000 fdf9 	bl	8000fe6 <resetChar>
			/* Reset flag */
			uartRx_flag = 0;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <main+0x164>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
		if (uartRx_flag) {
 80003fa:	e796      	b.n	800032a <main+0x6e>
 80003fc:	20000190 	.word	0x20000190
 8000400:	0800381c 	.word	0x0800381c
 8000404:	20000150 	.word	0x20000150
 8000408:	08003838 	.word	0x08003838
 800040c:	200000d8 	.word	0x200000d8
 8000410:	08003850 	.word	0x08003850
 8000414:	40011000 	.word	0x40011000
 8000418:	40010800 	.word	0x40010800
 800041c:	200000f8 	.word	0x200000f8
 8000420:	20000055 	.word	0x20000055
 8000424:	08003868 	.word	0x08003868
 8000428:	20000098 	.word	0x20000098
 800042c:	20000054 	.word	0x20000054
 8000430:	08003ab0 	.word	0x08003ab0
 8000434:	08003ac8 	.word	0x08003ac8
 8000438:	0800387c 	.word	0x0800387c
 800043c:	08003abc 	.word	0x08003abc
 8000440:	08003898 	.word	0x08003898
 8000444:	20000008 	.word	0x20000008
 8000448:	080038b8 	.word	0x080038b8

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b090      	sub	sp, #64	; 0x40
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	2228      	movs	r2, #40	; 0x28
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f003 f9af 	bl	80037be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046e:	2301      	movs	r3, #1
 8000470:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000476:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	2302      	movs	r3, #2
 8000482:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000488:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800048a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4618      	mov	r0, r3
 8000496:	f001 f9fd 	bl	8001894 <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a0:	f000 f828 	bl	80004f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	230f      	movs	r3, #15
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	2302      	movs	r3, #2
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fc68 	bl	8001d94 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ca:	f000 f813 	bl	80004f4 <Error_Handler>
  }
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	; 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uartRx_flag = 1;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <HAL_UART_RxCpltCallback+0x18>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	20000055 	.word	0x20000055

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <statusStrcut_Init>:
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    nrfStruct->statusStruct.dataReadIrq = 0;
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800050e:	f36f 0300 	bfc	r3, #0, #1
 8000512:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.dataSendIrq = 0;
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800051c:	f36f 0341 	bfc	r3, #1, #1
 8000520:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.maxRetr = 0;
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800052a:	f36f 0382 	bfc	r3, #2, #1
 800052e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000538:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800053c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    nrfStruct->statusStruct.txFull = 0;
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000546:	f36f 1386 	bfc	r3, #6, #1
 800054a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

    nrfStruct->statusStruct.packetsLost = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    nrfStruct->statusStruct.packetsRetr = 0;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    /* Init settigns struct */
    nrfStruct->setStruct.rxMode = 0;                //set as receiver
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7813      	ldrb	r3, [r2, #0]
 8000574:	f36f 0300 	bfc	r3, #0, #1
 8000578:	7013      	strb	r3, [r2, #0]
    nrfStruct->setStruct.channel = 0x02;            //set channel np. 0
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2202      	movs	r2, #2
 800057e:	705a      	strb	r2, [r3, #1]
    nrfStruct->setStruct.dataRate = RF_DataRate_2M; //lowest data rate
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2201      	movs	r2, #1
 8000584:	709a      	strb	r2, [r3, #2]
    nrfStruct->setStruct.powerRF = RF_PWR_0dBm;     //-12dBm power
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2203      	movs	r2, #3
 800058a:	70da      	strb	r2, [r3, #3]

    nrfStruct->setStruct.ard = 0; //auto retr. delay 250us
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	711a      	strb	r2, [r3, #4]
    nrfStruct->setStruct.arc = 3; //auto retr. counter
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2203      	movs	r2, #3
 8000596:	715a      	strb	r2, [r3, #5]

    nrfStruct->setStruct.enableCRC = 1;
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7bd3      	ldrb	r3, [r2, #15]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.codingCRC = 0;
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7bd3      	ldrb	r3, [r2, #15]
 80005a6:	f36f 0341 	bfc	r3, #1, #1
 80005aa:	73d3      	strb	r3, [r2, #15]

    nrfStruct->setStruct.enableTxIrq = 0;
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7bd3      	ldrb	r3, [r2, #15]
 80005b0:	f36f 0382 	bfc	r3, #2, #1
 80005b4:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableRxIrq = 0;
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7bd3      	ldrb	r3, [r2, #15]
 80005ba:	f36f 03c3 	bfc	r3, #3, #1
 80005be:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableMaxRtIrq = 0;
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7bd3      	ldrb	r3, [r2, #15]
 80005c4:	f36f 1304 	bfc	r3, #4, #1
 80005c8:	73d3      	strb	r3, [r2, #15]

    /* Pipe Enable - defult pipe 0 enable only */
    nrfStruct->setStruct.pipeEn = DF_RXADDR;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2203      	movs	r2, #3
 80005ce:	719a      	strb	r2, [r3, #6]
    nrfStruct->setStruct.pipeACK = DF_EN_AA;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	223f      	movs	r2, #63	; 0x3f
 80005d4:	71da      	strb	r2, [r3, #7]
    nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	721a      	strb	r2, [r3, #8]

    /* Pipe RX Payload Lenght  */
    uint8_t i;
    for (i = 0; i < 6; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e007      	b.n	80005f2 <settingStruct_Init+0x8a>
    {
        nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	2200      	movs	r2, #0
 80005ea:	725a      	strb	r2, [r3, #9]
    for (i = 0; i < 6; i++)
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	d9f4      	bls.n	80005e2 <settingStruct_Init+0x7a>
    }

    nrfStruct->setStruct.enableDPL = 0;
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7bd3      	ldrb	r3, [r2, #15]
 80005fc:	f36f 1345 	bfc	r3, #5, #1
 8000600:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableAckPay = 0;
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7bd3      	ldrb	r3, [r2, #15]
 8000606:	f36f 1386 	bfc	r3, #6, #1
 800060a:	73d3      	strb	r3, [r2, #15]
    nrfStruct->setStruct.enableDynACK = 0; //enable NO_ACK command
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7bd3      	ldrb	r3, [r2, #15]
 8000610:	f36f 13c7 	bfc	r3, #7, #1
 8000614:	73d3      	strb	r3, [r2, #15]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    /* Init address struct */
    nrfStruct->addrStruct.addrWidth = longWidth;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2203      	movs	r2, #3
 800062c:	741a      	strb	r2, [r3, #16]
    uint8_t i;
    for (i = 0; i < 5; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e007      	b.n	8000644 <addressStruct_Init+0x24>
    {
        nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	22e7      	movs	r2, #231	; 0xe7
 800063c:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < 5; i++)
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	3301      	adds	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d9f4      	bls.n	8000634 <addressStruct_Init+0x14>
    }
    for (i = 0; i < 5; ++i)
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e007      	b.n	8000660 <addressStruct_Init+0x40>
    {
        nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	22e7      	movs	r2, #231	; 0xe7
 8000658:	759a      	strb	r2, [r3, #22]
    for (i = 0; i < 5; ++i)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	3301      	adds	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d9f4      	bls.n	8000650 <addressStruct_Init+0x30>
    }
    for (i = 0; i < 5; ++i)
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e007      	b.n	800067c <addressStruct_Init+0x5c>
    {
        nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	22c2      	movs	r2, #194	; 0xc2
 8000674:	76da      	strb	r2, [r3, #27]
    for (i = 0; i < 5; ++i)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3301      	adds	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d9f4      	bls.n	800066c <addressStruct_Init+0x4c>
    }
    nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	22c3      	movs	r2, #195	; 0xc3
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
    nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	22c4      	movs	r2, #196	; 0xc4
 800068e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	22c5      	movs	r2, #197	; 0xc5
 8000696:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	22c6      	movs	r2, #198	; 0xc6
 800069e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    /* Init fifo struct */
    nrfStruct->fifoStruct.txReUse = 0;
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006ba:	f36f 0300 	bfc	r3, #0, #1
 80006be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.rxRead = 0;
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006c8:	f36f 0341 	bfc	r3, #1, #1
 80006cc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxFull = 0;
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006d6:	f36f 0382 	bfc	r3, #2, #1
 80006da:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.rxEmpty = 1;
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    nrfStruct->fifoStruct.txSend = 0;
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80006f2:	f36f 1304 	bfc	r3, #4, #1
 80006f6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txFull = 0;
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000700:	f36f 1345 	bfc	r3, #5, #1
 8000704:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    nrfStruct->fifoStruct.txEmpty = 1;
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800070e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000712:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
                          TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
                          uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
                          uint16_t HAL_GPIO_Pin_CE)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
    /* Put pointer of SPI and TIM structures to nRF alias */
    nrfStruct->nRFspi = HAL_SPIx;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
    nrfStruct->nRFtim = HAL_TIMx;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Put GPIO port pointer and pin number to structure's alias */
    nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
    nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	8b3a      	ldrh	r2, [r7, #24]
 8000744:	869a      	strh	r2, [r3, #52]	; 0x34
    nrfStruct->nRFportCE = HAL_GPIO_CE;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	69fa      	ldr	r2, [r7, #28]
 800074a:	639a      	str	r2, [r3, #56]	; 0x38
    nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	8c3a      	ldrh	r2, [r7, #32]
 8000750:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0); //Set star value as 0
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 8000772:	bf00      	nop
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800077c:	887b      	ldrh	r3, [r7, #2]
 800077e:	429a      	cmp	r2, r3
 8000780:	d3f8      	bcc.n	8000774 <delayUs+0x18>
        ;
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	f001 f83e 	bl	8001820 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	f001 f82e 	bl	8001820 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <readReg>:
}

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = R_REGISTER | addr;
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	73fb      	strb	r3, [r7, #15]
    uint8_t reg;
    uint8_t *pCmd = &cmd;
 80007dc:	f107 030f 	add.w	r3, r7, #15
 80007e0:	617b      	str	r3, [r7, #20]
    uint8_t *pReg = &reg;
 80007e2:	f107 030e 	add.w	r3, r7, #14
 80007e6:	613b      	str	r3, [r7, #16]

    csnLow(nrfStruct);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ffcf 	bl	800078c <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007f2:	230a      	movs	r3, #10
 80007f4:	2201      	movs	r2, #1
 80007f6:	6979      	ldr	r1, [r7, #20]
 80007f8:	f001 fcc9 	bl	800218e <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 80007fc:	2132      	movs	r1, #50	; 0x32
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffac 	bl	800075c <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000808:	230a      	movs	r3, #10
 800080a:	2201      	movs	r2, #1
 800080c:	6939      	ldr	r1, [r7, #16]
 800080e:	f001 fdf2 	bl	80023f6 <HAL_SPI_Receive>

    csnHigh(nrfStruct);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffca 	bl	80007ac <csnHigh>
    return reg;
 8000818:	7bbb      	ldrb	r3, [r7, #14]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b084      	sub	sp, #16
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	460b      	mov	r3, r1
 800082c:	70fb      	strb	r3, [r7, #3]
 800082e:	4613      	mov	r3, r2
 8000830:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd = W_REGISTER | addr;
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	b2db      	uxtb	r3, r3
 800083a:	72fb      	strb	r3, [r7, #11]
    uint8_t *pCmd = &cmd;
 800083c:	f107 030b 	add.w	r3, r7, #11
 8000840:	60fb      	str	r3, [r7, #12]

    csnLow(nrfStruct);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800084c:	230a      	movs	r3, #10
 800084e:	2201      	movs	r2, #1
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	f001 fc9c 	bl	800218e <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 8000856:	2132      	movs	r1, #50	; 0x32
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff7f 	bl	800075c <delayUs>
    HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000862:	1cb9      	adds	r1, r7, #2
 8000864:	230a      	movs	r3, #10
 8000866:	2201      	movs	r2, #1
 8000868:	f001 fc91 	bl	800218e <HAL_SPI_Transmit>

    csnHigh(nrfStruct);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff9d 	bl	80007ac <csnHigh>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <writeRegExt>:
    csnHigh(nrfStruct);
}

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
                 size_t bufSize)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	460b      	mov	r3, r1
 8000888:	72fb      	strb	r3, [r7, #11]
    uint8_t cmd = W_REGISTER | addr;
 800088a:	7afb      	ldrb	r3, [r7, #11]
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	b2db      	uxtb	r3, r3
 8000892:	74fb      	strb	r3, [r7, #19]
    uint8_t *pCmd = &cmd;
 8000894:	f107 0313 	add.w	r3, r7, #19
 8000898:	617b      	str	r3, [r7, #20]

    csnLow(nrfStruct);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ff76 	bl	800078c <csnLow>

    HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008a4:	230a      	movs	r3, #10
 80008a6:	2201      	movs	r2, #1
 80008a8:	6979      	ldr	r1, [r7, #20]
 80008aa:	f001 fc70 	bl	800218e <HAL_SPI_Transmit>
    delayUs(nrfStruct, 50);
 80008ae:	2132      	movs	r1, #50	; 0x32
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff ff53 	bl	800075c <delayUs>
    HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	230a      	movs	r3, #10
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	f001 fd98 	bl	80023f6 <HAL_SPI_Receive>
                    SPI_TIMEOUT);

    csnHigh(nrfStruct);
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f7ff ff70 	bl	80007ac <csnHigh>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <pwrUp>:
    return reg;
}

/* Power control */
void pwrUp(nrfStruct_t *nrfStruct)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    uint8_t tmp = readReg(nrfStruct, CONFIG);
 80008dc:	2100      	movs	r1, #0
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ff74 	bl	80007cc <readReg>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << 1);
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, CONFIG, tmp);
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	461a      	mov	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff93 	bl	8000822 <writeReg>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <setBit>:
    tmp &= ~(1 << bit); //zmieniono OR na AND
    writeReg(nrfStruct, addr, tmp);
}

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
 8000910:	4613      	mov	r3, r2
 8000912:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = readReg(nrfStruct, addr);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff57 	bl	80007cc <readReg>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
    tmp |= (1 << bit);
 8000922:	78bb      	ldrb	r3, [r7, #2]
 8000924:	2201      	movs	r2, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	b25a      	sxtb	r2, r3
 800092c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000930:	4313      	orrs	r3, r2
 8000932:	b25b      	sxtb	r3, r3
 8000934:	73fb      	strb	r3, [r7, #15]
    writeReg(nrfStruct, addr, tmp);
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	4619      	mov	r1, r3
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff70 	bl	8000822 <writeReg>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <nRF_Init>:

/* Main init function */
nrfStruct_t *nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
                      GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
                      GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af04      	add	r7, sp, #16
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	807b      	strh	r3, [r7, #2]
    /* Create main nRF structure	 */
    static nrfStruct_t nRFMainStruct;
    static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

    /* Init settigns struct */
    statusStrcut_Init(pnRFMainStruct);
 800095a:	4b6a      	ldr	r3, [pc, #424]	; (8000b04 <nRF_Init+0x1b8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fdce 	bl	8000500 <statusStrcut_Init>
    settingStruct_Init(pnRFMainStruct);
 8000964:	4b67      	ldr	r3, [pc, #412]	; (8000b04 <nRF_Init+0x1b8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fdfd 	bl	8000568 <settingStruct_Init>
    addressStruct_Init(pnRFMainStruct);
 800096e:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <nRF_Init+0x1b8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe54 	bl	8000620 <addressStruct_Init>
    fifoStruct_Init(pnRFMainStruct);
 8000978:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <nRF_Init+0x1b8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe95 	bl	80006ac <fifoStruct_Init>
    hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <nRF_Init+0x1b8>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	68f9      	ldr	r1, [r7, #12]
 8000998:	f7ff fec2 	bl	8000720 <hardware_Init>
                  HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

    //	pwrDown(pnRFMainStruct);
    /* Turn on modul */
    pwrUp(pnRFMainStruct);
 800099c:	4b59      	ldr	r3, [pc, #356]	; (8000b04 <nRF_Init+0x1b8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff97 	bl	80008d4 <pwrUp>

    /* Set default settings */
    setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 80009a6:	4b57      	ldr	r3, [pc, #348]	; (8000b04 <nRF_Init+0x1b8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffa8 	bl	8000904 <setBit>
    writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 80009b4:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <nRF_Init+0x1b8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <nRF_Init+0x1b8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	79db      	ldrb	r3, [r3, #7]
 80009be:	461a      	mov	r2, r3
 80009c0:	2101      	movs	r1, #1
 80009c2:	f7ff ff2e 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 80009c6:	4b4f      	ldr	r3, [pc, #316]	; (8000b04 <nRF_Init+0x1b8>)
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <nRF_Init+0x1b8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	799b      	ldrb	r3, [r3, #6]
 80009d0:	461a      	mov	r2, r3
 80009d2:	2102      	movs	r1, #2
 80009d4:	f7ff ff25 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <nRF_Init+0x1b8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2203      	movs	r2, #3
 80009de:	2103      	movs	r1, #3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff1e 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <nRF_Init+0x1b8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2203      	movs	r2, #3
 80009ec:	2104      	movs	r1, #4
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff17 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <nRF_Init+0x1b8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2202      	movs	r2, #2
 80009fa:	2105      	movs	r1, #5
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff10 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <nRF_Init+0x1b8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	220e      	movs	r2, #14
 8000a08:	2106      	movs	r1, #6
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff09 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <nRF_Init+0x1b8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	220e      	movs	r2, #14
 8000a16:	2107      	movs	r1, #7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff02 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <nRF_Init+0x1b8>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <nRF_Init+0x1b8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	211c      	movs	r1, #28
 8000a2c:	f7ff fef9 	bl	8000822 <writeReg>

    uint8_t i;
    for (i = 0; i < 6; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	75fb      	strb	r3, [r7, #23]
 8000a34:	e00f      	b.n	8000a56 <nRF_Init+0x10a>
    {
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <nRF_Init+0x1b8>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	3311      	adds	r3, #17
 8000a3e:	b2d9      	uxtb	r1, r3
                 (pnRFMainStruct->setStruct.pipePayLen[i]));
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <nRF_Init+0x1b8>)
 8000a42:	681a      	ldr	r2, [r3, #0]
        writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	4413      	add	r3, r2
 8000a48:	7a5b      	ldrb	r3, [r3, #9]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f7ff fee9 	bl	8000822 <writeReg>
    for (i = 0; i < 6; i++)
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	3301      	adds	r3, #1
 8000a54:	75fb      	strb	r3, [r7, #23]
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d9ec      	bls.n	8000a36 <nRF_Init+0xea>
    }
    writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 8000a5c:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <nRF_Init+0x1b8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	211d      	movs	r1, #29
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fedc 	bl	8000822 <writeReg>

    /* Set default address */
    writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <nRF_Init+0x1b8>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <nRF_Init+0x1b8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f103 0211 	add.w	r2, r3, #17
 8000a76:	2305      	movs	r3, #5
 8000a78:	2110      	movs	r1, #16
 8000a7a:	f7ff fefe 	bl	800087a <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.txAddr));
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <nRF_Init+0x1b8>)
 8000a80:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr0),
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <nRF_Init+0x1b8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f103 0216 	add.w	r2, r3, #22
    writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	f7ff fef4 	bl	800087a <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr0));
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <nRF_Init+0x1b8>)
 8000a94:	6818      	ldr	r0, [r3, #0]
                (pnRFMainStruct->addrStruct.rxAddr1),
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <nRF_Init+0x1b8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f103 021b 	add.w	r2, r3, #27
    writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	210b      	movs	r1, #11
 8000aa2:	f7ff feea 	bl	800087a <writeRegExt>
                sizeof(pnRFMainStruct->addrStruct.rxAddr1));
    writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <nRF_Init+0x1b8>)
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <nRF_Init+0x1b8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	210c      	movs	r1, #12
 8000ab6:	f7ff feb4 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <nRF_Init+0x1b8>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <nRF_Init+0x1b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	210d      	movs	r1, #13
 8000aca:	f7ff feaa 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <nRF_Init+0x1b8>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <nRF_Init+0x1b8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ada:	461a      	mov	r2, r3
 8000adc:	210e      	movs	r1, #14
 8000ade:	f7ff fea0 	bl	8000822 <writeReg>
    writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <nRF_Init+0x1b8>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <nRF_Init+0x1b8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000aee:	461a      	mov	r2, r3
 8000af0:	210f      	movs	r1, #15
 8000af2:	f7ff fe96 	bl	8000822 <writeReg>

    return pnRFMainStruct;
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <nRF_Init+0x1b8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000000 	.word	0x20000000

08000b08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <MX_SPI1_Init+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b3c:	2218      	movs	r2, #24
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b5a:	f001 fab7 	bl	80020cc <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b64:	f7ff fcc6 	bl	80004f4 <Error_Handler>
  }

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000f8 	.word	0x200000f8
 8000b70:	40013000 	.word	0x40013000

08000b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d12f      	bne.n	8000bf4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_SPI_MspInit+0x90>)
 8000bd8:	f000 fcc8 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_SPI_MspInit+0x90>)
 8000bf0:	f000 fcbc 	bl	800156c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40013000 	.word	0x40013000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010800 	.word	0x40010800

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_MspInit+0x60>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_MspInit+0x60>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <HardFault_Handler+0x4>

08000c7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <MemManage_Handler+0x4>

08000c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <BusFault_Handler+0x4>

08000c8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <UsageFault_Handler+0x4>

08000c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 fa96 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <USART2_IRQHandler+0x10>)
 8000cc6:	f002 fa43 	bl	8003150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000190 	.word	0x20000190

08000cd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cdc:	f000 fdb8 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <SystemInit+0x5c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <SystemInit+0x5c>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <SystemInit+0x5c>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4911      	ldr	r1, [pc, #68]	; (8000d40 <SystemInit+0x5c>)
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <SystemInit+0x60>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <SystemInit+0x5c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <SystemInit+0x5c>)
 8000d06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <SystemInit+0x5c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SystemInit+0x5c>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <SystemInit+0x5c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <SystemInit+0x5c>)
 8000d22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SystemInit+0x5c>)
 8000d2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SystemInit+0x64>)
 8000d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d36:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	f8ff0000 	.word	0xf8ff0000
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <MX_TIM1_Init+0x9c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d70:	2247      	movs	r2, #71	; 0x47
 8000d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000d96:	f001 feb3 	bl	8002b00 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000da0:	f7ff fba8 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000db2:	f001 fef3 	bl	8002b9c <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000dbc:	f7ff fb9a 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM1_Init+0x98>)
 8000dce:	f002 f895 	bl	8002efc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000dd8:	f7ff fb8c 	bl	80004f4 <Error_Handler>
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000150 	.word	0x20000150
 8000de8:	40012c00 	.word	0x40012c00

08000dec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_TIM_Base_MspInit+0x34>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10b      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_Base_MspInit+0x38>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_TIM_Base_MspInit+0x38>)
 8000e04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_TIM_Base_MspInit+0x38>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40012c00 	.word	0x40012c00
 8000e24:	40021000 	.word	0x40021000

08000e28 <detectCommand>:
const char *nrfCommandTable[COMMAND_TABLE_SIZE] = { nrfPowerUp, nrfPowerDown,
		nrfPowerTx0dBm, nrfPowerTx6dBm, nrfPowerTx12dBm, nrfPowerTx18dBm,
		nrfDataRate250kbps, nrfDataRate1Mbps, nrfDataRate2Mbps, nrfChannel };

/* Functions's bodies */
int8_t detectCommand(const char *str, const char **cmdTab, size_t strLen) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
	if (strLen < MINIMUM_COMMAND_SIZE) //Check min size of command
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d802      	bhi.n	8000e40 <detectCommand+0x18>
		return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e01c      	b.n	8000e7a <detectCommand+0x52>
	/* First command */
	uint8_t i;
	char *p = NULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8000e44:	2300      	movs	r3, #0
 8000e46:	75fb      	strb	r3, [r7, #23]
 8000e48:	e012      	b.n	8000e70 <detectCommand+0x48>
		p = strstr(str, cmdTab[i]);
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	4413      	add	r3, r2
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f002 fcb9 	bl	80037ce <strstr>
 8000e5c:	6138      	str	r0, [r7, #16]
		if (p != NULL) {
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <detectCommand+0x42>
			return i;
 8000e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e68:	e007      	b.n	8000e7a <detectCommand+0x52>
	for (i = 0; i < COMMAND_TABLE_SIZE; i++) {
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	2b09      	cmp	r3, #9
 8000e74:	d9e9      	bls.n	8000e4a <detectCommand+0x22>
		}
	}
	return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <executeCommand>:

uint8_t executeCommand(nrfStruct_t *nrfStruct, uint8_t commandNumber) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	switch (commandNumber) {
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b09      	cmp	r3, #9
 8000e94:	d870      	bhi.n	8000f78 <executeCommand+0xf4>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <executeCommand+0x18>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ec5 	.word	0x08000ec5
 8000ea0:	08000ed7 	.word	0x08000ed7
 8000ea4:	08000ee9 	.word	0x08000ee9
 8000ea8:	08000efb 	.word	0x08000efb
 8000eac:	08000f0d 	.word	0x08000f0d
 8000eb0:	08000f1f 	.word	0x08000f1f
 8000eb4:	08000f31 	.word	0x08000f31
 8000eb8:	08000f43 	.word	0x08000f43
 8000ebc:	08000f55 	.word	0x08000f55
 8000ec0:	08000f67 	.word	0x08000f67
	case 0:
		/* Execute Power Up */
//		pwrUp(nrfStruct);
		sendString("\n\rExecuted 1st command.", &huart2);
 8000ec4:	4932      	ldr	r1, [pc, #200]	; (8000f90 <executeCommand+0x10c>)
 8000ec6:	4833      	ldr	r0, [pc, #204]	; (8000f94 <executeCommand+0x110>)
 8000ec8:	f000 f87a 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f000 f9a7 	bl	8001220 <HAL_Delay>
		return 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e058      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 1:
//		pwrDown(nrfStruct);
		sendString("\n\rExecuted 2nd command.", &huart2);
 8000ed6:	492e      	ldr	r1, [pc, #184]	; (8000f90 <executeCommand+0x10c>)
 8000ed8:	482f      	ldr	r0, [pc, #188]	; (8000f98 <executeCommand+0x114>)
 8000eda:	f000 f871 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000ede:	2032      	movs	r0, #50	; 0x32
 8000ee0:	f000 f99e 	bl	8001220 <HAL_Delay>
		return 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e04f      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 2:
		sendString("\n\rExecuted 3rd command.", &huart2);
 8000ee8:	4929      	ldr	r1, [pc, #164]	; (8000f90 <executeCommand+0x10c>)
 8000eea:	482c      	ldr	r0, [pc, #176]	; (8000f9c <executeCommand+0x118>)
 8000eec:	f000 f868 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000ef0:	2032      	movs	r0, #50	; 0x32
 8000ef2:	f000 f995 	bl	8001220 <HAL_Delay>
		return 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e046      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 3:
		sendString("\n\rExecuted 4th command.", &huart2);
 8000efa:	4925      	ldr	r1, [pc, #148]	; (8000f90 <executeCommand+0x10c>)
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <executeCommand+0x11c>)
 8000efe:	f000 f85f 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f02:	2032      	movs	r0, #50	; 0x32
 8000f04:	f000 f98c 	bl	8001220 <HAL_Delay>
		return 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e03d      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 4:
		sendString("\n\rExecuted 5th command.", &huart2);
 8000f0c:	4920      	ldr	r1, [pc, #128]	; (8000f90 <executeCommand+0x10c>)
 8000f0e:	4825      	ldr	r0, [pc, #148]	; (8000fa4 <executeCommand+0x120>)
 8000f10:	f000 f856 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f14:	2032      	movs	r0, #50	; 0x32
 8000f16:	f000 f983 	bl	8001220 <HAL_Delay>
		return 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e034      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 5:
		sendString("\n\rExecuted 6th command.", &huart2);
 8000f1e:	491c      	ldr	r1, [pc, #112]	; (8000f90 <executeCommand+0x10c>)
 8000f20:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <executeCommand+0x124>)
 8000f22:	f000 f84d 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f26:	2032      	movs	r0, #50	; 0x32
 8000f28:	f000 f97a 	bl	8001220 <HAL_Delay>
		return 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e02b      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 6:
		sendString("\n\rExecuted 7th command.", &huart2);
 8000f30:	4917      	ldr	r1, [pc, #92]	; (8000f90 <executeCommand+0x10c>)
 8000f32:	481e      	ldr	r0, [pc, #120]	; (8000fac <executeCommand+0x128>)
 8000f34:	f000 f844 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f38:	2032      	movs	r0, #50	; 0x32
 8000f3a:	f000 f971 	bl	8001220 <HAL_Delay>
		return 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e022      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 7:
		sendString("\n\rExecuted 8th command.", &huart2);
 8000f42:	4913      	ldr	r1, [pc, #76]	; (8000f90 <executeCommand+0x10c>)
 8000f44:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <executeCommand+0x12c>)
 8000f46:	f000 f83b 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f4a:	2032      	movs	r0, #50	; 0x32
 8000f4c:	f000 f968 	bl	8001220 <HAL_Delay>
		return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e019      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 8:
		sendString("\n\rExecuted 9th command.", &huart2);
 8000f54:	490e      	ldr	r1, [pc, #56]	; (8000f90 <executeCommand+0x10c>)
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <executeCommand+0x130>)
 8000f58:	f000 f832 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f5c:	2032      	movs	r0, #50	; 0x32
 8000f5e:	f000 f95f 	bl	8001220 <HAL_Delay>
		return 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e010      	b.n	8000f88 <executeCommand+0x104>
		break;
	case 9:
		sendString("\n\rExecuted 10th command.", &huart2);
 8000f66:	490a      	ldr	r1, [pc, #40]	; (8000f90 <executeCommand+0x10c>)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <executeCommand+0x134>)
 8000f6a:	f000 f829 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f6e:	2032      	movs	r0, #50	; 0x32
 8000f70:	f000 f956 	bl	8001220 <HAL_Delay>
		return 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e007      	b.n	8000f88 <executeCommand+0x104>
		break;
	default:
		sendString("\n\rInvalid command.", &huart2);
 8000f78:	4905      	ldr	r1, [pc, #20]	; (8000f90 <executeCommand+0x10c>)
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <executeCommand+0x138>)
 8000f7c:	f000 f820 	bl	8000fc0 <sendString>
		HAL_Delay(50);
 8000f80:	2032      	movs	r0, #50	; 0x32
 8000f82:	f000 f94d 	bl	8001220 <HAL_Delay>
		return 0;
 8000f86:	2300      	movs	r3, #0
		break;
	}

	return 0;
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000190 	.word	0x20000190
 8000f94:	080038d0 	.word	0x080038d0
 8000f98:	080038e8 	.word	0x080038e8
 8000f9c:	08003900 	.word	0x08003900
 8000fa0:	08003918 	.word	0x08003918
 8000fa4:	08003930 	.word	0x08003930
 8000fa8:	08003948 	.word	0x08003948
 8000fac:	08003960 	.word	0x08003960
 8000fb0:	08003978 	.word	0x08003978
 8000fb4:	08003990 	.word	0x08003990
 8000fb8:	080039a8 	.word	0x080039a8
 8000fbc:	080039c4 	.word	0x080039c4

08000fc0 <sendString>:
	}
	return 1;
}


void sendString(const char *str, UART_HandleTypeDef *huart) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t*) str, strlen(str));
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff f8be 	bl	800014c <strlen>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	6838      	ldr	r0, [r7, #0]
 8000fda:	f002 f820 	bl	800301e <HAL_UART_Transmit_IT>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <resetChar>:
	char data[16];
	size_t dataSize = sprintf(data, "%s%ld.%ld", sign, tmpInt, tmpInt2);
	HAL_UART_Transmit_IT(huart, (uint8_t*) data, dataSize);
}

uint8_t resetChar(char *buf, size_t bufSize) {
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
	if (bufSize <= 0 || bufSize > 256)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <resetChar+0x18>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ffc:	d901      	bls.n	8001002 <resetChar+0x1c>
		return 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e010      	b.n	8001024 <resetChar+0x3e>
	else {
		uint8_t i;
		for (i = 0; i < (bufSize - 1); i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e007      	b.n	8001018 <resetChar+0x32>
			buf[i] = 0x00;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (bufSize - 1); i++) {
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	3301      	adds	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	429a      	cmp	r2, r3
 8001020:	d3f2      	bcc.n	8001008 <resetChar+0x22>
		}
		return 1;
 8001022:	2301      	movs	r3, #1
	}
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
	...

08001030 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f001 ff8c 	bl	8002f84 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f7ff fa3f 	bl	80004f4 <Error_Handler>
  }

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000190 	.word	0x20000190
 8001080:	40004400 	.word	0x40004400

08001084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_UART_MspInit+0x80>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d12b      	bne.n	80010fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ae:	61d3      	str	r3, [r2, #28]
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_UART_MspInit+0x84>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d4:	230c      	movs	r3, #12
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2302      	movs	r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_UART_MspInit+0x88>)
 80010e8:	f000 fa40 	bl	800156c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2026      	movs	r0, #38	; 0x26
 80010f2:	f000 f98e 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f6:	2026      	movs	r0, #38	; 0x26
 80010f8:	f000 f9a7 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40004400 	.word	0x40004400
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001110:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001112:	e003      	b.n	800111c <LoopCopyDataInit>

08001114 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001116:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001118:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800111a:	3104      	adds	r1, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001120:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001124:	d3f6      	bcc.n	8001114 <CopyDataInit>
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001128:	e002      	b.n	8001130 <LoopFillZerobss>

0800112a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800112c:	f842 3b04 	str.w	r3, [r2], #4

08001130 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001134:	d3f9      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001136:	f7ff fdd5 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 fb11 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff f8bd 	bl	80002bc <main>
  bx lr
 8001142:	4770      	bx	lr
  ldr r3, =_sidata
 8001144:	08003ad8 	.word	0x08003ad8
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800114c:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 8001150:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 8001154:	200001d4 	.word	0x200001d4

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f945 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fd46 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f95d 	bl	8001466 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f925 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000004 	.word	0x20000004
 80011e0:	20000034 	.word	0x20000034
 80011e4:	20000030 	.word	0x20000030

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000034 	.word	0x20000034
 8001208:	200001d0 	.word	0x200001d0

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	200001d0 	.word	0x200001d0

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_Delay+0x40>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000034 	.word	0x20000034

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4906      	ldr	r1, [pc, #24]	; (80012fc <__NVIC_EnableIRQ+0x34>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff90 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff2d 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff42 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff90 	bl	8001354 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5f 	bl	8001300 <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff35 	bl	80012c8 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001492:	2b02      	cmp	r3, #2
 8001494:	d005      	beq.n	80014a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2204      	movs	r2, #4
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e051      	b.n	8001546 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 020e 	bic.w	r2, r2, #14
 80014b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_DMA_Abort_IT+0xd0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d029      	beq.n	8001520 <HAL_DMA_Abort_IT+0xa0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_DMA_Abort_IT+0xd4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d022      	beq.n	800151c <HAL_DMA_Abort_IT+0x9c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_DMA_Abort_IT+0xd8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d01a      	beq.n	8001516 <HAL_DMA_Abort_IT+0x96>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_DMA_Abort_IT+0xdc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d012      	beq.n	8001510 <HAL_DMA_Abort_IT+0x90>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_DMA_Abort_IT+0xe0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00a      	beq.n	800150a <HAL_DMA_Abort_IT+0x8a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_DMA_Abort_IT+0xe4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d102      	bne.n	8001504 <HAL_DMA_Abort_IT+0x84>
 80014fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001502:	e00e      	b.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 8001504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001508:	e00b      	b.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 800150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150e:	e008      	b.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	e005      	b.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	e002      	b.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 800151c:	2310      	movs	r3, #16
 800151e:	e000      	b.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 8001520:	2301      	movs	r3, #1
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_DMA_Abort_IT+0xe8>)
 8001524:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
    } 
  }
  return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40020008 	.word	0x40020008
 8001554:	4002001c 	.word	0x4002001c
 8001558:	40020030 	.word	0x40020030
 800155c:	40020044 	.word	0x40020044
 8001560:	40020058 	.word	0x40020058
 8001564:	4002006c 	.word	0x4002006c
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e127      	b.n	80017d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001580:	2201      	movs	r2, #1
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8116 	bne.w	80017ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d034      	beq.n	8001610 <HAL_GPIO_Init+0xa4>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d80d      	bhi.n	80015c6 <HAL_GPIO_Init+0x5a>
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d02b      	beq.n	8001606 <HAL_GPIO_Init+0x9a>
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d804      	bhi.n	80015bc <HAL_GPIO_Init+0x50>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d031      	beq.n	800161a <HAL_GPIO_Init+0xae>
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d01c      	beq.n	80015f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ba:	e048      	b.n	800164e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d043      	beq.n	8001648 <HAL_GPIO_Init+0xdc>
 80015c0:	2b11      	cmp	r3, #17
 80015c2:	d01b      	beq.n	80015fc <HAL_GPIO_Init+0x90>
          break;
 80015c4:	e043      	b.n	800164e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015c6:	4a89      	ldr	r2, [pc, #548]	; (80017ec <HAL_GPIO_Init+0x280>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d026      	beq.n	800161a <HAL_GPIO_Init+0xae>
 80015cc:	4a87      	ldr	r2, [pc, #540]	; (80017ec <HAL_GPIO_Init+0x280>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d806      	bhi.n	80015e0 <HAL_GPIO_Init+0x74>
 80015d2:	4a87      	ldr	r2, [pc, #540]	; (80017f0 <HAL_GPIO_Init+0x284>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d020      	beq.n	800161a <HAL_GPIO_Init+0xae>
 80015d8:	4a86      	ldr	r2, [pc, #536]	; (80017f4 <HAL_GPIO_Init+0x288>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01d      	beq.n	800161a <HAL_GPIO_Init+0xae>
          break;
 80015de:	e036      	b.n	800164e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015e0:	4a85      	ldr	r2, [pc, #532]	; (80017f8 <HAL_GPIO_Init+0x28c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0xae>
 80015e6:	4a85      	ldr	r2, [pc, #532]	; (80017fc <HAL_GPIO_Init+0x290>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d016      	beq.n	800161a <HAL_GPIO_Init+0xae>
 80015ec:	4a84      	ldr	r2, [pc, #528]	; (8001800 <HAL_GPIO_Init+0x294>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0xae>
          break;
 80015f2:	e02c      	b.n	800164e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e028      	b.n	800164e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	3304      	adds	r3, #4
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e023      	b.n	800164e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	3308      	adds	r3, #8
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e01e      	b.n	800164e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	330c      	adds	r3, #12
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e019      	b.n	800164e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001622:	2304      	movs	r3, #4
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e012      	b.n	800164e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	611a      	str	r2, [r3, #16]
          break;
 800163a:	e008      	b.n	800164e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	615a      	str	r2, [r3, #20]
          break;
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	d801      	bhi.n	8001658 <HAL_GPIO_Init+0xec>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	e001      	b.n	800165c <HAL_GPIO_Init+0xf0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3304      	adds	r3, #4
 800165c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2bff      	cmp	r3, #255	; 0xff
 8001662:	d802      	bhi.n	800166a <HAL_GPIO_Init+0xfe>
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x104>
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	3b08      	subs	r3, #8
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	210f      	movs	r1, #15
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	401a      	ands	r2, r3
 8001682:	6a39      	ldr	r1, [r7, #32]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	431a      	orrs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8096 	beq.w	80017ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_GPIO_Init+0x298>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_GPIO_Init+0x298>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <HAL_GPIO_Init+0x298>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b6:	4a54      	ldr	r2, [pc, #336]	; (8001808 <HAL_GPIO_Init+0x29c>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4b      	ldr	r2, [pc, #300]	; (800180c <HAL_GPIO_Init+0x2a0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x19e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4a      	ldr	r2, [pc, #296]	; (8001810 <HAL_GPIO_Init+0x2a4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x19a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a49      	ldr	r2, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x2a8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x196>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2ac>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x192>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x1a0>
 80016fe:	2304      	movs	r3, #4
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x1a0>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x1a0>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x1a0>
 800170a:	2300      	movs	r3, #0
 800170c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170e:	f002 0203 	and.w	r2, r2, #3
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4093      	lsls	r3, r2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171c:	493a      	ldr	r1, [pc, #232]	; (8001808 <HAL_GPIO_Init+0x29c>)
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4938      	ldr	r1, [pc, #224]	; (800181c <HAL_GPIO_Init+0x2b0>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
 8001742:	e006      	b.n	8001752 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001744:	4b35      	ldr	r3, [pc, #212]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	43db      	mvns	r3, r3
 800174c:	4933      	ldr	r1, [pc, #204]	; (800181c <HAL_GPIO_Init+0x2b0>)
 800174e:	4013      	ands	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	492e      	ldr	r1, [pc, #184]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
 800176a:	e006      	b.n	800177a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_GPIO_Init+0x2b0>)
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	43db      	mvns	r3, r3
 8001774:	4929      	ldr	r1, [pc, #164]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001776:	4013      	ands	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	4924      	ldr	r1, [pc, #144]	; (800181c <HAL_GPIO_Init+0x2b0>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
 8001792:	e006      	b.n	80017a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_GPIO_Init+0x2b0>)
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	43db      	mvns	r3, r3
 800179c:	491f      	ldr	r1, [pc, #124]	; (800181c <HAL_GPIO_Init+0x2b0>)
 800179e:	4013      	ands	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_GPIO_Init+0x2b0>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	491a      	ldr	r1, [pc, #104]	; (800181c <HAL_GPIO_Init+0x2b0>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60cb      	str	r3, [r1, #12]
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_GPIO_Init+0x2b0>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4915      	ldr	r1, [pc, #84]	; (800181c <HAL_GPIO_Init+0x2b0>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	3301      	adds	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f aed0 	bne.w	8001580 <HAL_GPIO_Init+0x14>
  }
}
 80017e0:	bf00      	nop
 80017e2:	372c      	adds	r7, #44	; 0x2c
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	10210000 	.word	0x10210000
 80017f0:	10110000 	.word	0x10110000
 80017f4:	10120000 	.word	0x10120000
 80017f8:	10310000 	.word	0x10310000
 80017fc:	10320000 	.word	0x10320000
 8001800:	10220000 	.word	0x10220000
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	40011400 	.word	0x40011400
 800181c:	40010400 	.word	0x40010400

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f806 	bl	8001880 <HAL_GPIO_EXTI_Callback>
  }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e26c      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8087 	beq.w	80019c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c0:	4b8f      	ldr	r3, [pc, #572]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
 80018cc:	4b8c      	ldr	r3, [pc, #560]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b89      	ldr	r3, [pc, #548]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x12c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d168      	bne.n	80019c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e246      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x76>
 80018fc:	4b80      	ldr	r3, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a7f      	ldr	r2, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e02e      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a77      	ldr	r2, [pc, #476]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0xbc>
 8001936:	4b72      	ldr	r3, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a71      	ldr	r2, [pc, #452]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 8001950:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6a      	ldr	r2, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a67      	ldr	r2, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc4c 	bl	800120c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc48 	bl	800120c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1fa      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xe4>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc38 	bl	800120c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc34 	bl	800120c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1e6      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x10c>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ce:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x18c>
 80019e6:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1ba      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4939      	ldr	r1, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fbed 	bl	800120c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fbe9 	bl	800120c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e19b      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4927      	ldr	r1, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fbcc 	bl	800120c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbc8 	bl	800120c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e17a      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03a      	beq.n	8001b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d019      	beq.n	8001ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fbac 	bl	800120c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fba8 	bl	800120c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e15a      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 fada 	bl	8002090 <RCC_Delay>
 8001adc:	e01c      	b.n	8001b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fb92 	bl	800120c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aea:	e00f      	b.n	8001b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb8e 	bl	800120c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e140      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	42420000 	.word	0x42420000
 8001b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	4b9e      	ldr	r3, [pc, #632]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1e9      	bne.n	8001aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a6 	beq.w	8001c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b97      	ldr	r3, [pc, #604]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10d      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b94      	ldr	r3, [pc, #592]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a93      	ldr	r2, [pc, #588]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b8e      	ldr	r3, [pc, #568]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a8a      	ldr	r2, [pc, #552]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb4f 	bl	800120c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff fb4b 	bl	800120c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	; 0x64
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0fd      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x312>
 8001b98:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a7a      	ldr	r2, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e02d      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x334>
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a72      	ldr	r2, [pc, #456]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x356>
 8001bd0:	4b6d      	ldr	r3, [pc, #436]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a6c      	ldr	r2, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a69      	ldr	r2, [pc, #420]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a66      	ldr	r2, [pc, #408]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff faff 	bl	800120c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fafb 	bl	800120c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0ab      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x37e>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fae9 	bl	800120c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fae5 	bl	800120c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e095      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8081 	beq.w	8001d7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7c:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d061      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d146      	bne.n	8001d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x4fc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fab9 	bl	800120c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fab5 	bl	800120c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e067      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	492d      	ldr	r1, [pc, #180]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a19      	ldr	r1, [r3, #32]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	4927      	ldr	r1, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x4fc>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fa89 	bl	800120c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff fa85 	bl	800120c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e037      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x46a>
 8001d1c:	e02f      	b.n	8001d7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_RCC_OscConfig+0x4fc>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fa72 	bl	800120c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fa6e 	bl	800120c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e020      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x498>
 8001d4a:	e018      	b.n	8001d7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e013      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	42420060 	.word	0x42420060

08001d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0d0      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4965      	ldr	r1, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d040      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d115      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e073      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4936      	ldr	r1, [pc, #216]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7ff f9c2 	bl	800120c <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff f9be 	bl	800120c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e053      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d210      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4922      	ldr	r1, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4601      	mov	r1, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1cc>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f920 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003a10 	.word	0x08003a10
 8001f60:	20000004 	.word	0x20000004
 8001f64:	20000030 	.word	0x20000030

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b490      	push	{r4, r7}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f70:	1d3c      	adds	r4, r7, #4
 8001f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x46>
 8001fa6:	e02d      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001faa:	623b      	str	r3, [r7, #32]
      break;
 8001fac:	e02d      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	0c9b      	lsrs	r3, r3, #18
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fba:	4413      	add	r3, r2
 8001fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0c5b      	lsrs	r3, r3, #17
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fda:	4413      	add	r3, r2
 8001fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe6:	fb02 f203 	mul.w	r2, r2, r3
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e004      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	623b      	str	r3, [r7, #32]
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002006:	623b      	str	r3, [r7, #32]
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6a3b      	ldr	r3, [r7, #32]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc90      	pop	{r4, r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	080039fc 	.word	0x080039fc
 800201c:	08003a0c 	.word	0x08003a0c
 8002020:	40021000 	.word	0x40021000
 8002024:	007a1200 	.word	0x007a1200
 8002028:	003d0900 	.word	0x003d0900

0800202c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <HAL_RCC_GetHCLKFreq+0x10>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002044:	f7ff fff2 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002048:	4601      	mov	r1, r0
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4a03      	ldr	r2, [pc, #12]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	fa21 f303 	lsr.w	r3, r1, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	08003a20 	.word	0x08003a20

08002068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800206c:	f7ff ffde 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002070:	4601      	mov	r1, r0
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	0adb      	lsrs	r3, r3, #11
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_RCC_GetPCLK2Freq+0x24>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	08003a20 	.word	0x08003a20

08002090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <RCC_Delay+0x34>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <RCC_Delay+0x38>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0a5b      	lsrs	r3, r3, #9
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020ac:	bf00      	nop
  }
  while (Delay --);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	60fa      	str	r2, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f9      	bne.n	80020ac <RCC_Delay+0x1c>
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000004 	.word	0x20000004
 80020c8:	10624dd3 	.word	0x10624dd3

080020cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e053      	b.n	8002186 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe fd3b 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002114:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	ea42 0103 	orr.w	r1, r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	0c1a      	lsrs	r2, r3, #16
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f002 0204 	and.w	r2, r2, #4
 8002164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b088      	sub	sp, #32
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_SPI_Transmit+0x22>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e11e      	b.n	80023ee <HAL_SPI_Transmit+0x260>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b8:	f7ff f828 	bl	800120c <HAL_GetTick>
 80021bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d002      	beq.n	80021d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021d2:	e103      	b.n	80023dc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_SPI_Transmit+0x52>
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021e4:	e0fa      	b.n	80023dc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800222c:	d107      	bne.n	800223e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800223c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d007      	beq.n	800225c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002264:	d14b      	bne.n	80022fe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_SPI_Transmit+0xe6>
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d13e      	bne.n	80022f2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002298:	e02b      	b.n	80022f2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d112      	bne.n	80022ce <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80022cc:	e011      	b.n	80022f2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ce:	f7fe ff9d 	bl	800120c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d803      	bhi.n	80022e6 <HAL_SPI_Transmit+0x158>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d102      	bne.n	80022ec <HAL_SPI_Transmit+0x15e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022f0:	e074      	b.n	80023dc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ce      	bne.n	800229a <HAL_SPI_Transmit+0x10c>
 80022fc:	e04c      	b.n	8002398 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_SPI_Transmit+0x17e>
 8002306:	8afb      	ldrh	r3, [r7, #22]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d140      	bne.n	800238e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002332:	e02c      	b.n	800238e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d113      	bne.n	800236a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	7812      	ldrb	r2, [r2, #0]
 800234e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	86da      	strh	r2, [r3, #54]	; 0x36
 8002368:	e011      	b.n	800238e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800236a:	f7fe ff4f 	bl	800120c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d803      	bhi.n	8002382 <HAL_SPI_Transmit+0x1f4>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d102      	bne.n	8002388 <HAL_SPI_Transmit+0x1fa>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800238c:	e026      	b.n	80023dc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1cd      	bne.n	8002334 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fb91 	bl	8002ac4 <SPI_EndRxTxTransaction>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	77fb      	strb	r3, [r7, #31]
 80023d8:	e000      	b.n	80023dc <HAL_SPI_Transmit+0x24e>
  }

error:
 80023da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b088      	sub	sp, #32
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002412:	d112      	bne.n	800243a <HAL_SPI_Receive+0x44>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2204      	movs	r2, #4
 8002420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f8e9 	bl	8002608 <HAL_SPI_TransmitReceive>
 8002436:	4603      	mov	r3, r0
 8002438:	e0e2      	b.n	8002600 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_SPI_Receive+0x52>
 8002444:	2302      	movs	r3, #2
 8002446:	e0db      	b.n	8002600 <HAL_SPI_Receive+0x20a>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002450:	f7fe fedc 	bl	800120c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d002      	beq.n	8002468 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002462:	2302      	movs	r3, #2
 8002464:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002466:	e0c2      	b.n	80025ee <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_SPI_Receive+0x7e>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002478:	e0b9      	b.n	80025ee <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2204      	movs	r2, #4
 800247e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c0:	d107      	bne.n	80024d2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d007      	beq.n	80024f0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d162      	bne.n	80025be <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024f8:	e02e      	b.n	8002558 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d115      	bne.n	8002534 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f103 020c 	add.w	r2, r3, #12
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002532:	e011      	b.n	8002558 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002534:	f7fe fe6a 	bl	800120c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d803      	bhi.n	800254c <HAL_SPI_Receive+0x156>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Receive+0x15c>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002556:	e04a      	b.n	80025ee <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1cb      	bne.n	80024fa <HAL_SPI_Receive+0x104>
 8002562:	e031      	b.n	80025c8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d113      	bne.n	800259a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	b292      	uxth	r2, r2
 800257e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002598:	e011      	b.n	80025be <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259a:	f7fe fe37 	bl	800120c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d803      	bhi.n	80025b2 <HAL_SPI_Receive+0x1bc>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d102      	bne.n	80025b8 <HAL_SPI_Receive+0x1c2>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025bc:	e017      	b.n	80025ee <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1cd      	bne.n	8002564 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	6839      	ldr	r1, [r7, #0]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fa27 	bl	8002a20 <SPI_EndRxTransaction>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
 80025ea:	e000      	b.n	80025ee <HAL_SPI_Receive+0x1f8>
  }

error :
 80025ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002616:	2301      	movs	r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_SPI_TransmitReceive+0x26>
 800262a:	2302      	movs	r3, #2
 800262c:	e18a      	b.n	8002944 <HAL_SPI_TransmitReceive+0x33c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002636:	f7fe fde9 	bl	800120c <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002654:	2b01      	cmp	r3, #1
 8002656:	d00f      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x70>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800265e:	d107      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d103      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x68>
 8002668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800266c:	2b04      	cmp	r3, #4
 800266e:	d003      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002676:	e15b      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_SPI_TransmitReceive+0x82>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_TransmitReceive+0x82>
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002690:	e14e      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b04      	cmp	r3, #4
 800269c:	d003      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2205      	movs	r2, #5
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d007      	beq.n	80026fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002702:	d178      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x10a>
 800270c:	8b7b      	ldrh	r3, [r7, #26]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d166      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002736:	e053      	b.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d11b      	bne.n	800277e <HAL_SPI_TransmitReceive+0x176>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_SPI_TransmitReceive+0x176>
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d113      	bne.n	800277e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d119      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x1b8>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	b292      	uxth	r2, r2
 80027a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027bc:	2301      	movs	r3, #1
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027c0:	f7fe fd24 	bl	800120c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d807      	bhi.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d003      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027de:	e0a7      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1a6      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x130>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1a1      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x130>
 80027f4:	e07c      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x1fc>
 80027fe:	8b7b      	ldrh	r3, [r7, #26]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d16b      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282a:	e057      	b.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11c      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d017      	beq.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d114      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d119      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d014      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028b6:	f7fe fca9 	bl	800120c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d803      	bhi.n	80028ce <HAL_SPI_TransmitReceive+0x2c6>
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d102      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2cc>
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028da:	e029      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1a2      	bne.n	800282c <HAL_SPI_TransmitReceive+0x224>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d19d      	bne.n	800282c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8e5 	bl	8002ac4 <SPI_EndRxTxTransaction>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800290c:	e010      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	e000      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800292e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002940:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295c:	e04c      	b.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d048      	beq.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002966:	f7fe fc51 	bl	800120c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d902      	bls.n	800297c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d13d      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800298a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002994:	d111      	bne.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299e:	d004      	beq.n	80029aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a8:	d107      	bne.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	d10f      	bne.n	80029e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e00f      	b.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d1a3      	bne.n	800295e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a34:	d111      	bne.n	8002a5a <SPI_EndRxTransaction+0x3a>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d004      	beq.n	8002a4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d107      	bne.n	8002a5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a58:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a62:	d117      	bne.n	8002a94 <SPI_EndRxTransaction+0x74>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d112      	bne.n	8002a94 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2101      	movs	r1, #1
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff ff67 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01a      	beq.n	8002aba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e013      	b.n	8002abc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff54 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e000      	b.n	8002abc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff ff36 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e000      	b.n	8002af8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01d      	b.n	8002b4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe f960 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 f8e4 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d007      	beq.n	8002b88 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_ConfigClockSource+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0a6      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x166>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d067      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0x120>
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d80b      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x6c>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d073      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0x140>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d802      	bhi.n	8002bfe <HAL_TIM_ConfigClockSource+0x62>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d06f      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002bfc:	e078      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d06c      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0x140>
 8002c02:	2b30      	cmp	r3, #48	; 0x30
 8002c04:	d06a      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c06:	e073      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d00d      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0x8c>
 8002c0c:	2b70      	cmp	r3, #112	; 0x70
 8002c0e:	d804      	bhi.n	8002c1a <HAL_TIM_ConfigClockSource+0x7e>
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d033      	beq.n	8002c7c <HAL_TIM_ConfigClockSource+0xe0>
 8002c14:	2b60      	cmp	r3, #96	; 0x60
 8002c16:	d041      	beq.n	8002c9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c18:	e06a      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d066      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x152>
 8002c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c24:	d017      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c26:	e063      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f000 f941 	bl	8002ebe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]
      break;
 8002c54:	e04c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f000 f92a 	bl	8002ebe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c78:	609a      	str	r2, [r3, #8]
      break;
 8002c7a:	e039      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f000 f8a1 	bl	8002dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2150      	movs	r1, #80	; 0x50
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f8f8 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c9a:	e029      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f000 f8bf 	bl	8002e2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2160      	movs	r1, #96	; 0x60
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f8e8 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002cba:	e019      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f000 f881 	bl	8002dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2140      	movs	r1, #64	; 0x40
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f8d8 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002cda:	e009      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f8cf 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <TIM_Base_SetConfig+0xb8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x30>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x30>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <TIM_Base_SetConfig+0xbc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x30>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <TIM_Base_SetConfig+0xc0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <TIM_Base_SetConfig+0xb8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0x62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <TIM_Base_SetConfig+0xbc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0x62>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <TIM_Base_SetConfig+0xc0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <TIM_Base_SetConfig+0xb8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d103      	bne.n	8002db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	615a      	str	r2, [r3, #20]
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000800 	.word	0x40000800

08002dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 030a 	bic.w	r3, r3, #10
 8002e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f023 0210 	bic.w	r2, r3, #16
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	031b      	lsls	r3, r3, #12
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	621a      	str	r2, [r3, #32]
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b087      	sub	sp, #28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	021a      	lsls	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e032      	b.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e03f      	b.n	8003016 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe f86a 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 faef 	bl	80035ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	d130      	bne.n	800309a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_UART_Transmit_IT+0x26>
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e029      	b.n	800309c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_UART_Transmit_IT+0x38>
 8003052:	2302      	movs	r3, #2
 8003054:	e022      	b.n	800309c <HAL_UART_Transmit_IT+0x7e>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2221      	movs	r2, #33	; 0x21
 800307a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003094:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d140      	bne.n	8003142 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_UART_Receive_IT+0x26>
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e039      	b.n	8003144 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_UART_Receive_IT+0x38>
 80030da:	2302      	movs	r3, #2
 80030dc:	e032      	b.n	8003144 <HAL_UART_Receive_IT+0x9e>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2222      	movs	r2, #34	; 0x22
 8003102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0220 	orr.w	r2, r2, #32
 800313c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x52>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f984 	bl	80034a8 <UART_Receive_IT>
      return;
 80031a0:	e0cc      	b.n	800333c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80ab 	beq.w	8003300 <HAL_UART_IRQHandler+0x1b0>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_UART_IRQHandler+0x70>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a0 	beq.w	8003300 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_UART_IRQHandler+0x90>
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_UART_IRQHandler+0xb0>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	f043 0202 	orr.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_UART_IRQHandler+0xd0>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_UART_IRQHandler+0xf0>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	f043 0208 	orr.w	r2, r3, #8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d078      	beq.n	800333a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_UART_IRQHandler+0x112>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f923 	bl	80034a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_UART_IRQHandler+0x13a>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d031      	beq.n	80032ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f86e 	bl	800336c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d023      	beq.n	80032e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d013      	beq.n	80032de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	4a22      	ldr	r2, [pc, #136]	; (8003344 <HAL_UART_IRQHandler+0x1f4>)
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f8dc 	bl	8001480 <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e00e      	b.n	80032fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f83b 	bl	800335a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	e00a      	b.n	80032fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f837 	bl	800335a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e006      	b.n	80032fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f833 	bl	800335a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032fa:	e01e      	b.n	800333a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	bf00      	nop
    return;
 80032fe:	e01c      	b.n	800333a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_UART_IRQHandler+0x1cc>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f85a 	bl	80033ce <UART_Transmit_IT>
    return;
 800331a:	e00f      	b.n	800333c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_UART_IRQHandler+0x1ec>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8a1 	bl	8003478 <UART_EndTransmit_IT>
    return;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_UART_IRQHandler+0x1ec>
    return;
 800333a:	bf00      	nop
  }
}
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	080033a7 	.word	0x080033a7

08003348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003382:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff ffca 	bl	800335a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b21      	cmp	r3, #33	; 0x21
 80033e0:	d144      	bne.n	800346c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	d11a      	bne.n	8003422 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003400:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	1c9a      	adds	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]
 8003414:	e00e      	b.n	8003434 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]
 8003420:	e008      	b.n	8003434 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6211      	str	r1, [r2, #32]
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003456:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003466:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff55 	bl	8003348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b22      	cmp	r3, #34	; 0x22
 80034ba:	d171      	bne.n	80035a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d123      	bne.n	800350e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	1c9a      	adds	r2, r3, #2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
 80034f0:	e029      	b.n	8003546 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
 800350c:	e01b      	b.n	8003546 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6858      	ldr	r0, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	1c59      	adds	r1, r3, #1
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6291      	str	r1, [r2, #40]	; 0x28
 8003526:	b2c2      	uxtb	r2, r0
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e00c      	b.n	8003546 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	1c58      	adds	r0, r3, #1
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	6288      	str	r0, [r1, #40]	; 0x28
 800353e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4619      	mov	r1, r3
 8003554:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003556:	2b00      	cmp	r3, #0
 8003558:	d120      	bne.n	800359c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0220 	bic.w	r2, r2, #32
 8003568:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003578:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fc ffa0 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e002      	b.n	80035a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035e6:	f023 030c 	bic.w	r3, r3, #12
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a52      	ldr	r2, [pc, #328]	; (8003758 <UART_SetConfig+0x1ac>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d14e      	bne.n	80036b2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003614:	f7fe fd28 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 8003618:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	4a4a      	ldr	r2, [pc, #296]	; (800375c <UART_SetConfig+0x1b0>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	0119      	lsls	r1, r3, #4
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009a      	lsls	r2, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003650:	4b42      	ldr	r3, [pc, #264]	; (800375c <UART_SetConfig+0x1b0>)
 8003652:	fba3 0302 	umull	r0, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2064      	movs	r0, #100	; 0x64
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a3d      	ldr	r2, [pc, #244]	; (800375c <UART_SetConfig+0x1b0>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003670:	4419      	add	r1, r3
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <UART_SetConfig+0x1b0>)
 800368a:	fba3 0302 	umull	r0, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a2f      	ldr	r2, [pc, #188]	; (800375c <UART_SetConfig+0x1b0>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	440a      	add	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80036b0:	e04d      	b.n	800374e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036b2:	f7fe fcc5 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 80036b6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	4a23      	ldr	r2, [pc, #140]	; (800375c <UART_SetConfig+0x1b0>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	0119      	lsls	r1, r3, #4
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009a      	lsls	r2, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <UART_SetConfig+0x1b0>)
 80036f0:	fba3 0302 	umull	r0, r3, r3, r2
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	2064      	movs	r0, #100	; 0x64
 80036f8:	fb00 f303 	mul.w	r3, r0, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	3332      	adds	r3, #50	; 0x32
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <UART_SetConfig+0x1b0>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800370e:	4419      	add	r1, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	fbb2 f2f3 	udiv	r2, r2, r3
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <UART_SetConfig+0x1b0>)
 8003728:	fba3 0302 	umull	r0, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2064      	movs	r0, #100	; 0x64
 8003730:	fb00 f303 	mul.w	r3, r0, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	; 0x32
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <UART_SetConfig+0x1b0>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	440a      	add	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40013800 	.word	0x40013800
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2500      	movs	r5, #0
 8003764:	4e0c      	ldr	r6, [pc, #48]	; (8003798 <__libc_init_array+0x38>)
 8003766:	4c0d      	ldr	r4, [pc, #52]	; (800379c <__libc_init_array+0x3c>)
 8003768:	1ba4      	subs	r4, r4, r6
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	42a5      	cmp	r5, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	f000 f848 	bl	8003804 <_init>
 8003774:	2500      	movs	r5, #0
 8003776:	4e0a      	ldr	r6, [pc, #40]	; (80037a0 <__libc_init_array+0x40>)
 8003778:	4c0a      	ldr	r4, [pc, #40]	; (80037a4 <__libc_init_array+0x44>)
 800377a:	1ba4      	subs	r4, r4, r6
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	42a5      	cmp	r5, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003788:	4798      	blx	r3
 800378a:	3501      	adds	r5, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003792:	4798      	blx	r3
 8003794:	3501      	adds	r5, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	08003ad0 	.word	0x08003ad0
 800379c:	08003ad0 	.word	0x08003ad0
 80037a0:	08003ad0 	.word	0x08003ad0
 80037a4:	08003ad4 	.word	0x08003ad4

080037a8 <memcpy>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	1e43      	subs	r3, r0, #1
 80037ac:	440a      	add	r2, r1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	d100      	bne.n	80037b4 <memcpy+0xc>
 80037b2:	bd10      	pop	{r4, pc}
 80037b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037bc:	e7f7      	b.n	80037ae <memcpy+0x6>

080037be <memset>:
 80037be:	4603      	mov	r3, r0
 80037c0:	4402      	add	r2, r0
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d100      	bne.n	80037c8 <memset+0xa>
 80037c6:	4770      	bx	lr
 80037c8:	f803 1b01 	strb.w	r1, [r3], #1
 80037cc:	e7f9      	b.n	80037c2 <memset+0x4>

080037ce <strstr>:
 80037ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d0:	7803      	ldrb	r3, [r0, #0]
 80037d2:	b17b      	cbz	r3, 80037f4 <strstr+0x26>
 80037d4:	4604      	mov	r4, r0
 80037d6:	7823      	ldrb	r3, [r4, #0]
 80037d8:	4620      	mov	r0, r4
 80037da:	1c66      	adds	r6, r4, #1
 80037dc:	b17b      	cbz	r3, 80037fe <strstr+0x30>
 80037de:	1e4a      	subs	r2, r1, #1
 80037e0:	1e63      	subs	r3, r4, #1
 80037e2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80037e6:	b14d      	cbz	r5, 80037fc <strstr+0x2e>
 80037e8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80037ec:	4634      	mov	r4, r6
 80037ee:	42af      	cmp	r7, r5
 80037f0:	d0f7      	beq.n	80037e2 <strstr+0x14>
 80037f2:	e7f0      	b.n	80037d6 <strstr+0x8>
 80037f4:	780b      	ldrb	r3, [r1, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf18      	it	ne
 80037fa:	2000      	movne	r0, #0
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fe:	4618      	mov	r0, r3
 8003800:	e7fc      	b.n	80037fc <strstr+0x2e>
	...

08003804 <_init>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr

08003810 <_fini>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr
